# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {
        "per_foot_land": "perFootLand",
        "lease_type": "leaseType",
        "nnn_expenses": "nnnExpenses",
    }
)
class PropertyListingForLease(BaseModel):
    """PropertyListingForLease

    :param lease_listing_acquired: lease_listing_acquired, defaults to None
    :type lease_listing_acquired: str, optional
    :param lease_listing_expires: lease_listing_expires, defaults to None
    :type lease_listing_expires: str, optional
    :param lease_listing_number: lease_listing_number, defaults to None
    :type lease_listing_number: str, optional
    :param available: available, defaults to None
    :type available: str, optional
    :param percent_rent: percent_rent, defaults to None
    :type percent_rent: str, optional
    :param min_contig: min_contig, defaults to None
    :type min_contig: float, optional
    :param max_contig: max_contig, defaults to None
    :type max_contig: float, optional
    :param min_per_sqft: min_per_sqft, defaults to None
    :type min_per_sqft: float, optional
    :param max_per_sqft: max_per_sqft, defaults to None
    :type max_per_sqft: float, optional
    :param tax_per_sqft: tax_per_sqft, defaults to None
    :type tax_per_sqft: float, optional
    :param ins_per_sqft: ins_per_sqft, defaults to None
    :type ins_per_sqft: float, optional
    :param cam_per_sqft: cam_per_sqft, defaults to None
    :type cam_per_sqft: float, optional
    :param min_per_mo: min_per_mo, defaults to None
    :type min_per_mo: float, optional
    :param max_per_mo: max_per_mo, defaults to None
    :type max_per_mo: float, optional
    :param tia: tia, defaults to None
    :type tia: str, optional
    :param sign_up: sign_up, defaults to None
    :type sign_up: str, optional
    :param sign_down: sign_down, defaults to None
    :type sign_down: str, optional
    :param lockbox: lockbox, defaults to None
    :type lockbox: str, optional
    :param per_foot_land: per_foot_land, defaults to None
    :type per_foot_land: float, optional
    :param lease_type: lease_type, defaults to None
    :type lease_type: str, optional
    :param nnn_expenses: nnn_expenses, defaults to None
    :type nnn_expenses: float, optional
    """

    def __init__(
        self,
        lease_listing_acquired: str = None,
        lease_listing_expires: str = None,
        lease_listing_number: str = None,
        available: str = None,
        percent_rent: str = None,
        min_contig: float = None,
        max_contig: float = None,
        min_per_sqft: float = None,
        max_per_sqft: float = None,
        tax_per_sqft: float = None,
        ins_per_sqft: float = None,
        cam_per_sqft: float = None,
        min_per_mo: float = None,
        max_per_mo: float = None,
        tia: str = None,
        sign_up: str = None,
        sign_down: str = None,
        lockbox: str = None,
        per_foot_land: float = None,
        lease_type: str = None,
        nnn_expenses: float = None,
        **kwargs
    ):
        """PropertyListingForLease

        :param lease_listing_acquired: lease_listing_acquired, defaults to None
        :type lease_listing_acquired: str, optional
        :param lease_listing_expires: lease_listing_expires, defaults to None
        :type lease_listing_expires: str, optional
        :param lease_listing_number: lease_listing_number, defaults to None
        :type lease_listing_number: str, optional
        :param available: available, defaults to None
        :type available: str, optional
        :param percent_rent: percent_rent, defaults to None
        :type percent_rent: str, optional
        :param min_contig: min_contig, defaults to None
        :type min_contig: float, optional
        :param max_contig: max_contig, defaults to None
        :type max_contig: float, optional
        :param min_per_sqft: min_per_sqft, defaults to None
        :type min_per_sqft: float, optional
        :param max_per_sqft: max_per_sqft, defaults to None
        :type max_per_sqft: float, optional
        :param tax_per_sqft: tax_per_sqft, defaults to None
        :type tax_per_sqft: float, optional
        :param ins_per_sqft: ins_per_sqft, defaults to None
        :type ins_per_sqft: float, optional
        :param cam_per_sqft: cam_per_sqft, defaults to None
        :type cam_per_sqft: float, optional
        :param min_per_mo: min_per_mo, defaults to None
        :type min_per_mo: float, optional
        :param max_per_mo: max_per_mo, defaults to None
        :type max_per_mo: float, optional
        :param tia: tia, defaults to None
        :type tia: str, optional
        :param sign_up: sign_up, defaults to None
        :type sign_up: str, optional
        :param sign_down: sign_down, defaults to None
        :type sign_down: str, optional
        :param lockbox: lockbox, defaults to None
        :type lockbox: str, optional
        :param per_foot_land: per_foot_land, defaults to None
        :type per_foot_land: float, optional
        :param lease_type: lease_type, defaults to None
        :type lease_type: str, optional
        :param nnn_expenses: nnn_expenses, defaults to None
        :type nnn_expenses: float, optional
        """
        if lease_listing_acquired is not None:
            self.lease_listing_acquired = self._define_str(
                "lease_listing_acquired", lease_listing_acquired, nullable=True
            )
        if lease_listing_expires is not None:
            self.lease_listing_expires = self._define_str(
                "lease_listing_expires", lease_listing_expires, nullable=True
            )
        if lease_listing_number is not None:
            self.lease_listing_number = self._define_str(
                "lease_listing_number", lease_listing_number, nullable=True
            )
        if available is not None:
            self.available = self._define_str("available", available, nullable=True)
        if percent_rent is not None:
            self.percent_rent = self._define_str(
                "percent_rent", percent_rent, nullable=True
            )
        if min_contig is not None:
            self.min_contig = self._define_number(
                "min_contig", min_contig, nullable=True
            )
        if max_contig is not None:
            self.max_contig = self._define_number(
                "max_contig", max_contig, nullable=True
            )
        if min_per_sqft is not None:
            self.min_per_sqft = self._define_number(
                "min_per_sqft", min_per_sqft, nullable=True
            )
        if max_per_sqft is not None:
            self.max_per_sqft = self._define_number(
                "max_per_sqft", max_per_sqft, nullable=True
            )
        if tax_per_sqft is not None:
            self.tax_per_sqft = self._define_number(
                "tax_per_sqft", tax_per_sqft, nullable=True
            )
        if ins_per_sqft is not None:
            self.ins_per_sqft = self._define_number(
                "ins_per_sqft", ins_per_sqft, nullable=True
            )
        if cam_per_sqft is not None:
            self.cam_per_sqft = self._define_number(
                "cam_per_sqft", cam_per_sqft, nullable=True
            )
        if min_per_mo is not None:
            self.min_per_mo = self._define_number(
                "min_per_mo", min_per_mo, nullable=True
            )
        if max_per_mo is not None:
            self.max_per_mo = self._define_number(
                "max_per_mo", max_per_mo, nullable=True
            )
        if tia is not None:
            self.tia = self._define_str("tia", tia, nullable=True)
        if sign_up is not None:
            self.sign_up = self._define_str("sign_up", sign_up, nullable=True)
        if sign_down is not None:
            self.sign_down = self._define_str("sign_down", sign_down, nullable=True)
        if lockbox is not None:
            self.lockbox = self._define_str("lockbox", lockbox, nullable=True)
        if per_foot_land is not None:
            self.per_foot_land = self._define_number(
                "per_foot_land", per_foot_land, nullable=True
            )
        if lease_type is not None:
            self.lease_type = self._define_str("lease_type", lease_type, nullable=True)
        if nnn_expenses is not None:
            self.nnn_expenses = self._define_number(
                "nnn_expenses", nnn_expenses, nullable=True
            )
        self._kwargs = kwargs
