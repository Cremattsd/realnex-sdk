# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .guid_key_name_object import GuidKeyNameObject
from .object_link import ObjectLink
from .principal_link import PrincipalLink
from .comp_space import CompSpace
from .comp_contact import CompContact
from .lease_comp_details import LeaseCompDetails


@JsonMap(
    {
        "object_groups": "objectGroups",
        "space_link": "spaceLink",
        "lessee_principal": "lesseePrincipal",
        "lessor_principal": "lessorPrincipal",
        "procuring_principal": "procuringPrincipal",
        "listing_principal": "listingPrincipal",
        "lessee_contact": "lesseeContact",
        "lessor_contact": "lessorContact",
        "procuring_contact": "procuringContact",
        "listing_contact": "listingContact",
    }
)
class LeaseComp(BaseModel):
    """LeaseComp

    :param user: user, defaults to None
    :type user: GuidKeyNameObject, optional
    :param team: team, defaults to None
    :type team: GuidKeyNameObject, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[GuidKeyNameObject], optional
    :param key: key, defaults to None
    :type key: str, optional
    :param space_link: space_link, defaults to None
    :type space_link: ObjectLink, optional
    :param lessee_principal: lessee_principal, defaults to None
    :type lessee_principal: PrincipalLink, optional
    :param lessor_principal: lessor_principal, defaults to None
    :type lessor_principal: PrincipalLink, optional
    :param procuring_principal: procuring_principal, defaults to None
    :type procuring_principal: PrincipalLink, optional
    :param listing_principal: listing_principal, defaults to None
    :type listing_principal: PrincipalLink, optional
    :param space: space, defaults to None
    :type space: CompSpace, optional
    :param lessee_contact: lessee_contact, defaults to None
    :type lessee_contact: CompContact, optional
    :param lessor_contact: lessor_contact, defaults to None
    :type lessor_contact: CompContact, optional
    :param procuring_contact: procuring_contact, defaults to None
    :type procuring_contact: CompContact, optional
    :param listing_contact: listing_contact, defaults to None
    :type listing_contact: CompContact, optional
    :param details: details, defaults to None
    :type details: LeaseCompDetails, optional
    """

    def __init__(
        self,
        user: GuidKeyNameObject = None,
        team: GuidKeyNameObject = None,
        notes: str = None,
        object_groups: List[GuidKeyNameObject] = None,
        key: str = None,
        space_link: ObjectLink = None,
        lessee_principal: PrincipalLink = None,
        lessor_principal: PrincipalLink = None,
        procuring_principal: PrincipalLink = None,
        listing_principal: PrincipalLink = None,
        space: CompSpace = None,
        lessee_contact: CompContact = None,
        lessor_contact: CompContact = None,
        procuring_contact: CompContact = None,
        listing_contact: CompContact = None,
        details: LeaseCompDetails = None,
        **kwargs,
    ):
        """LeaseComp

        :param user: user, defaults to None
        :type user: GuidKeyNameObject, optional
        :param team: team, defaults to None
        :type team: GuidKeyNameObject, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[GuidKeyNameObject], optional
        :param key: key, defaults to None
        :type key: str, optional
        :param space_link: space_link, defaults to None
        :type space_link: ObjectLink, optional
        :param lessee_principal: lessee_principal, defaults to None
        :type lessee_principal: PrincipalLink, optional
        :param lessor_principal: lessor_principal, defaults to None
        :type lessor_principal: PrincipalLink, optional
        :param procuring_principal: procuring_principal, defaults to None
        :type procuring_principal: PrincipalLink, optional
        :param listing_principal: listing_principal, defaults to None
        :type listing_principal: PrincipalLink, optional
        :param space: space, defaults to None
        :type space: CompSpace, optional
        :param lessee_contact: lessee_contact, defaults to None
        :type lessee_contact: CompContact, optional
        :param lessor_contact: lessor_contact, defaults to None
        :type lessor_contact: CompContact, optional
        :param procuring_contact: procuring_contact, defaults to None
        :type procuring_contact: CompContact, optional
        :param listing_contact: listing_contact, defaults to None
        :type listing_contact: CompContact, optional
        :param details: details, defaults to None
        :type details: LeaseCompDetails, optional
        """
        if user is not None:
            self.user = self._define_object(user, GuidKeyNameObject)
        if team is not None:
            self.team = self._define_object(team, GuidKeyNameObject)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, GuidKeyNameObject)
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if space_link is not None:
            self.space_link = self._define_object(space_link, ObjectLink)
        if lessee_principal is not None:
            self.lessee_principal = self._define_object(lessee_principal, PrincipalLink)
        if lessor_principal is not None:
            self.lessor_principal = self._define_object(lessor_principal, PrincipalLink)
        if procuring_principal is not None:
            self.procuring_principal = self._define_object(
                procuring_principal, PrincipalLink
            )
        if listing_principal is not None:
            self.listing_principal = self._define_object(
                listing_principal, PrincipalLink
            )
        if space is not None:
            self.space = self._define_object(space, CompSpace)
        if lessee_contact is not None:
            self.lessee_contact = self._define_object(lessee_contact, CompContact)
        if lessor_contact is not None:
            self.lessor_contact = self._define_object(lessor_contact, CompContact)
        if procuring_contact is not None:
            self.procuring_contact = self._define_object(procuring_contact, CompContact)
        if listing_contact is not None:
            self.listing_contact = self._define_object(listing_contact, CompContact)
        if details is not None:
            self.details = self._define_object(details, LeaseCompDetails)
        self._kwargs = kwargs
