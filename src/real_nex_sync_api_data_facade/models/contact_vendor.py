# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .user_fields import UserFields
from .user_data_fields import UserDataFields
from .logical_fields import LogicalFields


@JsonMap(
    {
        "contract_date": "contractDate",
        "user_fields": "userFields",
        "user_data_fields": "userDataFields",
        "logical_fields": "logicalFields",
    }
)
class ContactVendor(BaseModel):
    """ContactVendor

    :param business: business, defaults to None
    :type business: str, optional
    :param rate: rate, defaults to None
    :type rate: str, optional
    :param quality: quality, defaults to None
    :type quality: str, optional
    :param keywords: keywords, defaults to None
    :type keywords: str, optional
    :param areas: areas, defaults to None
    :type areas: str, optional
    :param contract_date: contract_date, defaults to None
    :type contract_date: str, optional
    :param user_fields: user_fields, defaults to None
    :type user_fields: UserFields, optional
    :param user_data_fields: user_data_fields, defaults to None
    :type user_data_fields: UserDataFields, optional
    :param logical_fields: logical_fields, defaults to None
    :type logical_fields: LogicalFields, optional
    """

    def __init__(
        self,
        business: str = None,
        rate: str = None,
        quality: str = None,
        keywords: str = None,
        areas: str = None,
        contract_date: str = None,
        user_fields: UserFields = None,
        user_data_fields: UserDataFields = None,
        logical_fields: LogicalFields = None,
        **kwargs,
    ):
        """ContactVendor

        :param business: business, defaults to None
        :type business: str, optional
        :param rate: rate, defaults to None
        :type rate: str, optional
        :param quality: quality, defaults to None
        :type quality: str, optional
        :param keywords: keywords, defaults to None
        :type keywords: str, optional
        :param areas: areas, defaults to None
        :type areas: str, optional
        :param contract_date: contract_date, defaults to None
        :type contract_date: str, optional
        :param user_fields: user_fields, defaults to None
        :type user_fields: UserFields, optional
        :param user_data_fields: user_data_fields, defaults to None
        :type user_data_fields: UserDataFields, optional
        :param logical_fields: logical_fields, defaults to None
        :type logical_fields: LogicalFields, optional
        """
        if business is not None:
            self.business = self._define_str("business", business, nullable=True)
        if rate is not None:
            self.rate = self._define_str("rate", rate, nullable=True)
        if quality is not None:
            self.quality = self._define_str("quality", quality, nullable=True)
        if keywords is not None:
            self.keywords = self._define_str("keywords", keywords, nullable=True)
        if areas is not None:
            self.areas = self._define_str("areas", areas, nullable=True)
        if contract_date is not None:
            self.contract_date = self._define_str(
                "contract_date", contract_date, nullable=True
            )
        if user_fields is not None:
            self.user_fields = self._define_object(user_fields, UserFields)
        if user_data_fields is not None:
            self.user_data_fields = self._define_object(
                user_data_fields, UserDataFields
            )
        if logical_fields is not None:
            self.logical_fields = self._define_object(logical_fields, LogicalFields)
        self._kwargs = kwargs
