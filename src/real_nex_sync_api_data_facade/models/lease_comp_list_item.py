# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .address import Address
from .comp_contact import CompContact
from .lease_comp_details import LeaseCompDetails
from .history import History
from .object_group_list_item import ObjectGroupListItem


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "property_name": "propertyName",
        "lessee_contact": "lesseeContact",
        "lessor_contact": "lessorContact",
        "procuring_contact": "procuringContact",
        "listing_contact": "listingContact",
        "last_activity": "lastActivity",
        "object_groups": "objectGroups",
    }
)
class LeaseCompListItem(BaseModel):
    """LeaseCompListItem

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param property_name: property_name, defaults to None
    :type property_name: str, optional
    :param address: address, defaults to None
    :type address: Address, optional
    :param suite: suite, defaults to None
    :type suite: str, optional
    :param lessee_contact: lessee_contact, defaults to None
    :type lessee_contact: CompContact, optional
    :param lessor_contact: lessor_contact, defaults to None
    :type lessor_contact: CompContact, optional
    :param procuring_contact: procuring_contact, defaults to None
    :type procuring_contact: CompContact, optional
    :param listing_contact: listing_contact, defaults to None
    :type listing_contact: CompContact, optional
    :param details: details, defaults to None
    :type details: LeaseCompDetails, optional
    :param last_activity: last_activity, defaults to None
    :type last_activity: History, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[ObjectGroupListItem], optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        property_name: str = None,
        address: Address = None,
        suite: str = None,
        lessee_contact: CompContact = None,
        lessor_contact: CompContact = None,
        procuring_contact: CompContact = None,
        listing_contact: CompContact = None,
        details: LeaseCompDetails = None,
        last_activity: History = None,
        object_groups: List[ObjectGroupListItem] = None,
        **kwargs,
    ):
        """LeaseCompListItem

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param property_name: property_name, defaults to None
        :type property_name: str, optional
        :param address: address, defaults to None
        :type address: Address, optional
        :param suite: suite, defaults to None
        :type suite: str, optional
        :param lessee_contact: lessee_contact, defaults to None
        :type lessee_contact: CompContact, optional
        :param lessor_contact: lessor_contact, defaults to None
        :type lessor_contact: CompContact, optional
        :param procuring_contact: procuring_contact, defaults to None
        :type procuring_contact: CompContact, optional
        :param listing_contact: listing_contact, defaults to None
        :type listing_contact: CompContact, optional
        :param details: details, defaults to None
        :type details: LeaseCompDetails, optional
        :param last_activity: last_activity, defaults to None
        :type last_activity: History, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[ObjectGroupListItem], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = user_key
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if property_name is not None:
            self.property_name = self._define_str(
                "property_name", property_name, nullable=True
            )
        if address is not None:
            self.address = self._define_object(address, Address)
        if suite is not None:
            self.suite = self._define_str("suite", suite, nullable=True)
        if lessee_contact is not None:
            self.lessee_contact = self._define_object(lessee_contact, CompContact)
        if lessor_contact is not None:
            self.lessor_contact = self._define_object(lessor_contact, CompContact)
        if procuring_contact is not None:
            self.procuring_contact = self._define_object(procuring_contact, CompContact)
        if listing_contact is not None:
            self.listing_contact = self._define_object(listing_contact, CompContact)
        if details is not None:
            self.details = self._define_object(details, LeaseCompDetails)
        if last_activity is not None:
            self.last_activity = self._define_object(last_activity, History)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, ObjectGroupListItem)
        self._kwargs = kwargs
