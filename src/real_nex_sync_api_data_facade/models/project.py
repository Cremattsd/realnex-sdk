# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .guid_key_name_object import GuidKeyNameObject
from .principal_link import PrincipalLink
from .object_link import ObjectLink
from .project_lead import ProjectLead
from .user_fields import UserFields
from .user_data_fields import UserDataFields
from .logical_fields import LogicalFields


@JsonMap(
    {
        "object_groups": "objectGroups",
        "project_name": "projectName",
        "project_type": "projectType",
        "project_status": "projectStatus",
        "project_result": "projectResult",
        "client_link": "clientLink",
        "counter_party_client_link": "counterPartyClientLink",
        "listing_link": "listingLink",
        "date_opened": "dateOpened",
        "date_expected": "dateExpected",
        "date_closed": "dateClosed",
        "admin_link": "adminLink",
        "registration_link": "registrationLink",
        "login_link": "loginLink",
        "trans_type": "transType",
        "prop_space_type": "propSpaceType",
        "comp_completed": "compCompleted",
        "listing_exp": "listingExp",
        "lease_exp": "leaseExp",
        "listing_number": "listingNumber",
        "user_fields": "userFields",
        "user_data_fields": "userDataFields",
        "logical_fields": "logicalFields",
    }
)
class Project(BaseModel):
    """Project

    :param user: user, defaults to None
    :type user: GuidKeyNameObject, optional
    :param team: team, defaults to None
    :type team: GuidKeyNameObject, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[GuidKeyNameObject], optional
    :param key: key, defaults to None
    :type key: str, optional
    :param project_name: project_name, defaults to None
    :type project_name: str, optional
    :param project_type: project_type, defaults to None
    :type project_type: str, optional
    :param project_status: project_status, defaults to None
    :type project_status: str, optional
    :param project_result: project_result, defaults to None
    :type project_result: str, optional
    :param client_link: client_link, defaults to None
    :type client_link: PrincipalLink, optional
    :param counter_party_client_link: counter_party_client_link, defaults to None
    :type counter_party_client_link: PrincipalLink, optional
    :param listing_link: listing_link, defaults to None
    :type listing_link: ObjectLink, optional
    :param size: size, defaults to None
    :type size: float, optional
    :param amount: amount, defaults to None
    :type amount: float, optional
    :param date_opened: date_opened, defaults to None
    :type date_opened: str, optional
    :param date_expected: date_expected, defaults to None
    :type date_expected: str, optional
    :param date_closed: date_closed, defaults to None
    :type date_closed: str, optional
    :param probability: probability, defaults to None
    :type probability: int, optional
    :param commission: commission, defaults to None
    :type commission: float, optional
    :param reason: reason, defaults to None
    :type reason: str, optional
    :param admin_link: admin_link, defaults to None
    :type admin_link: str, optional
    :param registration_link: registration_link, defaults to None
    :type registration_link: str, optional
    :param login_link: login_link, defaults to None
    :type login_link: str, optional
    :param investment: investment, defaults to None
    :type investment: bool, optional
    :param inhouselisting: inhouselisting, defaults to None
    :type inhouselisting: bool, optional
    :param inhouserepresentation: inhouserepresentation, defaults to None
    :type inhouserepresentation: bool, optional
    :param commissionpercentage: commissionpercentage, defaults to None
    :type commissionpercentage: float, optional
    :param flatfee: flatfee, defaults to None
    :type flatfee: float, optional
    :param trans_type: trans_type, defaults to None
    :type trans_type: str, optional
    :param prop_space_type: prop_space_type, defaults to None
    :type prop_space_type: str, optional
    :param comp_completed: comp_completed, defaults to None
    :type comp_completed: str, optional
    :param listing_exp: listing_exp, defaults to None
    :type listing_exp: str, optional
    :param lease_exp: lease_exp, defaults to None
    :type lease_exp: str, optional
    :param listing_number: listing_number, defaults to None
    :type listing_number: int, optional
    :param leads: leads, defaults to None
    :type leads: List[ProjectLead], optional
    :param user_fields: user_fields, defaults to None
    :type user_fields: UserFields, optional
    :param user_data_fields: user_data_fields, defaults to None
    :type user_data_fields: UserDataFields, optional
    :param logical_fields: logical_fields, defaults to None
    :type logical_fields: LogicalFields, optional
    """

    def __init__(
        self,
        user: GuidKeyNameObject = None,
        team: GuidKeyNameObject = None,
        notes: str = None,
        object_groups: List[GuidKeyNameObject] = None,
        key: str = None,
        project_name: str = None,
        project_type: str = None,
        project_status: str = None,
        project_result: str = None,
        client_link: PrincipalLink = None,
        counter_party_client_link: PrincipalLink = None,
        listing_link: ObjectLink = None,
        size: float = None,
        amount: float = None,
        date_opened: str = None,
        date_expected: str = None,
        date_closed: str = None,
        probability: int = None,
        commission: float = None,
        reason: str = None,
        admin_link: str = None,
        registration_link: str = None,
        login_link: str = None,
        investment: bool = None,
        inhouselisting: bool = None,
        inhouserepresentation: bool = None,
        commissionpercentage: float = None,
        flatfee: float = None,
        trans_type: str = None,
        prop_space_type: str = None,
        comp_completed: str = None,
        listing_exp: str = None,
        lease_exp: str = None,
        listing_number: int = None,
        leads: List[ProjectLead] = None,
        user_fields: UserFields = None,
        user_data_fields: UserDataFields = None,
        logical_fields: LogicalFields = None,
        **kwargs,
    ):
        """Project

        :param user: user, defaults to None
        :type user: GuidKeyNameObject, optional
        :param team: team, defaults to None
        :type team: GuidKeyNameObject, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[GuidKeyNameObject], optional
        :param key: key, defaults to None
        :type key: str, optional
        :param project_name: project_name, defaults to None
        :type project_name: str, optional
        :param project_type: project_type, defaults to None
        :type project_type: str, optional
        :param project_status: project_status, defaults to None
        :type project_status: str, optional
        :param project_result: project_result, defaults to None
        :type project_result: str, optional
        :param client_link: client_link, defaults to None
        :type client_link: PrincipalLink, optional
        :param counter_party_client_link: counter_party_client_link, defaults to None
        :type counter_party_client_link: PrincipalLink, optional
        :param listing_link: listing_link, defaults to None
        :type listing_link: ObjectLink, optional
        :param size: size, defaults to None
        :type size: float, optional
        :param amount: amount, defaults to None
        :type amount: float, optional
        :param date_opened: date_opened, defaults to None
        :type date_opened: str, optional
        :param date_expected: date_expected, defaults to None
        :type date_expected: str, optional
        :param date_closed: date_closed, defaults to None
        :type date_closed: str, optional
        :param probability: probability, defaults to None
        :type probability: int, optional
        :param commission: commission, defaults to None
        :type commission: float, optional
        :param reason: reason, defaults to None
        :type reason: str, optional
        :param admin_link: admin_link, defaults to None
        :type admin_link: str, optional
        :param registration_link: registration_link, defaults to None
        :type registration_link: str, optional
        :param login_link: login_link, defaults to None
        :type login_link: str, optional
        :param investment: investment, defaults to None
        :type investment: bool, optional
        :param inhouselisting: inhouselisting, defaults to None
        :type inhouselisting: bool, optional
        :param inhouserepresentation: inhouserepresentation, defaults to None
        :type inhouserepresentation: bool, optional
        :param commissionpercentage: commissionpercentage, defaults to None
        :type commissionpercentage: float, optional
        :param flatfee: flatfee, defaults to None
        :type flatfee: float, optional
        :param trans_type: trans_type, defaults to None
        :type trans_type: str, optional
        :param prop_space_type: prop_space_type, defaults to None
        :type prop_space_type: str, optional
        :param comp_completed: comp_completed, defaults to None
        :type comp_completed: str, optional
        :param listing_exp: listing_exp, defaults to None
        :type listing_exp: str, optional
        :param lease_exp: lease_exp, defaults to None
        :type lease_exp: str, optional
        :param listing_number: listing_number, defaults to None
        :type listing_number: int, optional
        :param leads: leads, defaults to None
        :type leads: List[ProjectLead], optional
        :param user_fields: user_fields, defaults to None
        :type user_fields: UserFields, optional
        :param user_data_fields: user_data_fields, defaults to None
        :type user_data_fields: UserDataFields, optional
        :param logical_fields: logical_fields, defaults to None
        :type logical_fields: LogicalFields, optional
        """
        if user is not None:
            self.user = self._define_object(user, GuidKeyNameObject)
        if team is not None:
            self.team = self._define_object(team, GuidKeyNameObject)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, GuidKeyNameObject)
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if project_name is not None:
            self.project_name = self._define_str(
                "project_name", project_name, nullable=True
            )
        if project_type is not None:
            self.project_type = self._define_str(
                "project_type", project_type, nullable=True
            )
        if project_status is not None:
            self.project_status = self._define_str(
                "project_status", project_status, nullable=True
            )
        if project_result is not None:
            self.project_result = self._define_str(
                "project_result", project_result, nullable=True
            )
        if client_link is not None:
            self.client_link = self._define_object(client_link, PrincipalLink)
        if counter_party_client_link is not None:
            self.counter_party_client_link = self._define_object(
                counter_party_client_link, PrincipalLink
            )
        if listing_link is not None:
            self.listing_link = self._define_object(listing_link, ObjectLink)
        if size is not None:
            self.size = self._define_number("size", size, nullable=True)
        if amount is not None:
            self.amount = self._define_number("amount", amount, nullable=True)
        if date_opened is not None:
            self.date_opened = self._define_str(
                "date_opened", date_opened, nullable=True
            )
        if date_expected is not None:
            self.date_expected = self._define_str(
                "date_expected", date_expected, nullable=True
            )
        if date_closed is not None:
            self.date_closed = self._define_str(
                "date_closed", date_closed, nullable=True
            )
        if probability is not None:
            self.probability = self._define_number(
                "probability", probability, nullable=True
            )
        if commission is not None:
            self.commission = self._define_number(
                "commission", commission, nullable=True
            )
        if reason is not None:
            self.reason = self._define_str("reason", reason, nullable=True)
        if admin_link is not None:
            self.admin_link = self._define_str("admin_link", admin_link, nullable=True)
        if registration_link is not None:
            self.registration_link = self._define_str(
                "registration_link", registration_link, nullable=True
            )
        if login_link is not None:
            self.login_link = self._define_str("login_link", login_link, nullable=True)
        if investment is not None:
            self.investment = investment
        if inhouselisting is not None:
            self.inhouselisting = inhouselisting
        if inhouserepresentation is not None:
            self.inhouserepresentation = inhouserepresentation
        if commissionpercentage is not None:
            self.commissionpercentage = self._define_number(
                "commissionpercentage", commissionpercentage, nullable=True
            )
        if flatfee is not None:
            self.flatfee = self._define_number("flatfee", flatfee, nullable=True)
        if trans_type is not None:
            self.trans_type = self._define_str("trans_type", trans_type, nullable=True)
        if prop_space_type is not None:
            self.prop_space_type = self._define_str(
                "prop_space_type", prop_space_type, nullable=True
            )
        if comp_completed is not None:
            self.comp_completed = self._define_str(
                "comp_completed", comp_completed, nullable=True
            )
        if listing_exp is not None:
            self.listing_exp = self._define_str(
                "listing_exp", listing_exp, nullable=True
            )
        if lease_exp is not None:
            self.lease_exp = self._define_str("lease_exp", lease_exp, nullable=True)
        if listing_number is not None:
            self.listing_number = self._define_number(
                "listing_number", listing_number, nullable=True
            )
        if leads is not None:
            self.leads = self._define_list(leads, ProjectLead)
        if user_fields is not None:
            self.user_fields = self._define_object(user_fields, UserFields)
        if user_data_fields is not None:
            self.user_data_fields = self._define_object(
                user_data_fields, UserDataFields
            )
        if logical_fields is not None:
            self.logical_fields = self._define_object(logical_fields, LogicalFields)
        self._kwargs = kwargs
