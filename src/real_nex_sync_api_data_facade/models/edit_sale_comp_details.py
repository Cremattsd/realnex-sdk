# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .logical_fields import LogicalFields
from .user_data_fields import UserDataFields
from .user_fields import UserFields


@JsonMap(
    {
        "building_id": "buildingId",
        "property_type_key": "propertyTypeKey",
        "building_class": "buildingClass",
        "construction_type": "constructionType",
        "use_code": "useCode",
        "assessed_value": "assessedValue",
        "sale_price": "salePrice",
        "sale_date": "saleDate",
        "logical_fields": "logicalFields",
        "user_data_fields": "userDataFields",
        "user_fields": "userFields",
    }
)
class EditSaleCompDetails(BaseModel):
    """EditSaleCompDetails

    :param parcel: parcel, defaults to None
    :type parcel: str, optional
    :param building_id: building_id, defaults to None
    :type building_id: str, optional
    :param description: description, defaults to None
    :type description: str, optional
    :param property_type_key: property_type_key, defaults to None
    :type property_type_key: int, optional
    :param building_class: building_class, defaults to None
    :type building_class: str, optional
    :param construction_type: construction_type, defaults to None
    :type construction_type: str, optional
    :param location: location, defaults to None
    :type location: str, optional
    :param zoning: zoning, defaults to None
    :type zoning: str, optional
    :param market: market, defaults to None
    :type market: str, optional
    :param submarket: submarket, defaults to None
    :type submarket: str, optional
    :param area: area, defaults to None
    :type area: str, optional
    :param county: county, defaults to None
    :type county: str, optional
    :param use_code: use_code, defaults to None
    :type use_code: str, optional
    :param acres: acres, defaults to None
    :type acres: float, optional
    :param sqft: sqft, defaults to None
    :type sqft: float, optional
    :param units: units, defaults to None
    :type units: int, optional
    :param stories: stories, defaults to None
    :type stories: int, optional
    :param assessed_value: assessed_value, defaults to None
    :type assessed_value: float, optional
    :param sale_price: sale_price, defaults to None
    :type sale_price: float, optional
    :param sale_date: sale_date, defaults to None
    :type sale_date: str, optional
    :param logical_fields: logical_fields, defaults to None
    :type logical_fields: LogicalFields, optional
    :param user_data_fields: user_data_fields, defaults to None
    :type user_data_fields: UserDataFields, optional
    :param user_fields: user_fields, defaults to None
    :type user_fields: UserFields, optional
    """

    def __init__(
        self,
        parcel: str = None,
        building_id: str = None,
        description: str = None,
        property_type_key: int = None,
        building_class: str = None,
        construction_type: str = None,
        location: str = None,
        zoning: str = None,
        market: str = None,
        submarket: str = None,
        area: str = None,
        county: str = None,
        use_code: str = None,
        acres: float = None,
        sqft: float = None,
        units: int = None,
        stories: int = None,
        assessed_value: float = None,
        sale_price: float = None,
        sale_date: str = None,
        logical_fields: LogicalFields = None,
        user_data_fields: UserDataFields = None,
        user_fields: UserFields = None,
        **kwargs,
    ):
        """EditSaleCompDetails

        :param parcel: parcel, defaults to None
        :type parcel: str, optional
        :param building_id: building_id, defaults to None
        :type building_id: str, optional
        :param description: description, defaults to None
        :type description: str, optional
        :param property_type_key: property_type_key, defaults to None
        :type property_type_key: int, optional
        :param building_class: building_class, defaults to None
        :type building_class: str, optional
        :param construction_type: construction_type, defaults to None
        :type construction_type: str, optional
        :param location: location, defaults to None
        :type location: str, optional
        :param zoning: zoning, defaults to None
        :type zoning: str, optional
        :param market: market, defaults to None
        :type market: str, optional
        :param submarket: submarket, defaults to None
        :type submarket: str, optional
        :param area: area, defaults to None
        :type area: str, optional
        :param county: county, defaults to None
        :type county: str, optional
        :param use_code: use_code, defaults to None
        :type use_code: str, optional
        :param acres: acres, defaults to None
        :type acres: float, optional
        :param sqft: sqft, defaults to None
        :type sqft: float, optional
        :param units: units, defaults to None
        :type units: int, optional
        :param stories: stories, defaults to None
        :type stories: int, optional
        :param assessed_value: assessed_value, defaults to None
        :type assessed_value: float, optional
        :param sale_price: sale_price, defaults to None
        :type sale_price: float, optional
        :param sale_date: sale_date, defaults to None
        :type sale_date: str, optional
        :param logical_fields: logical_fields, defaults to None
        :type logical_fields: LogicalFields, optional
        :param user_data_fields: user_data_fields, defaults to None
        :type user_data_fields: UserDataFields, optional
        :param user_fields: user_fields, defaults to None
        :type user_fields: UserFields, optional
        """
        if parcel is not None:
            self.parcel = self._define_str("parcel", parcel, nullable=True)
        if building_id is not None:
            self.building_id = self._define_str(
                "building_id", building_id, nullable=True
            )
        if description is not None:
            self.description = self._define_str(
                "description", description, nullable=True
            )
        if property_type_key is not None:
            self.property_type_key = self._define_number(
                "property_type_key", property_type_key, nullable=True
            )
        if building_class is not None:
            self.building_class = self._define_str(
                "building_class", building_class, nullable=True
            )
        if construction_type is not None:
            self.construction_type = self._define_str(
                "construction_type", construction_type, nullable=True
            )
        if location is not None:
            self.location = self._define_str("location", location, nullable=True)
        if zoning is not None:
            self.zoning = self._define_str("zoning", zoning, nullable=True)
        if market is not None:
            self.market = self._define_str("market", market, nullable=True)
        if submarket is not None:
            self.submarket = self._define_str("submarket", submarket, nullable=True)
        if area is not None:
            self.area = self._define_str("area", area, nullable=True)
        if county is not None:
            self.county = self._define_str("county", county, nullable=True)
        if use_code is not None:
            self.use_code = self._define_str("use_code", use_code, nullable=True)
        if acres is not None:
            self.acres = self._define_number("acres", acres, nullable=True)
        if sqft is not None:
            self.sqft = self._define_number("sqft", sqft, nullable=True)
        if units is not None:
            self.units = self._define_number("units", units, nullable=True)
        if stories is not None:
            self.stories = self._define_number("stories", stories, nullable=True)
        if assessed_value is not None:
            self.assessed_value = self._define_number(
                "assessed_value", assessed_value, nullable=True
            )
        if sale_price is not None:
            self.sale_price = self._define_number(
                "sale_price", sale_price, nullable=True
            )
        if sale_date is not None:
            self.sale_date = self._define_str("sale_date", sale_date, nullable=True)
        if logical_fields is not None:
            self.logical_fields = self._define_object(logical_fields, LogicalFields)
        if user_data_fields is not None:
            self.user_data_fields = self._define_object(
                user_data_fields, UserDataFields
            )
        if user_fields is not None:
            self.user_fields = self._define_object(user_fields, UserFields)
        self._kwargs = kwargs
