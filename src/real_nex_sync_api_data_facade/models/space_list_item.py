# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .address import Address
from .history import History
from .object_group_list_item import ObjectGroupListItem


@JsonMap(
    {
        "property_name": "propertyName",
        "is_available": "isAvailable",
        "is_retail": "isRetail",
        "is_vacant": "isVacant",
        "is_industrial": "isIndustrial",
        "is_office": "isOffice",
        "is_sublease": "isSublease",
        "is_other": "isOther",
        "usable_area": "usableArea",
        "load_factor": "loadFactor",
        "percent_rent": "percentRent",
        "office_area": "officeArea",
        "grade_door": "gradeDoor",
        "dock_doors": "dockDoors",
        "truck_doors": "truckDoors",
        "clear_ht": "clearHt",
        "rail_service": "railService",
        "exp_stop": "expStop",
        "rent_sqft": "rentSqft",
        "rent_month": "rentMonth",
        "effective_rent": "effectiveRent",
        "lease_comm": "leaseComm",
        "lease_exp": "leaseExp",
        "last_activity": "lastActivity",
        "object_groups": "objectGroups",
    }
)
class SpaceListItem(BaseModel):
    """SpaceListItem

    :param key: key, defaults to None
    :type key: str, optional
    :param property_name: property_name, defaults to None
    :type property_name: str, optional
    :param address: address, defaults to None
    :type address: Address, optional
    :param floor: floor, defaults to None
    :type floor: str, optional
    :param suite: suite, defaults to None
    :type suite: str, optional
    :param is_available: is_available, defaults to None
    :type is_available: bool, optional
    :param is_retail: is_retail, defaults to None
    :type is_retail: bool, optional
    :param is_vacant: is_vacant, defaults to None
    :type is_vacant: bool, optional
    :param is_industrial: is_industrial, defaults to None
    :type is_industrial: bool, optional
    :param is_office: is_office, defaults to None
    :type is_office: bool, optional
    :param is_sublease: is_sublease, defaults to None
    :type is_sublease: bool, optional
    :param is_other: is_other, defaults to None
    :type is_other: bool, optional
    :param cam: cam, defaults to None
    :type cam: float, optional
    :param occupancy: occupancy, defaults to None
    :type occupancy: str, optional
    :param taxes: taxes, defaults to None
    :type taxes: float, optional
    :param insurance: insurance, defaults to None
    :type insurance: float, optional
    :param usable_area: usable_area, defaults to None
    :type usable_area: float, optional
    :param load_factor: load_factor, defaults to None
    :type load_factor: float, optional
    :param frontage: frontage, defaults to None
    :type frontage: str, optional
    :param percent_rent: percent_rent, defaults to None
    :type percent_rent: str, optional
    :param office_area: office_area, defaults to None
    :type office_area: float, optional
    :param grade_door: grade_door, defaults to None
    :type grade_door: str, optional
    :param dock_doors: dock_doors, defaults to None
    :type dock_doors: str, optional
    :param truck_doors: truck_doors, defaults to None
    :type truck_doors: str, optional
    :param clear_ht: clear_ht, defaults to None
    :type clear_ht: str, optional
    :param power: power, defaults to None
    :type power: str, optional
    :param rail_service: rail_service, defaults to None
    :type rail_service: str, optional
    :param yard: yard, defaults to None
    :type yard: str, optional
    :param exp_stop: exp_stop, defaults to None
    :type exp_stop: str, optional
    :param rent_sqft: rent_sqft, defaults to None
    :type rent_sqft: float, optional
    :param rent_month: rent_month, defaults to None
    :type rent_month: float, optional
    :param area: area, defaults to None
    :type area: float, optional
    :param effective_rent: effective_rent, defaults to None
    :type effective_rent: float, optional
    :param lease_comm: lease_comm, defaults to None
    :type lease_comm: str, optional
    :param increases: increases, defaults to None
    :type increases: str, optional
    :param lease_exp: lease_exp, defaults to None
    :type lease_exp: str, optional
    :param options: options, defaults to None
    :type options: str, optional
    :param tia: tia, defaults to None
    :type tia: str, optional
    :param last_activity: last_activity, defaults to None
    :type last_activity: History, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[ObjectGroupListItem], optional
    """

    def __init__(
        self,
        key: str = None,
        property_name: str = None,
        address: Address = None,
        floor: str = None,
        suite: str = None,
        is_available: bool = None,
        is_retail: bool = None,
        is_vacant: bool = None,
        is_industrial: bool = None,
        is_office: bool = None,
        is_sublease: bool = None,
        is_other: bool = None,
        cam: float = None,
        occupancy: str = None,
        taxes: float = None,
        insurance: float = None,
        usable_area: float = None,
        load_factor: float = None,
        frontage: str = None,
        percent_rent: str = None,
        office_area: float = None,
        grade_door: str = None,
        dock_doors: str = None,
        truck_doors: str = None,
        clear_ht: str = None,
        power: str = None,
        rail_service: str = None,
        yard: str = None,
        exp_stop: str = None,
        rent_sqft: float = None,
        rent_month: float = None,
        area: float = None,
        effective_rent: float = None,
        lease_comm: str = None,
        increases: str = None,
        lease_exp: str = None,
        options: str = None,
        tia: str = None,
        last_activity: History = None,
        object_groups: List[ObjectGroupListItem] = None,
        **kwargs,
    ):
        """SpaceListItem

        :param key: key, defaults to None
        :type key: str, optional
        :param property_name: property_name, defaults to None
        :type property_name: str, optional
        :param address: address, defaults to None
        :type address: Address, optional
        :param floor: floor, defaults to None
        :type floor: str, optional
        :param suite: suite, defaults to None
        :type suite: str, optional
        :param is_available: is_available, defaults to None
        :type is_available: bool, optional
        :param is_retail: is_retail, defaults to None
        :type is_retail: bool, optional
        :param is_vacant: is_vacant, defaults to None
        :type is_vacant: bool, optional
        :param is_industrial: is_industrial, defaults to None
        :type is_industrial: bool, optional
        :param is_office: is_office, defaults to None
        :type is_office: bool, optional
        :param is_sublease: is_sublease, defaults to None
        :type is_sublease: bool, optional
        :param is_other: is_other, defaults to None
        :type is_other: bool, optional
        :param cam: cam, defaults to None
        :type cam: float, optional
        :param occupancy: occupancy, defaults to None
        :type occupancy: str, optional
        :param taxes: taxes, defaults to None
        :type taxes: float, optional
        :param insurance: insurance, defaults to None
        :type insurance: float, optional
        :param usable_area: usable_area, defaults to None
        :type usable_area: float, optional
        :param load_factor: load_factor, defaults to None
        :type load_factor: float, optional
        :param frontage: frontage, defaults to None
        :type frontage: str, optional
        :param percent_rent: percent_rent, defaults to None
        :type percent_rent: str, optional
        :param office_area: office_area, defaults to None
        :type office_area: float, optional
        :param grade_door: grade_door, defaults to None
        :type grade_door: str, optional
        :param dock_doors: dock_doors, defaults to None
        :type dock_doors: str, optional
        :param truck_doors: truck_doors, defaults to None
        :type truck_doors: str, optional
        :param clear_ht: clear_ht, defaults to None
        :type clear_ht: str, optional
        :param power: power, defaults to None
        :type power: str, optional
        :param rail_service: rail_service, defaults to None
        :type rail_service: str, optional
        :param yard: yard, defaults to None
        :type yard: str, optional
        :param exp_stop: exp_stop, defaults to None
        :type exp_stop: str, optional
        :param rent_sqft: rent_sqft, defaults to None
        :type rent_sqft: float, optional
        :param rent_month: rent_month, defaults to None
        :type rent_month: float, optional
        :param area: area, defaults to None
        :type area: float, optional
        :param effective_rent: effective_rent, defaults to None
        :type effective_rent: float, optional
        :param lease_comm: lease_comm, defaults to None
        :type lease_comm: str, optional
        :param increases: increases, defaults to None
        :type increases: str, optional
        :param lease_exp: lease_exp, defaults to None
        :type lease_exp: str, optional
        :param options: options, defaults to None
        :type options: str, optional
        :param tia: tia, defaults to None
        :type tia: str, optional
        :param last_activity: last_activity, defaults to None
        :type last_activity: History, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[ObjectGroupListItem], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if property_name is not None:
            self.property_name = self._define_str(
                "property_name", property_name, nullable=True
            )
        if address is not None:
            self.address = self._define_object(address, Address)
        if floor is not None:
            self.floor = self._define_str("floor", floor, nullable=True)
        if suite is not None:
            self.suite = self._define_str("suite", suite, nullable=True)
        if is_available is not None:
            self.is_available = is_available
        if is_retail is not None:
            self.is_retail = is_retail
        if is_vacant is not None:
            self.is_vacant = is_vacant
        if is_industrial is not None:
            self.is_industrial = is_industrial
        if is_office is not None:
            self.is_office = is_office
        if is_sublease is not None:
            self.is_sublease = is_sublease
        if is_other is not None:
            self.is_other = is_other
        if cam is not None:
            self.cam = self._define_number("cam", cam, nullable=True)
        if occupancy is not None:
            self.occupancy = self._define_str("occupancy", occupancy, nullable=True)
        if taxes is not None:
            self.taxes = self._define_number("taxes", taxes, nullable=True)
        if insurance is not None:
            self.insurance = self._define_number("insurance", insurance, nullable=True)
        if usable_area is not None:
            self.usable_area = self._define_number(
                "usable_area", usable_area, nullable=True
            )
        if load_factor is not None:
            self.load_factor = self._define_number(
                "load_factor", load_factor, nullable=True
            )
        if frontage is not None:
            self.frontage = self._define_str("frontage", frontage, nullable=True)
        if percent_rent is not None:
            self.percent_rent = self._define_str(
                "percent_rent", percent_rent, nullable=True
            )
        if office_area is not None:
            self.office_area = self._define_number(
                "office_area", office_area, nullable=True
            )
        if grade_door is not None:
            self.grade_door = self._define_str("grade_door", grade_door, nullable=True)
        if dock_doors is not None:
            self.dock_doors = self._define_str("dock_doors", dock_doors, nullable=True)
        if truck_doors is not None:
            self.truck_doors = self._define_str(
                "truck_doors", truck_doors, nullable=True
            )
        if clear_ht is not None:
            self.clear_ht = self._define_str("clear_ht", clear_ht, nullable=True)
        if power is not None:
            self.power = self._define_str("power", power, nullable=True)
        if rail_service is not None:
            self.rail_service = self._define_str(
                "rail_service", rail_service, nullable=True
            )
        if yard is not None:
            self.yard = self._define_str("yard", yard, nullable=True)
        if exp_stop is not None:
            self.exp_stop = self._define_str("exp_stop", exp_stop, nullable=True)
        if rent_sqft is not None:
            self.rent_sqft = self._define_number("rent_sqft", rent_sqft, nullable=True)
        if rent_month is not None:
            self.rent_month = self._define_number(
                "rent_month", rent_month, nullable=True
            )
        if area is not None:
            self.area = self._define_number("area", area, nullable=True)
        if effective_rent is not None:
            self.effective_rent = self._define_number(
                "effective_rent", effective_rent, nullable=True
            )
        if lease_comm is not None:
            self.lease_comm = self._define_str("lease_comm", lease_comm, nullable=True)
        if increases is not None:
            self.increases = self._define_str("increases", increases, nullable=True)
        if lease_exp is not None:
            self.lease_exp = self._define_str("lease_exp", lease_exp, nullable=True)
        if options is not None:
            self.options = self._define_str("options", options, nullable=True)
        if tia is not None:
            self.tia = self._define_str("tia", tia, nullable=True)
        if last_activity is not None:
            self.last_activity = self._define_object(last_activity, History)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, ObjectGroupListItem)
        self._kwargs = kwargs
