# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "project_name": "projectName",
        "project_type": "projectType",
        "project_status": "projectStatus",
        "project_result": "projectResult",
        "client_key": "clientKey",
        "counter_party_client_key": "counterPartyClientKey",
        "listing_key": "listingKey",
        "date_opened": "dateOpened",
        "date_expected": "dateExpected",
        "date_closed": "dateClosed",
        "object_groups": "objectGroups",
    }
)
class CreateProject(BaseModel):
    """CreateProject

    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param project_name: project_name, defaults to None
    :type project_name: str, optional
    :param project_type: project_type, defaults to None
    :type project_type: str, optional
    :param project_status: project_status, defaults to None
    :type project_status: str, optional
    :param project_result: project_result, defaults to None
    :type project_result: str, optional
    :param client_key: client_key, defaults to None
    :type client_key: str, optional
    :param counter_party_client_key: counter_party_client_key, defaults to None
    :type counter_party_client_key: str, optional
    :param listing_key: listing_key, defaults to None
    :type listing_key: str, optional
    :param size: size, defaults to None
    :type size: float, optional
    :param amount: amount, defaults to None
    :type amount: float, optional
    :param date_opened: date_opened, defaults to None
    :type date_opened: str, optional
    :param date_expected: date_expected, defaults to None
    :type date_expected: str, optional
    :param date_closed: date_closed, defaults to None
    :type date_closed: str, optional
    :param probability: probability, defaults to None
    :type probability: int, optional
    :param commission: commission, defaults to None
    :type commission: float, optional
    :param reason: reason, defaults to None
    :type reason: str, optional
    :param investment: investment, defaults to None
    :type investment: bool, optional
    :param inhouselisting: inhouselisting, defaults to None
    :type inhouselisting: bool, optional
    :param inhouserepresentation: inhouserepresentation, defaults to None
    :type inhouserepresentation: bool, optional
    :param commissionpercentage: commissionpercentage, defaults to None
    :type commissionpercentage: float, optional
    :param flatfee: flatfee, defaults to None
    :type flatfee: float, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[str], optional
    """

    def __init__(
        self,
        user_key: str = None,
        team_key: str = None,
        project_name: str = None,
        project_type: str = None,
        project_status: str = None,
        project_result: str = None,
        client_key: str = None,
        counter_party_client_key: str = None,
        listing_key: str = None,
        size: float = None,
        amount: float = None,
        date_opened: str = None,
        date_expected: str = None,
        date_closed: str = None,
        probability: int = None,
        commission: float = None,
        reason: str = None,
        investment: bool = None,
        inhouselisting: bool = None,
        inhouserepresentation: bool = None,
        commissionpercentage: float = None,
        flatfee: float = None,
        object_groups: List[str] = None,
        **kwargs
    ):
        """CreateProject

        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param project_name: project_name, defaults to None
        :type project_name: str, optional
        :param project_type: project_type, defaults to None
        :type project_type: str, optional
        :param project_status: project_status, defaults to None
        :type project_status: str, optional
        :param project_result: project_result, defaults to None
        :type project_result: str, optional
        :param client_key: client_key, defaults to None
        :type client_key: str, optional
        :param counter_party_client_key: counter_party_client_key, defaults to None
        :type counter_party_client_key: str, optional
        :param listing_key: listing_key, defaults to None
        :type listing_key: str, optional
        :param size: size, defaults to None
        :type size: float, optional
        :param amount: amount, defaults to None
        :type amount: float, optional
        :param date_opened: date_opened, defaults to None
        :type date_opened: str, optional
        :param date_expected: date_expected, defaults to None
        :type date_expected: str, optional
        :param date_closed: date_closed, defaults to None
        :type date_closed: str, optional
        :param probability: probability, defaults to None
        :type probability: int, optional
        :param commission: commission, defaults to None
        :type commission: float, optional
        :param reason: reason, defaults to None
        :type reason: str, optional
        :param investment: investment, defaults to None
        :type investment: bool, optional
        :param inhouselisting: inhouselisting, defaults to None
        :type inhouselisting: bool, optional
        :param inhouserepresentation: inhouserepresentation, defaults to None
        :type inhouserepresentation: bool, optional
        :param commissionpercentage: commissionpercentage, defaults to None
        :type commissionpercentage: float, optional
        :param flatfee: flatfee, defaults to None
        :type flatfee: float, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[str], optional
        """
        if user_key is not None:
            self.user_key = self._define_str("user_key", user_key, nullable=True)
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if project_name is not None:
            self.project_name = self._define_str(
                "project_name", project_name, nullable=True
            )
        if project_type is not None:
            self.project_type = self._define_str(
                "project_type", project_type, nullable=True
            )
        if project_status is not None:
            self.project_status = self._define_str(
                "project_status", project_status, nullable=True
            )
        if project_result is not None:
            self.project_result = self._define_str(
                "project_result", project_result, nullable=True
            )
        if client_key is not None:
            self.client_key = self._define_str("client_key", client_key, nullable=True)
        if counter_party_client_key is not None:
            self.counter_party_client_key = self._define_str(
                "counter_party_client_key", counter_party_client_key, nullable=True
            )
        if listing_key is not None:
            self.listing_key = self._define_str(
                "listing_key", listing_key, nullable=True
            )
        if size is not None:
            self.size = self._define_number("size", size, nullable=True)
        if amount is not None:
            self.amount = self._define_number("amount", amount, nullable=True)
        if date_opened is not None:
            self.date_opened = self._define_str(
                "date_opened", date_opened, nullable=True
            )
        if date_expected is not None:
            self.date_expected = self._define_str(
                "date_expected", date_expected, nullable=True
            )
        if date_closed is not None:
            self.date_closed = self._define_str(
                "date_closed", date_closed, nullable=True
            )
        if probability is not None:
            self.probability = self._define_number(
                "probability", probability, nullable=True
            )
        if commission is not None:
            self.commission = self._define_number(
                "commission", commission, nullable=True
            )
        if reason is not None:
            self.reason = self._define_str("reason", reason, nullable=True)
        if investment is not None:
            self.investment = investment
        if inhouselisting is not None:
            self.inhouselisting = inhouselisting
        if inhouserepresentation is not None:
            self.inhouserepresentation = inhouserepresentation
        if commissionpercentage is not None:
            self.commissionpercentage = self._define_number(
                "commissionpercentage", commissionpercentage, nullable=True
            )
        if flatfee is not None:
            self.flatfee = self._define_number("flatfee", flatfee, nullable=True)
        if object_groups is not None:
            self.object_groups = object_groups
        self._kwargs = kwargs
