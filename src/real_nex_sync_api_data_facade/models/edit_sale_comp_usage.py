# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {
        "building_status": "buildingStatus",
        "year_built": "yearBuilt",
        "year_renovated": "yearRenovated",
        "usable_sqft": "usableSqft",
        "vacant_sqft": "vacantSqft",
        "load_factor": "loadFactor",
        "office_sqft": "officeSqft",
        "grade_doors": "gradeDoors",
        "dock_doors": "dockDoors",
        "truck_doors": "truckDoors",
        "clear_height": "clearHeight",
        "rail_service": "railService",
        "lot_size": "lotSize",
        "percent_improved": "percentImproved",
        "major_tenants": "majorTenants",
        "traffic_count": "trafficCount",
        "median_income": "medianIncome",
        "net_acres": "netAcres",
        "land_status": "landStatus",
        "general_use": "generalUse",
        "legal_description": "legalDescription",
        "core_factor": "coreFactor",
        "parking_ratio": "parkingRatio",
        "parking_fees": "parkingFees",
        "parking_spaces": "parkingSpaces",
        "on_market": "onMarket",
        "off_market": "offMarket",
        "days_on_market": "daysOnMarket",
        "fa_property_id": "faPropertyId",
        "fa_doc_number": "faDocNumber",
        "census_tract": "censusTract",
        "census_block": "censusBlock",
        "year_assessed": "yearAssessed",
        "parking_surface_type": "parkingSurfaceType",
        "parking_spaces_reserved": "parkingSpacesReserved",
        "parking_spaces_unreserved": "parkingSpacesUnreserved",
        "living_sqft": "livingSqft",
        "building_quality": "buildingQuality",
        "roof_material": "roofMaterial",
        "water_provider": "waterProvider",
        "water_service": "waterService",
        "water_location": "waterLocation",
        "rentable_sqft": "rentableSqft",
        "lot_depth": "lotDepth",
        "ext_walls": "extWalls",
        "sewer_provider": "sewerProvider",
        "sewer_location": "sewerLocation",
        "gas_provider": "gasProvider",
        "electric_provider": "electricProvider",
        "electric_location": "electricLocation",
        "voltage_low": "voltageLow",
        "voltage_high": "voltageHigh",
        "drive_in_size": "driveInSize",
        "drive_in": "driveIn",
        "clearance_min": "clearanceMin",
        "clearance_max": "clearanceMax",
        "prior_use": "priorUse",
        "market_year": "marketYear",
        "industrial_sqft": "industrialSqft",
        "retail_sqft": "retailSqft",
        "min_divis": "minDivis",
        "max_divis": "maxDivis",
        "primary_use": "primaryUse",
        "secondary_use": "secondaryUse",
        "construction_status": "constructionStatus",
        "date_built": "dateBuilt",
        "multi_tenant": "multiTenant",
        "spec_bts": "specBts",
        "roof_type": "roofType",
        "roof_age": "roofAge",
        "ceiling_height_min": "ceilingHeightMin",
        "ceiling_height_max": "ceilingHeightMax",
        "bay_column_width": "bayColumnWidth",
        "bay_column_depth": "bayColumnDepth",
        "int_docks": "intDocks",
        "int_levelers": "intLevelers",
        "ext_docks": "extDocks",
        "ext_levelers": "extLevelers",
        "gl_did": "glDid",
        "gl_did_dimensions": "glDidDimensions",
        "cross_docked": "crossDocked",
        "dh_truck_doors": "dhTruckDoors",
        "trailer_spots": "trailerSpots",
        "rail_doors": "railDoors",
        "total_doors": "totalDoors",
        "loading_door_comments": "loadingDoorComments",
        "rail_status": "railStatus",
        "ex_spots": "exSpots",
        "int_spots": "intSpots",
        "rail_line": "railLine",
        "rail_comments": "railComments",
        "crane_capacity_min": "craneCapacityMin",
        "crane_capacity_max": "craneCapacityMax",
        "hook_height": "hookHeight",
        "crane_comments": "craneComments",
        "freezer_sqft": "freezerSqft",
        "freezer_comments": "freezerComments",
        "cooler_sqft": "coolerSqft",
        "cooler_comments": "coolerComments",
        "covered_spaces": "coveredSpaces",
        "comments_public": "commentsPublic",
        "comments_restricted": "commentsRestricted",
        "max_contig_land_sf": "maxContigLandSf",
        "max_contig_land_ac": "maxContigLandAc",
        "land_zoning": "landZoning",
        "additional_site_information": "additionalSiteInformation",
        "business_park": "businessPark",
        "overhead_cranes": "overheadCranes",
        "clear_height_max": "clearHeightMax",
        "clear_height_min": "clearHeightMin",
        "dock_levelers_capacity": "dockLevelersCapacity",
        "estimated_hold_period": "estimatedHoldPeriod",
        "estimated_sale_date": "estimatedSaleDate",
        "fa_trans_id": "faTransId",
        "floor_thickness": "floorThickness",
        "location_overview": "locationOverview",
        "overhead_crane_size": "overheadCraneSize",
        "property_overview": "propertyOverview",
        "warehouse_sf": "warehouseSf",
        "floor_type": "floorType",
        "surface_type": "surfaceType",
        "cranes_clearance": "cranesClearance",
        "property_subtype": "propertySubtype",
        "property_description": "propertyDescription",
    }
)
class EditSaleCompUsage(BaseModel):
    """EditSaleCompUsage

    :param building_status: building_status, defaults to None
    :type building_status: str, optional
    :param year_built: year_built, defaults to None
    :type year_built: int, optional
    :param year_renovated: year_renovated, defaults to None
    :type year_renovated: int, optional
    :param usable_sqft: usable_sqft, defaults to None
    :type usable_sqft: float, optional
    :param vacant_sqft: vacant_sqft, defaults to None
    :type vacant_sqft: float, optional
    :param load_factor: load_factor, defaults to None
    :type load_factor: float, optional
    :param office_sqft: office_sqft, defaults to None
    :type office_sqft: float, optional
    :param condition: condition, defaults to None
    :type condition: str, optional
    :param tenants: tenants, defaults to None
    :type tenants: int, optional
    :param grade_doors: grade_doors, defaults to None
    :type grade_doors: str, optional
    :param dock_doors: dock_doors, defaults to None
    :type dock_doors: str, optional
    :param truck_doors: truck_doors, defaults to None
    :type truck_doors: str, optional
    :param power: power, defaults to None
    :type power: str, optional
    :param clear_height: clear_height, defaults to None
    :type clear_height: str, optional
    :param rail_service: rail_service, defaults to None
    :type rail_service: str, optional
    :param yard: yard, defaults to None
    :type yard: str, optional
    :param lot_size: lot_size, defaults to None
    :type lot_size: float, optional
    :param percent_improved: percent_improved, defaults to None
    :type percent_improved: float, optional
    :param exclusions: exclusions, defaults to None
    :type exclusions: str, optional
    :param major_tenants: major_tenants, defaults to None
    :type major_tenants: str, optional
    :param highlights: highlights, defaults to None
    :type highlights: str, optional
    :param anchors: anchors, defaults to None
    :type anchors: str, optional
    :param demographics: demographics, defaults to None
    :type demographics: str, optional
    :param traffic_count: traffic_count, defaults to None
    :type traffic_count: str, optional
    :param signage: signage, defaults to None
    :type signage: str, optional
    :param extras: extras, defaults to None
    :type extras: str, optional
    :param population: population, defaults to None
    :type population: int, optional
    :param median_income: median_income, defaults to None
    :type median_income: int, optional
    :param floors: floors, defaults to None
    :type floors: int, optional
    :param elevators: elevators, defaults to None
    :type elevators: int, optional
    :param hvac: hvac, defaults to None
    :type hvac: str, optional
    :param security: security, defaults to None
    :type security: str, optional
    :param sprinklers: sprinklers, defaults to None
    :type sprinklers: str, optional
    :param views: views, defaults to None
    :type views: str, optional
    :param net_acres: net_acres, defaults to None
    :type net_acres: float, optional
    :param land_status: land_status, defaults to None
    :type land_status: str, optional
    :param general_use: general_use, defaults to None
    :type general_use: str, optional
    :param legal_description: legal_description, defaults to None
    :type legal_description: str, optional
    :param topography: topography, defaults to None
    :type topography: str, optional
    :param dimensions: dimensions, defaults to None
    :type dimensions: str, optional
    :param electric: electric, defaults to None
    :type electric: str, optional
    :param gas: gas, defaults to None
    :type gas: str, optional
    :param sewers: sewers, defaults to None
    :type sewers: str, optional
    :param phones: phones, defaults to None
    :type phones: str, optional
    :param core_factor: core_factor, defaults to None
    :type core_factor: float, optional
    :param parking: parking, defaults to None
    :type parking: str, optional
    :param parking_ratio: parking_ratio, defaults to None
    :type parking_ratio: str, optional
    :param parking_fees: parking_fees, defaults to None
    :type parking_fees: str, optional
    :param parking_spaces: parking_spaces, defaults to None
    :type parking_spaces: int, optional
    :param on_market: on_market, defaults to None
    :type on_market: str, optional
    :param off_market: off_market, defaults to None
    :type off_market: str, optional
    :param days_on_market: days_on_market, defaults to None
    :type days_on_market: int, optional
    :param fips: fips, defaults to None
    :type fips: str, optional
    :param fa_property_id: fa_property_id, defaults to None
    :type fa_property_id: str, optional
    :param fa_doc_number: fa_doc_number, defaults to None
    :type fa_doc_number: str, optional
    :param census_tract: census_tract, defaults to None
    :type census_tract: str, optional
    :param census_block: census_block, defaults to None
    :type census_block: str, optional
    :param year_assessed: year_assessed, defaults to None
    :type year_assessed: int, optional
    :param block: block, defaults to None
    :type block: str, optional
    :param reo: reo, defaults to None
    :type reo: str, optional
    :param subdivision: subdivision, defaults to None
    :type subdivision: str, optional
    :param parking_surface_type: parking_surface_type, defaults to None
    :type parking_surface_type: str, optional
    :param parking_spaces_reserved: parking_spaces_reserved, defaults to None
    :type parking_spaces_reserved: int, optional
    :param parking_spaces_unreserved: parking_spaces_unreserved, defaults to None
    :type parking_spaces_unreserved: int, optional
    :param living_sqft: living_sqft, defaults to None
    :type living_sqft: float, optional
    :param building_quality: building_quality, defaults to None
    :type building_quality: str, optional
    :param roof_material: roof_material, defaults to None
    :type roof_material: str, optional
    :param water_provider: water_provider, defaults to None
    :type water_provider: str, optional
    :param water_service: water_service, defaults to None
    :type water_service: str, optional
    :param water_location: water_location, defaults to None
    :type water_location: str, optional
    :param rentable_sqft: rentable_sqft, defaults to None
    :type rentable_sqft: float, optional
    :param lot_depth: lot_depth, defaults to None
    :type lot_depth: float, optional
    :param ext_walls: ext_walls, defaults to None
    :type ext_walls: str, optional
    :param style: style, defaults to None
    :type style: str, optional
    :param sewer_provider: sewer_provider, defaults to None
    :type sewer_provider: str, optional
    :param sewer_location: sewer_location, defaults to None
    :type sewer_location: str, optional
    :param gas_provider: gas_provider, defaults to None
    :type gas_provider: str, optional
    :param electric_provider: electric_provider, defaults to None
    :type electric_provider: str, optional
    :param electric_location: electric_location, defaults to None
    :type electric_location: str, optional
    :param voltage_low: voltage_low, defaults to None
    :type voltage_low: int, optional
    :param voltage_high: voltage_high, defaults to None
    :type voltage_high: int, optional
    :param drive_in_size: drive_in_size, defaults to None
    :type drive_in_size: str, optional
    :param drive_in: drive_in, defaults to None
    :type drive_in: int, optional
    :param clearance_min: clearance_min, defaults to None
    :type clearance_min: float, optional
    :param clearance_max: clearance_max, defaults to None
    :type clearance_max: float, optional
    :param prior_use: prior_use, defaults to None
    :type prior_use: str, optional
    :param interstate: interstate, defaults to None
    :type interstate: str, optional
    :param barge: barge, defaults to None
    :type barge: str, optional
    :param airport: airport, defaults to None
    :type airport: str, optional
    :param market_year: market_year, defaults to None
    :type market_year: int, optional
    :param foreclosed: foreclosed, defaults to None
    :type foreclosed: bool, optional
    :param industrial_sqft: industrial_sqft, defaults to None
    :type industrial_sqft: float, optional
    :param retail_sqft: retail_sqft, defaults to None
    :type retail_sqft: float, optional
    :param min_divis: min_divis, defaults to None
    :type min_divis: float, optional
    :param max_divis: max_divis, defaults to None
    :type max_divis: float, optional
    :param primary_use: primary_use, defaults to None
    :type primary_use: str, optional
    :param secondary_use: secondary_use, defaults to None
    :type secondary_use: str, optional
    :param construction_status: construction_status, defaults to None
    :type construction_status: str, optional
    :param date_built: date_built, defaults to None
    :type date_built: str, optional
    :param occupancy: occupancy, defaults to None
    :type occupancy: float, optional
    :param multi_tenant: multi_tenant, defaults to None
    :type multi_tenant: str, optional
    :param spec_bts: spec_bts, defaults to None
    :type spec_bts: str, optional
    :param roof_type: roof_type, defaults to None
    :type roof_type: str, optional
    :param roof_age: roof_age, defaults to None
    :type roof_age: int, optional
    :param heat: heat, defaults to None
    :type heat: str, optional
    :param ac: ac, defaults to None
    :type ac: str, optional
    :param lighting: lighting, defaults to None
    :type lighting: str, optional
    :param ceiling_height_min: ceiling_height_min, defaults to None
    :type ceiling_height_min: float, optional
    :param ceiling_height_max: ceiling_height_max, defaults to None
    :type ceiling_height_max: float, optional
    :param bay_column_width: bay_column_width, defaults to None
    :type bay_column_width: float, optional
    :param bay_column_depth: bay_column_depth, defaults to None
    :type bay_column_depth: float, optional
    :param int_docks: int_docks, defaults to None
    :type int_docks: int, optional
    :param int_levelers: int_levelers, defaults to None
    :type int_levelers: int, optional
    :param ext_docks: ext_docks, defaults to None
    :type ext_docks: int, optional
    :param ext_levelers: ext_levelers, defaults to None
    :type ext_levelers: int, optional
    :param gl_did: gl_did, defaults to None
    :type gl_did: int, optional
    :param gl_did_dimensions: gl_did_dimensions, defaults to None
    :type gl_did_dimensions: str, optional
    :param cross_docked: cross_docked, defaults to None
    :type cross_docked: str, optional
    :param dh_truck_doors: dh_truck_doors, defaults to None
    :type dh_truck_doors: int, optional
    :param trailer_spots: trailer_spots, defaults to None
    :type trailer_spots: int, optional
    :param rail_doors: rail_doors, defaults to None
    :type rail_doors: int, optional
    :param total_doors: total_doors, defaults to None
    :type total_doors: int, optional
    :param loading_door_comments: loading_door_comments, defaults to None
    :type loading_door_comments: str, optional
    :param rail_status: rail_status, defaults to None
    :type rail_status: str, optional
    :param ex_spots: ex_spots, defaults to None
    :type ex_spots: int, optional
    :param int_spots: int_spots, defaults to None
    :type int_spots: int, optional
    :param rail_line: rail_line, defaults to None
    :type rail_line: str, optional
    :param rail_comments: rail_comments, defaults to None
    :type rail_comments: str, optional
    :param cranes: cranes, defaults to None
    :type cranes: int, optional
    :param crane_capacity_min: crane_capacity_min, defaults to None
    :type crane_capacity_min: int, optional
    :param crane_capacity_max: crane_capacity_max, defaults to None
    :type crane_capacity_max: int, optional
    :param hook_height: hook_height, defaults to None
    :type hook_height: int, optional
    :param clearance: clearance, defaults to None
    :type clearance: int, optional
    :param crane_comments: crane_comments, defaults to None
    :type crane_comments: str, optional
    :param freezer_sqft: freezer_sqft, defaults to None
    :type freezer_sqft: float, optional
    :param freezer_comments: freezer_comments, defaults to None
    :type freezer_comments: str, optional
    :param cooler_sqft: cooler_sqft, defaults to None
    :type cooler_sqft: float, optional
    :param cooler_comments: cooler_comments, defaults to None
    :type cooler_comments: str, optional
    :param covered_spaces: covered_spaces, defaults to None
    :type covered_spaces: int, optional
    :param comments_public: comments_public, defaults to None
    :type comments_public: str, optional
    :param comments_restricted: comments_restricted, defaults to None
    :type comments_restricted: str, optional
    :param max_contig_land_sf: max_contig_land_sf, defaults to None
    :type max_contig_land_sf: float, optional
    :param max_contig_land_ac: max_contig_land_ac, defaults to None
    :type max_contig_land_ac: float, optional
    :param land_zoning: land_zoning, defaults to None
    :type land_zoning: str, optional
    :param additional_site_information: additional_site_information, defaults to None
    :type additional_site_information: str, optional
    :param business_park: business_park, defaults to None
    :type business_park: str, optional
    :param amps: amps, defaults to None
    :type amps: int, optional
    :param phase: phase, defaults to None
    :type phase: int, optional
    :param overhead_cranes: overhead_cranes, defaults to None
    :type overhead_cranes: int, optional
    :param clear_height_max: clear_height_max, defaults to None
    :type clear_height_max: float, optional
    :param clear_height_min: clear_height_min, defaults to None
    :type clear_height_min: float, optional
    :param complex: complex, defaults to None
    :type complex: str, optional
    :param dock_levelers_capacity: dock_levelers_capacity, defaults to None
    :type dock_levelers_capacity: int, optional
    :param estimated_hold_period: estimated_hold_period, defaults to None
    :type estimated_hold_period: int, optional
    :param estimated_sale_date: estimated_sale_date, defaults to None
    :type estimated_sale_date: str, optional
    :param fa_trans_id: fa_trans_id, defaults to None
    :type fa_trans_id: int, optional
    :param floor_thickness: floor_thickness, defaults to None
    :type floor_thickness: int, optional
    :param frontage: frontage, defaults to None
    :type frontage: str, optional
    :param location_overview: location_overview, defaults to None
    :type location_overview: str, optional
    :param overhead_crane_size: overhead_crane_size, defaults to None
    :type overhead_crane_size: int, optional
    :param property_overview: property_overview, defaults to None
    :type property_overview: str, optional
    :param warehouse_sf: warehouse_sf, defaults to None
    :type warehouse_sf: float, optional
    :param floor_type: floor_type, defaults to None
    :type floor_type: str, optional
    :param surface_type: surface_type, defaults to None
    :type surface_type: str, optional
    :param cranes_clearance: cranes_clearance, defaults to None
    :type cranes_clearance: int, optional
    :param property_subtype: property_subtype, defaults to None
    :type property_subtype: str, optional
    :param tenancy: tenancy, defaults to None
    :type tenancy: str, optional
    :param property_description: property_description, defaults to None
    :type property_description: str, optional
    """

    def __init__(
        self,
        building_status: str = None,
        year_built: int = None,
        year_renovated: int = None,
        usable_sqft: float = None,
        vacant_sqft: float = None,
        load_factor: float = None,
        office_sqft: float = None,
        condition: str = None,
        tenants: int = None,
        grade_doors: str = None,
        dock_doors: str = None,
        truck_doors: str = None,
        power: str = None,
        clear_height: str = None,
        rail_service: str = None,
        yard: str = None,
        lot_size: float = None,
        percent_improved: float = None,
        exclusions: str = None,
        major_tenants: str = None,
        highlights: str = None,
        anchors: str = None,
        demographics: str = None,
        traffic_count: str = None,
        signage: str = None,
        extras: str = None,
        population: int = None,
        median_income: int = None,
        floors: int = None,
        elevators: int = None,
        hvac: str = None,
        security: str = None,
        sprinklers: str = None,
        views: str = None,
        net_acres: float = None,
        land_status: str = None,
        general_use: str = None,
        legal_description: str = None,
        topography: str = None,
        dimensions: str = None,
        electric: str = None,
        gas: str = None,
        sewers: str = None,
        phones: str = None,
        core_factor: float = None,
        parking: str = None,
        parking_ratio: str = None,
        parking_fees: str = None,
        parking_spaces: int = None,
        on_market: str = None,
        off_market: str = None,
        days_on_market: int = None,
        fips: str = None,
        fa_property_id: str = None,
        fa_doc_number: str = None,
        census_tract: str = None,
        census_block: str = None,
        year_assessed: int = None,
        block: str = None,
        reo: str = None,
        subdivision: str = None,
        parking_surface_type: str = None,
        parking_spaces_reserved: int = None,
        parking_spaces_unreserved: int = None,
        living_sqft: float = None,
        building_quality: str = None,
        roof_material: str = None,
        water_provider: str = None,
        water_service: str = None,
        water_location: str = None,
        rentable_sqft: float = None,
        lot_depth: float = None,
        ext_walls: str = None,
        style: str = None,
        sewer_provider: str = None,
        sewer_location: str = None,
        gas_provider: str = None,
        electric_provider: str = None,
        electric_location: str = None,
        voltage_low: int = None,
        voltage_high: int = None,
        drive_in_size: str = None,
        drive_in: int = None,
        clearance_min: float = None,
        clearance_max: float = None,
        prior_use: str = None,
        interstate: str = None,
        barge: str = None,
        airport: str = None,
        market_year: int = None,
        foreclosed: bool = None,
        industrial_sqft: float = None,
        retail_sqft: float = None,
        min_divis: float = None,
        max_divis: float = None,
        primary_use: str = None,
        secondary_use: str = None,
        construction_status: str = None,
        date_built: str = None,
        occupancy: float = None,
        multi_tenant: str = None,
        spec_bts: str = None,
        roof_type: str = None,
        roof_age: int = None,
        heat: str = None,
        ac: str = None,
        lighting: str = None,
        ceiling_height_min: float = None,
        ceiling_height_max: float = None,
        bay_column_width: float = None,
        bay_column_depth: float = None,
        int_docks: int = None,
        int_levelers: int = None,
        ext_docks: int = None,
        ext_levelers: int = None,
        gl_did: int = None,
        gl_did_dimensions: str = None,
        cross_docked: str = None,
        dh_truck_doors: int = None,
        trailer_spots: int = None,
        rail_doors: int = None,
        total_doors: int = None,
        loading_door_comments: str = None,
        rail_status: str = None,
        ex_spots: int = None,
        int_spots: int = None,
        rail_line: str = None,
        rail_comments: str = None,
        cranes: int = None,
        crane_capacity_min: int = None,
        crane_capacity_max: int = None,
        hook_height: int = None,
        clearance: int = None,
        crane_comments: str = None,
        freezer_sqft: float = None,
        freezer_comments: str = None,
        cooler_sqft: float = None,
        cooler_comments: str = None,
        covered_spaces: int = None,
        comments_public: str = None,
        comments_restricted: str = None,
        max_contig_land_sf: float = None,
        max_contig_land_ac: float = None,
        land_zoning: str = None,
        additional_site_information: str = None,
        business_park: str = None,
        amps: int = None,
        phase: int = None,
        overhead_cranes: int = None,
        clear_height_max: float = None,
        clear_height_min: float = None,
        complex: str = None,
        dock_levelers_capacity: int = None,
        estimated_hold_period: int = None,
        estimated_sale_date: str = None,
        fa_trans_id: int = None,
        floor_thickness: int = None,
        frontage: str = None,
        location_overview: str = None,
        overhead_crane_size: int = None,
        property_overview: str = None,
        warehouse_sf: float = None,
        floor_type: str = None,
        surface_type: str = None,
        cranes_clearance: int = None,
        property_subtype: str = None,
        tenancy: str = None,
        property_description: str = None,
        **kwargs
    ):
        """EditSaleCompUsage

        :param building_status: building_status, defaults to None
        :type building_status: str, optional
        :param year_built: year_built, defaults to None
        :type year_built: int, optional
        :param year_renovated: year_renovated, defaults to None
        :type year_renovated: int, optional
        :param usable_sqft: usable_sqft, defaults to None
        :type usable_sqft: float, optional
        :param vacant_sqft: vacant_sqft, defaults to None
        :type vacant_sqft: float, optional
        :param load_factor: load_factor, defaults to None
        :type load_factor: float, optional
        :param office_sqft: office_sqft, defaults to None
        :type office_sqft: float, optional
        :param condition: condition, defaults to None
        :type condition: str, optional
        :param tenants: tenants, defaults to None
        :type tenants: int, optional
        :param grade_doors: grade_doors, defaults to None
        :type grade_doors: str, optional
        :param dock_doors: dock_doors, defaults to None
        :type dock_doors: str, optional
        :param truck_doors: truck_doors, defaults to None
        :type truck_doors: str, optional
        :param power: power, defaults to None
        :type power: str, optional
        :param clear_height: clear_height, defaults to None
        :type clear_height: str, optional
        :param rail_service: rail_service, defaults to None
        :type rail_service: str, optional
        :param yard: yard, defaults to None
        :type yard: str, optional
        :param lot_size: lot_size, defaults to None
        :type lot_size: float, optional
        :param percent_improved: percent_improved, defaults to None
        :type percent_improved: float, optional
        :param exclusions: exclusions, defaults to None
        :type exclusions: str, optional
        :param major_tenants: major_tenants, defaults to None
        :type major_tenants: str, optional
        :param highlights: highlights, defaults to None
        :type highlights: str, optional
        :param anchors: anchors, defaults to None
        :type anchors: str, optional
        :param demographics: demographics, defaults to None
        :type demographics: str, optional
        :param traffic_count: traffic_count, defaults to None
        :type traffic_count: str, optional
        :param signage: signage, defaults to None
        :type signage: str, optional
        :param extras: extras, defaults to None
        :type extras: str, optional
        :param population: population, defaults to None
        :type population: int, optional
        :param median_income: median_income, defaults to None
        :type median_income: int, optional
        :param floors: floors, defaults to None
        :type floors: int, optional
        :param elevators: elevators, defaults to None
        :type elevators: int, optional
        :param hvac: hvac, defaults to None
        :type hvac: str, optional
        :param security: security, defaults to None
        :type security: str, optional
        :param sprinklers: sprinklers, defaults to None
        :type sprinklers: str, optional
        :param views: views, defaults to None
        :type views: str, optional
        :param net_acres: net_acres, defaults to None
        :type net_acres: float, optional
        :param land_status: land_status, defaults to None
        :type land_status: str, optional
        :param general_use: general_use, defaults to None
        :type general_use: str, optional
        :param legal_description: legal_description, defaults to None
        :type legal_description: str, optional
        :param topography: topography, defaults to None
        :type topography: str, optional
        :param dimensions: dimensions, defaults to None
        :type dimensions: str, optional
        :param electric: electric, defaults to None
        :type electric: str, optional
        :param gas: gas, defaults to None
        :type gas: str, optional
        :param sewers: sewers, defaults to None
        :type sewers: str, optional
        :param phones: phones, defaults to None
        :type phones: str, optional
        :param core_factor: core_factor, defaults to None
        :type core_factor: float, optional
        :param parking: parking, defaults to None
        :type parking: str, optional
        :param parking_ratio: parking_ratio, defaults to None
        :type parking_ratio: str, optional
        :param parking_fees: parking_fees, defaults to None
        :type parking_fees: str, optional
        :param parking_spaces: parking_spaces, defaults to None
        :type parking_spaces: int, optional
        :param on_market: on_market, defaults to None
        :type on_market: str, optional
        :param off_market: off_market, defaults to None
        :type off_market: str, optional
        :param days_on_market: days_on_market, defaults to None
        :type days_on_market: int, optional
        :param fips: fips, defaults to None
        :type fips: str, optional
        :param fa_property_id: fa_property_id, defaults to None
        :type fa_property_id: str, optional
        :param fa_doc_number: fa_doc_number, defaults to None
        :type fa_doc_number: str, optional
        :param census_tract: census_tract, defaults to None
        :type census_tract: str, optional
        :param census_block: census_block, defaults to None
        :type census_block: str, optional
        :param year_assessed: year_assessed, defaults to None
        :type year_assessed: int, optional
        :param block: block, defaults to None
        :type block: str, optional
        :param reo: reo, defaults to None
        :type reo: str, optional
        :param subdivision: subdivision, defaults to None
        :type subdivision: str, optional
        :param parking_surface_type: parking_surface_type, defaults to None
        :type parking_surface_type: str, optional
        :param parking_spaces_reserved: parking_spaces_reserved, defaults to None
        :type parking_spaces_reserved: int, optional
        :param parking_spaces_unreserved: parking_spaces_unreserved, defaults to None
        :type parking_spaces_unreserved: int, optional
        :param living_sqft: living_sqft, defaults to None
        :type living_sqft: float, optional
        :param building_quality: building_quality, defaults to None
        :type building_quality: str, optional
        :param roof_material: roof_material, defaults to None
        :type roof_material: str, optional
        :param water_provider: water_provider, defaults to None
        :type water_provider: str, optional
        :param water_service: water_service, defaults to None
        :type water_service: str, optional
        :param water_location: water_location, defaults to None
        :type water_location: str, optional
        :param rentable_sqft: rentable_sqft, defaults to None
        :type rentable_sqft: float, optional
        :param lot_depth: lot_depth, defaults to None
        :type lot_depth: float, optional
        :param ext_walls: ext_walls, defaults to None
        :type ext_walls: str, optional
        :param style: style, defaults to None
        :type style: str, optional
        :param sewer_provider: sewer_provider, defaults to None
        :type sewer_provider: str, optional
        :param sewer_location: sewer_location, defaults to None
        :type sewer_location: str, optional
        :param gas_provider: gas_provider, defaults to None
        :type gas_provider: str, optional
        :param electric_provider: electric_provider, defaults to None
        :type electric_provider: str, optional
        :param electric_location: electric_location, defaults to None
        :type electric_location: str, optional
        :param voltage_low: voltage_low, defaults to None
        :type voltage_low: int, optional
        :param voltage_high: voltage_high, defaults to None
        :type voltage_high: int, optional
        :param drive_in_size: drive_in_size, defaults to None
        :type drive_in_size: str, optional
        :param drive_in: drive_in, defaults to None
        :type drive_in: int, optional
        :param clearance_min: clearance_min, defaults to None
        :type clearance_min: float, optional
        :param clearance_max: clearance_max, defaults to None
        :type clearance_max: float, optional
        :param prior_use: prior_use, defaults to None
        :type prior_use: str, optional
        :param interstate: interstate, defaults to None
        :type interstate: str, optional
        :param barge: barge, defaults to None
        :type barge: str, optional
        :param airport: airport, defaults to None
        :type airport: str, optional
        :param market_year: market_year, defaults to None
        :type market_year: int, optional
        :param foreclosed: foreclosed, defaults to None
        :type foreclosed: bool, optional
        :param industrial_sqft: industrial_sqft, defaults to None
        :type industrial_sqft: float, optional
        :param retail_sqft: retail_sqft, defaults to None
        :type retail_sqft: float, optional
        :param min_divis: min_divis, defaults to None
        :type min_divis: float, optional
        :param max_divis: max_divis, defaults to None
        :type max_divis: float, optional
        :param primary_use: primary_use, defaults to None
        :type primary_use: str, optional
        :param secondary_use: secondary_use, defaults to None
        :type secondary_use: str, optional
        :param construction_status: construction_status, defaults to None
        :type construction_status: str, optional
        :param date_built: date_built, defaults to None
        :type date_built: str, optional
        :param occupancy: occupancy, defaults to None
        :type occupancy: float, optional
        :param multi_tenant: multi_tenant, defaults to None
        :type multi_tenant: str, optional
        :param spec_bts: spec_bts, defaults to None
        :type spec_bts: str, optional
        :param roof_type: roof_type, defaults to None
        :type roof_type: str, optional
        :param roof_age: roof_age, defaults to None
        :type roof_age: int, optional
        :param heat: heat, defaults to None
        :type heat: str, optional
        :param ac: ac, defaults to None
        :type ac: str, optional
        :param lighting: lighting, defaults to None
        :type lighting: str, optional
        :param ceiling_height_min: ceiling_height_min, defaults to None
        :type ceiling_height_min: float, optional
        :param ceiling_height_max: ceiling_height_max, defaults to None
        :type ceiling_height_max: float, optional
        :param bay_column_width: bay_column_width, defaults to None
        :type bay_column_width: float, optional
        :param bay_column_depth: bay_column_depth, defaults to None
        :type bay_column_depth: float, optional
        :param int_docks: int_docks, defaults to None
        :type int_docks: int, optional
        :param int_levelers: int_levelers, defaults to None
        :type int_levelers: int, optional
        :param ext_docks: ext_docks, defaults to None
        :type ext_docks: int, optional
        :param ext_levelers: ext_levelers, defaults to None
        :type ext_levelers: int, optional
        :param gl_did: gl_did, defaults to None
        :type gl_did: int, optional
        :param gl_did_dimensions: gl_did_dimensions, defaults to None
        :type gl_did_dimensions: str, optional
        :param cross_docked: cross_docked, defaults to None
        :type cross_docked: str, optional
        :param dh_truck_doors: dh_truck_doors, defaults to None
        :type dh_truck_doors: int, optional
        :param trailer_spots: trailer_spots, defaults to None
        :type trailer_spots: int, optional
        :param rail_doors: rail_doors, defaults to None
        :type rail_doors: int, optional
        :param total_doors: total_doors, defaults to None
        :type total_doors: int, optional
        :param loading_door_comments: loading_door_comments, defaults to None
        :type loading_door_comments: str, optional
        :param rail_status: rail_status, defaults to None
        :type rail_status: str, optional
        :param ex_spots: ex_spots, defaults to None
        :type ex_spots: int, optional
        :param int_spots: int_spots, defaults to None
        :type int_spots: int, optional
        :param rail_line: rail_line, defaults to None
        :type rail_line: str, optional
        :param rail_comments: rail_comments, defaults to None
        :type rail_comments: str, optional
        :param cranes: cranes, defaults to None
        :type cranes: int, optional
        :param crane_capacity_min: crane_capacity_min, defaults to None
        :type crane_capacity_min: int, optional
        :param crane_capacity_max: crane_capacity_max, defaults to None
        :type crane_capacity_max: int, optional
        :param hook_height: hook_height, defaults to None
        :type hook_height: int, optional
        :param clearance: clearance, defaults to None
        :type clearance: int, optional
        :param crane_comments: crane_comments, defaults to None
        :type crane_comments: str, optional
        :param freezer_sqft: freezer_sqft, defaults to None
        :type freezer_sqft: float, optional
        :param freezer_comments: freezer_comments, defaults to None
        :type freezer_comments: str, optional
        :param cooler_sqft: cooler_sqft, defaults to None
        :type cooler_sqft: float, optional
        :param cooler_comments: cooler_comments, defaults to None
        :type cooler_comments: str, optional
        :param covered_spaces: covered_spaces, defaults to None
        :type covered_spaces: int, optional
        :param comments_public: comments_public, defaults to None
        :type comments_public: str, optional
        :param comments_restricted: comments_restricted, defaults to None
        :type comments_restricted: str, optional
        :param max_contig_land_sf: max_contig_land_sf, defaults to None
        :type max_contig_land_sf: float, optional
        :param max_contig_land_ac: max_contig_land_ac, defaults to None
        :type max_contig_land_ac: float, optional
        :param land_zoning: land_zoning, defaults to None
        :type land_zoning: str, optional
        :param additional_site_information: additional_site_information, defaults to None
        :type additional_site_information: str, optional
        :param business_park: business_park, defaults to None
        :type business_park: str, optional
        :param amps: amps, defaults to None
        :type amps: int, optional
        :param phase: phase, defaults to None
        :type phase: int, optional
        :param overhead_cranes: overhead_cranes, defaults to None
        :type overhead_cranes: int, optional
        :param clear_height_max: clear_height_max, defaults to None
        :type clear_height_max: float, optional
        :param clear_height_min: clear_height_min, defaults to None
        :type clear_height_min: float, optional
        :param complex: complex, defaults to None
        :type complex: str, optional
        :param dock_levelers_capacity: dock_levelers_capacity, defaults to None
        :type dock_levelers_capacity: int, optional
        :param estimated_hold_period: estimated_hold_period, defaults to None
        :type estimated_hold_period: int, optional
        :param estimated_sale_date: estimated_sale_date, defaults to None
        :type estimated_sale_date: str, optional
        :param fa_trans_id: fa_trans_id, defaults to None
        :type fa_trans_id: int, optional
        :param floor_thickness: floor_thickness, defaults to None
        :type floor_thickness: int, optional
        :param frontage: frontage, defaults to None
        :type frontage: str, optional
        :param location_overview: location_overview, defaults to None
        :type location_overview: str, optional
        :param overhead_crane_size: overhead_crane_size, defaults to None
        :type overhead_crane_size: int, optional
        :param property_overview: property_overview, defaults to None
        :type property_overview: str, optional
        :param warehouse_sf: warehouse_sf, defaults to None
        :type warehouse_sf: float, optional
        :param floor_type: floor_type, defaults to None
        :type floor_type: str, optional
        :param surface_type: surface_type, defaults to None
        :type surface_type: str, optional
        :param cranes_clearance: cranes_clearance, defaults to None
        :type cranes_clearance: int, optional
        :param property_subtype: property_subtype, defaults to None
        :type property_subtype: str, optional
        :param tenancy: tenancy, defaults to None
        :type tenancy: str, optional
        :param property_description: property_description, defaults to None
        :type property_description: str, optional
        """
        if building_status is not None:
            self.building_status = self._define_str(
                "building_status", building_status, nullable=True
            )
        if year_built is not None:
            self.year_built = self._define_number(
                "year_built", year_built, nullable=True
            )
        if year_renovated is not None:
            self.year_renovated = self._define_number(
                "year_renovated", year_renovated, nullable=True
            )
        if usable_sqft is not None:
            self.usable_sqft = self._define_number(
                "usable_sqft", usable_sqft, nullable=True
            )
        if vacant_sqft is not None:
            self.vacant_sqft = self._define_number(
                "vacant_sqft", vacant_sqft, nullable=True
            )
        if load_factor is not None:
            self.load_factor = self._define_number(
                "load_factor", load_factor, nullable=True
            )
        if office_sqft is not None:
            self.office_sqft = self._define_number(
                "office_sqft", office_sqft, nullable=True
            )
        if condition is not None:
            self.condition = self._define_str("condition", condition, nullable=True)
        if tenants is not None:
            self.tenants = self._define_number("tenants", tenants, nullable=True)
        if grade_doors is not None:
            self.grade_doors = self._define_str(
                "grade_doors", grade_doors, nullable=True
            )
        if dock_doors is not None:
            self.dock_doors = self._define_str("dock_doors", dock_doors, nullable=True)
        if truck_doors is not None:
            self.truck_doors = self._define_str(
                "truck_doors", truck_doors, nullable=True
            )
        if power is not None:
            self.power = self._define_str("power", power, nullable=True)
        if clear_height is not None:
            self.clear_height = self._define_str(
                "clear_height", clear_height, nullable=True
            )
        if rail_service is not None:
            self.rail_service = self._define_str(
                "rail_service", rail_service, nullable=True
            )
        if yard is not None:
            self.yard = self._define_str("yard", yard, nullable=True)
        if lot_size is not None:
            self.lot_size = self._define_number("lot_size", lot_size, nullable=True)
        if percent_improved is not None:
            self.percent_improved = self._define_number(
                "percent_improved", percent_improved, nullable=True
            )
        if exclusions is not None:
            self.exclusions = self._define_str("exclusions", exclusions, nullable=True)
        if major_tenants is not None:
            self.major_tenants = self._define_str(
                "major_tenants", major_tenants, nullable=True
            )
        if highlights is not None:
            self.highlights = self._define_str("highlights", highlights, nullable=True)
        if anchors is not None:
            self.anchors = self._define_str("anchors", anchors, nullable=True)
        if demographics is not None:
            self.demographics = self._define_str(
                "demographics", demographics, nullable=True
            )
        if traffic_count is not None:
            self.traffic_count = self._define_str(
                "traffic_count", traffic_count, nullable=True
            )
        if signage is not None:
            self.signage = self._define_str("signage", signage, nullable=True)
        if extras is not None:
            self.extras = self._define_str("extras", extras, nullable=True)
        if population is not None:
            self.population = self._define_number(
                "population", population, nullable=True
            )
        if median_income is not None:
            self.median_income = self._define_number(
                "median_income", median_income, nullable=True
            )
        if floors is not None:
            self.floors = self._define_number("floors", floors, nullable=True)
        if elevators is not None:
            self.elevators = self._define_number("elevators", elevators, nullable=True)
        if hvac is not None:
            self.hvac = self._define_str("hvac", hvac, nullable=True)
        if security is not None:
            self.security = self._define_str("security", security, nullable=True)
        if sprinklers is not None:
            self.sprinklers = self._define_str("sprinklers", sprinklers, nullable=True)
        if views is not None:
            self.views = self._define_str("views", views, nullable=True)
        if net_acres is not None:
            self.net_acres = self._define_number("net_acres", net_acres, nullable=True)
        if land_status is not None:
            self.land_status = self._define_str(
                "land_status", land_status, nullable=True
            )
        if general_use is not None:
            self.general_use = self._define_str(
                "general_use", general_use, nullable=True
            )
        if legal_description is not None:
            self.legal_description = self._define_str(
                "legal_description", legal_description, nullable=True
            )
        if topography is not None:
            self.topography = self._define_str("topography", topography, nullable=True)
        if dimensions is not None:
            self.dimensions = self._define_str("dimensions", dimensions, nullable=True)
        if electric is not None:
            self.electric = self._define_str("electric", electric, nullable=True)
        if gas is not None:
            self.gas = self._define_str("gas", gas, nullable=True)
        if sewers is not None:
            self.sewers = self._define_str("sewers", sewers, nullable=True)
        if phones is not None:
            self.phones = self._define_str("phones", phones, nullable=True)
        if core_factor is not None:
            self.core_factor = self._define_number(
                "core_factor", core_factor, nullable=True
            )
        if parking is not None:
            self.parking = self._define_str("parking", parking, nullable=True)
        if parking_ratio is not None:
            self.parking_ratio = self._define_str(
                "parking_ratio", parking_ratio, nullable=True
            )
        if parking_fees is not None:
            self.parking_fees = self._define_str(
                "parking_fees", parking_fees, nullable=True
            )
        if parking_spaces is not None:
            self.parking_spaces = self._define_number(
                "parking_spaces", parking_spaces, nullable=True
            )
        if on_market is not None:
            self.on_market = self._define_str("on_market", on_market, nullable=True)
        if off_market is not None:
            self.off_market = self._define_str("off_market", off_market, nullable=True)
        if days_on_market is not None:
            self.days_on_market = self._define_number(
                "days_on_market", days_on_market, nullable=True
            )
        if fips is not None:
            self.fips = self._define_str("fips", fips, nullable=True)
        if fa_property_id is not None:
            self.fa_property_id = self._define_str(
                "fa_property_id", fa_property_id, nullable=True
            )
        if fa_doc_number is not None:
            self.fa_doc_number = self._define_str(
                "fa_doc_number", fa_doc_number, nullable=True
            )
        if census_tract is not None:
            self.census_tract = self._define_str(
                "census_tract", census_tract, nullable=True
            )
        if census_block is not None:
            self.census_block = self._define_str(
                "census_block", census_block, nullable=True
            )
        if year_assessed is not None:
            self.year_assessed = self._define_number(
                "year_assessed", year_assessed, nullable=True
            )
        if block is not None:
            self.block = self._define_str("block", block, nullable=True)
        if reo is not None:
            self.reo = self._define_str("reo", reo, nullable=True)
        if subdivision is not None:
            self.subdivision = self._define_str(
                "subdivision", subdivision, nullable=True
            )
        if parking_surface_type is not None:
            self.parking_surface_type = self._define_str(
                "parking_surface_type", parking_surface_type, nullable=True
            )
        if parking_spaces_reserved is not None:
            self.parking_spaces_reserved = self._define_number(
                "parking_spaces_reserved", parking_spaces_reserved, nullable=True
            )
        if parking_spaces_unreserved is not None:
            self.parking_spaces_unreserved = self._define_number(
                "parking_spaces_unreserved", parking_spaces_unreserved, nullable=True
            )
        if living_sqft is not None:
            self.living_sqft = self._define_number(
                "living_sqft", living_sqft, nullable=True
            )
        if building_quality is not None:
            self.building_quality = self._define_str(
                "building_quality", building_quality, nullable=True
            )
        if roof_material is not None:
            self.roof_material = self._define_str(
                "roof_material", roof_material, nullable=True
            )
        if water_provider is not None:
            self.water_provider = self._define_str(
                "water_provider", water_provider, nullable=True
            )
        if water_service is not None:
            self.water_service = self._define_str(
                "water_service", water_service, nullable=True
            )
        if water_location is not None:
            self.water_location = self._define_str(
                "water_location", water_location, nullable=True
            )
        if rentable_sqft is not None:
            self.rentable_sqft = self._define_number(
                "rentable_sqft", rentable_sqft, nullable=True
            )
        if lot_depth is not None:
            self.lot_depth = self._define_number("lot_depth", lot_depth, nullable=True)
        if ext_walls is not None:
            self.ext_walls = self._define_str("ext_walls", ext_walls, nullable=True)
        if style is not None:
            self.style = self._define_str("style", style, nullable=True)
        if sewer_provider is not None:
            self.sewer_provider = self._define_str(
                "sewer_provider", sewer_provider, nullable=True
            )
        if sewer_location is not None:
            self.sewer_location = self._define_str(
                "sewer_location", sewer_location, nullable=True
            )
        if gas_provider is not None:
            self.gas_provider = self._define_str(
                "gas_provider", gas_provider, nullable=True
            )
        if electric_provider is not None:
            self.electric_provider = self._define_str(
                "electric_provider", electric_provider, nullable=True
            )
        if electric_location is not None:
            self.electric_location = self._define_str(
                "electric_location", electric_location, nullable=True
            )
        if voltage_low is not None:
            self.voltage_low = self._define_number(
                "voltage_low", voltage_low, nullable=True
            )
        if voltage_high is not None:
            self.voltage_high = self._define_number(
                "voltage_high", voltage_high, nullable=True
            )
        if drive_in_size is not None:
            self.drive_in_size = self._define_str(
                "drive_in_size", drive_in_size, nullable=True
            )
        if drive_in is not None:
            self.drive_in = self._define_number("drive_in", drive_in, nullable=True)
        if clearance_min is not None:
            self.clearance_min = self._define_number(
                "clearance_min", clearance_min, nullable=True
            )
        if clearance_max is not None:
            self.clearance_max = self._define_number(
                "clearance_max", clearance_max, nullable=True
            )
        if prior_use is not None:
            self.prior_use = self._define_str("prior_use", prior_use, nullable=True)
        if interstate is not None:
            self.interstate = self._define_str("interstate", interstate, nullable=True)
        if barge is not None:
            self.barge = self._define_str("barge", barge, nullable=True)
        if airport is not None:
            self.airport = self._define_str("airport", airport, nullable=True)
        if market_year is not None:
            self.market_year = self._define_number(
                "market_year", market_year, nullable=True
            )
        if foreclosed is not None:
            self.foreclosed = foreclosed
        if industrial_sqft is not None:
            self.industrial_sqft = self._define_number(
                "industrial_sqft", industrial_sqft, nullable=True
            )
        if retail_sqft is not None:
            self.retail_sqft = self._define_number(
                "retail_sqft", retail_sqft, nullable=True
            )
        if min_divis is not None:
            self.min_divis = self._define_number("min_divis", min_divis, nullable=True)
        if max_divis is not None:
            self.max_divis = self._define_number("max_divis", max_divis, nullable=True)
        if primary_use is not None:
            self.primary_use = self._define_str(
                "primary_use", primary_use, nullable=True
            )
        if secondary_use is not None:
            self.secondary_use = self._define_str(
                "secondary_use", secondary_use, nullable=True
            )
        if construction_status is not None:
            self.construction_status = self._define_str(
                "construction_status", construction_status, nullable=True
            )
        if date_built is not None:
            self.date_built = self._define_str("date_built", date_built, nullable=True)
        if occupancy is not None:
            self.occupancy = self._define_number("occupancy", occupancy, nullable=True)
        if multi_tenant is not None:
            self.multi_tenant = self._define_str(
                "multi_tenant", multi_tenant, nullable=True
            )
        if spec_bts is not None:
            self.spec_bts = self._define_str("spec_bts", spec_bts, nullable=True)
        if roof_type is not None:
            self.roof_type = self._define_str("roof_type", roof_type, nullable=True)
        if roof_age is not None:
            self.roof_age = self._define_number("roof_age", roof_age, nullable=True)
        if heat is not None:
            self.heat = self._define_str("heat", heat, nullable=True)
        if ac is not None:
            self.ac = self._define_str("ac", ac, nullable=True)
        if lighting is not None:
            self.lighting = self._define_str("lighting", lighting, nullable=True)
        if ceiling_height_min is not None:
            self.ceiling_height_min = self._define_number(
                "ceiling_height_min", ceiling_height_min, nullable=True
            )
        if ceiling_height_max is not None:
            self.ceiling_height_max = self._define_number(
                "ceiling_height_max", ceiling_height_max, nullable=True
            )
        if bay_column_width is not None:
            self.bay_column_width = self._define_number(
                "bay_column_width", bay_column_width, nullable=True
            )
        if bay_column_depth is not None:
            self.bay_column_depth = self._define_number(
                "bay_column_depth", bay_column_depth, nullable=True
            )
        if int_docks is not None:
            self.int_docks = self._define_number("int_docks", int_docks, nullable=True)
        if int_levelers is not None:
            self.int_levelers = self._define_number(
                "int_levelers", int_levelers, nullable=True
            )
        if ext_docks is not None:
            self.ext_docks = self._define_number("ext_docks", ext_docks, nullable=True)
        if ext_levelers is not None:
            self.ext_levelers = self._define_number(
                "ext_levelers", ext_levelers, nullable=True
            )
        if gl_did is not None:
            self.gl_did = self._define_number("gl_did", gl_did, nullable=True)
        if gl_did_dimensions is not None:
            self.gl_did_dimensions = self._define_str(
                "gl_did_dimensions", gl_did_dimensions, nullable=True
            )
        if cross_docked is not None:
            self.cross_docked = self._define_str(
                "cross_docked", cross_docked, nullable=True
            )
        if dh_truck_doors is not None:
            self.dh_truck_doors = self._define_number(
                "dh_truck_doors", dh_truck_doors, nullable=True
            )
        if trailer_spots is not None:
            self.trailer_spots = self._define_number(
                "trailer_spots", trailer_spots, nullable=True
            )
        if rail_doors is not None:
            self.rail_doors = self._define_number(
                "rail_doors", rail_doors, nullable=True
            )
        if total_doors is not None:
            self.total_doors = self._define_number(
                "total_doors", total_doors, nullable=True
            )
        if loading_door_comments is not None:
            self.loading_door_comments = self._define_str(
                "loading_door_comments", loading_door_comments, nullable=True
            )
        if rail_status is not None:
            self.rail_status = self._define_str(
                "rail_status", rail_status, nullable=True
            )
        if ex_spots is not None:
            self.ex_spots = self._define_number("ex_spots", ex_spots, nullable=True)
        if int_spots is not None:
            self.int_spots = self._define_number("int_spots", int_spots, nullable=True)
        if rail_line is not None:
            self.rail_line = self._define_str("rail_line", rail_line, nullable=True)
        if rail_comments is not None:
            self.rail_comments = self._define_str(
                "rail_comments", rail_comments, nullable=True
            )
        if cranes is not None:
            self.cranes = self._define_number("cranes", cranes, nullable=True)
        if crane_capacity_min is not None:
            self.crane_capacity_min = self._define_number(
                "crane_capacity_min", crane_capacity_min, nullable=True
            )
        if crane_capacity_max is not None:
            self.crane_capacity_max = self._define_number(
                "crane_capacity_max", crane_capacity_max, nullable=True
            )
        if hook_height is not None:
            self.hook_height = self._define_number(
                "hook_height", hook_height, nullable=True
            )
        if clearance is not None:
            self.clearance = self._define_number("clearance", clearance, nullable=True)
        if crane_comments is not None:
            self.crane_comments = self._define_str(
                "crane_comments", crane_comments, nullable=True
            )
        if freezer_sqft is not None:
            self.freezer_sqft = self._define_number(
                "freezer_sqft", freezer_sqft, nullable=True
            )
        if freezer_comments is not None:
            self.freezer_comments = self._define_str(
                "freezer_comments", freezer_comments, nullable=True
            )
        if cooler_sqft is not None:
            self.cooler_sqft = self._define_number(
                "cooler_sqft", cooler_sqft, nullable=True
            )
        if cooler_comments is not None:
            self.cooler_comments = self._define_str(
                "cooler_comments", cooler_comments, nullable=True
            )
        if covered_spaces is not None:
            self.covered_spaces = self._define_number(
                "covered_spaces", covered_spaces, nullable=True
            )
        if comments_public is not None:
            self.comments_public = self._define_str(
                "comments_public", comments_public, nullable=True
            )
        if comments_restricted is not None:
            self.comments_restricted = self._define_str(
                "comments_restricted", comments_restricted, nullable=True
            )
        if max_contig_land_sf is not None:
            self.max_contig_land_sf = self._define_number(
                "max_contig_land_sf", max_contig_land_sf, nullable=True
            )
        if max_contig_land_ac is not None:
            self.max_contig_land_ac = self._define_number(
                "max_contig_land_ac", max_contig_land_ac, nullable=True
            )
        if land_zoning is not None:
            self.land_zoning = self._define_str(
                "land_zoning", land_zoning, nullable=True
            )
        if additional_site_information is not None:
            self.additional_site_information = self._define_str(
                "additional_site_information",
                additional_site_information,
                nullable=True,
            )
        if business_park is not None:
            self.business_park = self._define_str(
                "business_park", business_park, nullable=True
            )
        if amps is not None:
            self.amps = self._define_number("amps", amps, nullable=True)
        if phase is not None:
            self.phase = self._define_number("phase", phase, nullable=True)
        if overhead_cranes is not None:
            self.overhead_cranes = self._define_number(
                "overhead_cranes", overhead_cranes, nullable=True
            )
        if clear_height_max is not None:
            self.clear_height_max = self._define_number(
                "clear_height_max", clear_height_max, nullable=True
            )
        if clear_height_min is not None:
            self.clear_height_min = self._define_number(
                "clear_height_min", clear_height_min, nullable=True
            )
        if complex is not None:
            self.complex = self._define_str("complex", complex, nullable=True)
        if dock_levelers_capacity is not None:
            self.dock_levelers_capacity = self._define_number(
                "dock_levelers_capacity", dock_levelers_capacity, nullable=True
            )
        if estimated_hold_period is not None:
            self.estimated_hold_period = self._define_number(
                "estimated_hold_period", estimated_hold_period, nullable=True
            )
        if estimated_sale_date is not None:
            self.estimated_sale_date = self._define_str(
                "estimated_sale_date", estimated_sale_date, nullable=True
            )
        if fa_trans_id is not None:
            self.fa_trans_id = self._define_number(
                "fa_trans_id", fa_trans_id, nullable=True
            )
        if floor_thickness is not None:
            self.floor_thickness = self._define_number(
                "floor_thickness", floor_thickness, nullable=True
            )
        if frontage is not None:
            self.frontage = self._define_str("frontage", frontage, nullable=True)
        if location_overview is not None:
            self.location_overview = self._define_str(
                "location_overview", location_overview, nullable=True
            )
        if overhead_crane_size is not None:
            self.overhead_crane_size = self._define_number(
                "overhead_crane_size", overhead_crane_size, nullable=True
            )
        if property_overview is not None:
            self.property_overview = self._define_str(
                "property_overview", property_overview, nullable=True
            )
        if warehouse_sf is not None:
            self.warehouse_sf = self._define_number(
                "warehouse_sf", warehouse_sf, nullable=True
            )
        if floor_type is not None:
            self.floor_type = self._define_str("floor_type", floor_type, nullable=True)
        if surface_type is not None:
            self.surface_type = self._define_str(
                "surface_type", surface_type, nullable=True
            )
        if cranes_clearance is not None:
            self.cranes_clearance = self._define_number(
                "cranes_clearance", cranes_clearance, nullable=True
            )
        if property_subtype is not None:
            self.property_subtype = self._define_str(
                "property_subtype", property_subtype, nullable=True
            )
        if tenancy is not None:
            self.tenancy = self._define_str("tenancy", tenancy, nullable=True)
        if property_description is not None:
            self.property_description = self._define_str(
                "property_description", property_description, nullable=True
            )
        self._kwargs = kwargs
