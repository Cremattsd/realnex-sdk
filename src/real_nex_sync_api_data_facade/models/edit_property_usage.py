# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {
        "bldg_status": "bldgStatus",
        "usable_area": "usableArea",
        "load_factor": "loadFactor",
        "net_acres": "netAcres",
        "yr_renov": "yrRenov",
        "vacant_area": "vacantArea",
        "year_built": "yearBuilt",
        "parking_ratio": "parkingRatio",
        "parking_spc": "parkingSpc",
        "lot_size": "lotSize",
        "office_area": "officeArea",
        "general_use": "generalUse",
        "grade_doors": "gradeDoors",
        "legal_descr": "legalDescr",
        "dock_doors": "dockDoors",
        "truck_doors": "truckDoors",
        "traffic_count": "trafficCount",
        "clear_height": "clearHeight",
        "rail_service": "railService",
        "med_income": "medIncome",
        "land_status": "landStatus",
        "overhead_cranes": "overheadCranes",
        "airport_access": "airportAccess",
        "barge_access": "bargeAccess",
        "building_quality": "buildingQuality",
        "census_block": "censusBlock",
        "census_tract": "censusTract",
        "clear_height_max": "clearHeightMax",
        "clear_height_min": "clearHeightMin",
        "dock_levelers_capacity": "dockLevelersCapacity",
        "drive_in": "driveIn",
        "drive_in_size": "driveInSize",
        "electric_location": "electricLocation",
        "electric_provider": "electricProvider",
        "estimated_hold_period": "estimatedHoldPeriod",
        "estimated_sale_date": "estimatedSaleDate",
        "ext_walls": "extWalls",
        "fa_doc_number": "faDocNumber",
        "fa_trans_id": "faTransId",
        "floor_thickness": "floorThickness",
        "gas_provider": "gasProvider",
        "living_sqft": "livingSqft",
        "location_overview": "locationOverview",
        "lot_depth": "lotDepth",
        "overhead_crane_size": "overheadCraneSize",
        "parking_spaces_reserved": "parkingSpacesReserved",
        "parking_spaces_unreserved": "parkingSpacesUnreserved",
        "parking_surface_type": "parkingSurfaceType",
        "prior_use": "priorUse",
        "property_overview": "propertyOverview",
        "rentable_sqft": "rentableSqft",
        "roof_material": "roofMaterial",
        "sewer_location": "sewerLocation",
        "sewer_provider": "sewerProvider",
        "taxes_door": "taxesDoor",
        "voltage_high": "voltageHigh",
        "voltage_min": "voltageMin",
        "warehouse_sf": "warehouseSf",
        "water_location": "waterLocation",
        "water_provider": "waterProvider",
        "year_assessed": "yearAssessed",
        "curr_cap_rate": "currCapRate",
        "curr_cash_flow": "currCashFlow",
        "curr_cash_on_cash": "currCashOnCash",
        "curr_debt_service": "currDebtService",
        "curr_grm": "currGrm",
        "curr_irr": "currIrr",
        "curr_lender": "currLender",
        "curr_loan_amount": "currLoanAmount",
        "curr_loan_maturity": "currLoanMaturity",
        "curr_loan_orig": "currLoanOrig",
        "curr_loan_periods": "currLoanPeriods",
        "curr_loan_rate": "currLoanRate",
        "curr_loan_term": "currLoanTerm",
        "curr_loan_type": "currLoanType",
        "curr_per_acre": "currPerAcre",
        "curr_per_foot": "currPerFoot",
        "curr_per_foot_land": "currPerFootLand",
        "curr_per_unit": "currPerUnit",
        "floor_type": "floorType",
        "surface_type": "surfaceType",
        "tax_amount": "taxAmount",
        "tax_year": "taxYear",
        "tax_deliquent_year": "taxDeliquentYear",
        "tax_account_number": "taxAccountNumber",
        "market_year": "marketYear",
        "loan_trans_type": "loanTransType",
        "trans_type": "transType",
        "cranes_clearance": "cranesClearance",
        "property_subtype": "propertySubtype",
        "property_description": "propertyDescription",
    }
)
class EditPropertyUsage(BaseModel):
    """EditPropertyUsage

    :param bldg_status: bldg_status, defaults to None
    :type bldg_status: str, optional
    :param usable_area: usable_area, defaults to None
    :type usable_area: float, optional
    :param load_factor: load_factor, defaults to None
    :type load_factor: float, optional
    :param net_acres: net_acres, defaults to None
    :type net_acres: float, optional
    :param yr_renov: yr_renov, defaults to None
    :type yr_renov: int, optional
    :param condition: condition, defaults to None
    :type condition: str, optional
    :param vacant_area: vacant_area, defaults to None
    :type vacant_area: float, optional
    :param year_built: year_built, defaults to None
    :type year_built: int, optional
    :param parking: parking, defaults to None
    :type parking: str, optional
    :param parking_ratio: parking_ratio, defaults to None
    :type parking_ratio: str, optional
    :param parking_spc: parking_spc, defaults to None
    :type parking_spc: int, optional
    :param lot_size: lot_size, defaults to None
    :type lot_size: float, optional
    :param parkingfee: parkingfee, defaults to None
    :type parkingfee: str, optional
    :param improved: improved, defaults to None
    :type improved: float, optional
    :param exclusions: exclusions, defaults to None
    :type exclusions: str, optional
    :param office_area: office_area, defaults to None
    :type office_area: float, optional
    :param electric: electric, defaults to None
    :type electric: str, optional
    :param general_use: general_use, defaults to None
    :type general_use: str, optional
    :param majors: majors, defaults to None
    :type majors: str, optional
    :param grade_doors: grade_doors, defaults to None
    :type grade_doors: str, optional
    :param gas: gas, defaults to None
    :type gas: str, optional
    :param legal_descr: legal_descr, defaults to None
    :type legal_descr: str, optional
    :param anchors: anchors, defaults to None
    :type anchors: str, optional
    :param dock_doors: dock_doors, defaults to None
    :type dock_doors: str, optional
    :param sewers: sewers, defaults to None
    :type sewers: str, optional
    :param topography: topography, defaults to None
    :type topography: str, optional
    :param demographics: demographics, defaults to None
    :type demographics: str, optional
    :param truck_doors: truck_doors, defaults to None
    :type truck_doors: str, optional
    :param phones: phones, defaults to None
    :type phones: str, optional
    :param population: population, defaults to None
    :type population: int, optional
    :param dimensions: dimensions, defaults to None
    :type dimensions: str, optional
    :param traffic_count: traffic_count, defaults to None
    :type traffic_count: str, optional
    :param clear_height: clear_height, defaults to None
    :type clear_height: str, optional
    :param power: power, defaults to None
    :type power: str, optional
    :param signage: signage, defaults to None
    :type signage: str, optional
    :param rail_service: rail_service, defaults to None
    :type rail_service: str, optional
    :param med_income: med_income, defaults to None
    :type med_income: int, optional
    :param yard: yard, defaults to None
    :type yard: str, optional
    :param elevators: elevators, defaults to None
    :type elevators: int, optional
    :param hvac: hvac, defaults to None
    :type hvac: str, optional
    :param sprinklers: sprinklers, defaults to None
    :type sprinklers: str, optional
    :param extras: extras, defaults to None
    :type extras: str, optional
    :param security: security, defaults to None
    :type security: str, optional
    :param highlights: highlights, defaults to None
    :type highlights: str, optional
    :param land_status: land_status, defaults to None
    :type land_status: str, optional
    :param views: views, defaults to None
    :type views: str, optional
    :param overhead_cranes: overhead_cranes, defaults to None
    :type overhead_cranes: int, optional
    :param airport_access: airport_access, defaults to None
    :type airport_access: str, optional
    :param barge_access: barge_access, defaults to None
    :type barge_access: str, optional
    :param block: block, defaults to None
    :type block: str, optional
    :param building_quality: building_quality, defaults to None
    :type building_quality: str, optional
    :param census_block: census_block, defaults to None
    :type census_block: str, optional
    :param census_tract: census_tract, defaults to None
    :type census_tract: str, optional
    :param clear_height_max: clear_height_max, defaults to None
    :type clear_height_max: float, optional
    :param clear_height_min: clear_height_min, defaults to None
    :type clear_height_min: float, optional
    :param complex: complex, defaults to None
    :type complex: str, optional
    :param dock_levelers_capacity: dock_levelers_capacity, defaults to None
    :type dock_levelers_capacity: int, optional
    :param drive_in: drive_in, defaults to None
    :type drive_in: int, optional
    :param drive_in_size: drive_in_size, defaults to None
    :type drive_in_size: str, optional
    :param electric_location: electric_location, defaults to None
    :type electric_location: str, optional
    :param electric_provider: electric_provider, defaults to None
    :type electric_provider: str, optional
    :param estimated_hold_period: estimated_hold_period, defaults to None
    :type estimated_hold_period: int, optional
    :param estimated_sale_date: estimated_sale_date, defaults to None
    :type estimated_sale_date: str, optional
    :param ext_walls: ext_walls, defaults to None
    :type ext_walls: str, optional
    :param fa_doc_number: fa_doc_number, defaults to None
    :type fa_doc_number: str, optional
    :param fa_trans_id: fa_trans_id, defaults to None
    :type fa_trans_id: int, optional
    :param fips: fips, defaults to None
    :type fips: str, optional
    :param floor_thickness: floor_thickness, defaults to None
    :type floor_thickness: int, optional
    :param frontage: frontage, defaults to None
    :type frontage: str, optional
    :param gas_provider: gas_provider, defaults to None
    :type gas_provider: str, optional
    :param interstate: interstate, defaults to None
    :type interstate: str, optional
    :param living_sqft: living_sqft, defaults to None
    :type living_sqft: float, optional
    :param location_overview: location_overview, defaults to None
    :type location_overview: str, optional
    :param lot_depth: lot_depth, defaults to None
    :type lot_depth: float, optional
    :param overhead_crane_size: overhead_crane_size, defaults to None
    :type overhead_crane_size: int, optional
    :param parking_spaces_reserved: parking_spaces_reserved, defaults to None
    :type parking_spaces_reserved: int, optional
    :param parking_spaces_unreserved: parking_spaces_unreserved, defaults to None
    :type parking_spaces_unreserved: int, optional
    :param parking_surface_type: parking_surface_type, defaults to None
    :type parking_surface_type: str, optional
    :param prior_use: prior_use, defaults to None
    :type prior_use: str, optional
    :param property_overview: property_overview, defaults to None
    :type property_overview: str, optional
    :param rentable_sqft: rentable_sqft, defaults to None
    :type rentable_sqft: float, optional
    :param roof_material: roof_material, defaults to None
    :type roof_material: str, optional
    :param sewer_location: sewer_location, defaults to None
    :type sewer_location: str, optional
    :param sewer_provider: sewer_provider, defaults to None
    :type sewer_provider: str, optional
    :param style: style, defaults to None
    :type style: str, optional
    :param subdivision: subdivision, defaults to None
    :type subdivision: str, optional
    :param taxes: taxes, defaults to None
    :type taxes: float, optional
    :param taxes_door: taxes_door, defaults to None
    :type taxes_door: float, optional
    :param voltage_high: voltage_high, defaults to None
    :type voltage_high: int, optional
    :param voltage_min: voltage_min, defaults to None
    :type voltage_min: int, optional
    :param warehouse_sf: warehouse_sf, defaults to None
    :type warehouse_sf: float, optional
    :param water_location: water_location, defaults to None
    :type water_location: str, optional
    :param water_provider: water_provider, defaults to None
    :type water_provider: str, optional
    :param year_assessed: year_assessed, defaults to None
    :type year_assessed: int, optional
    :param curr_cap_rate: curr_cap_rate, defaults to None
    :type curr_cap_rate: float, optional
    :param curr_cash_flow: curr_cash_flow, defaults to None
    :type curr_cash_flow: float, optional
    :param curr_cash_on_cash: curr_cash_on_cash, defaults to None
    :type curr_cash_on_cash: float, optional
    :param curr_debt_service: curr_debt_service, defaults to None
    :type curr_debt_service: float, optional
    :param curr_grm: curr_grm, defaults to None
    :type curr_grm: float, optional
    :param curr_irr: curr_irr, defaults to None
    :type curr_irr: float, optional
    :param curr_lender: curr_lender, defaults to None
    :type curr_lender: str, optional
    :param curr_loan_amount: curr_loan_amount, defaults to None
    :type curr_loan_amount: float, optional
    :param curr_loan_maturity: curr_loan_maturity, defaults to None
    :type curr_loan_maturity: str, optional
    :param curr_loan_orig: curr_loan_orig, defaults to None
    :type curr_loan_orig: str, optional
    :param curr_loan_periods: curr_loan_periods, defaults to None
    :type curr_loan_periods: int, optional
    :param curr_loan_rate: curr_loan_rate, defaults to None
    :type curr_loan_rate: float, optional
    :param curr_loan_term: curr_loan_term, defaults to None
    :type curr_loan_term: int, optional
    :param curr_loan_type: curr_loan_type, defaults to None
    :type curr_loan_type: str, optional
    :param curr_per_acre: curr_per_acre, defaults to None
    :type curr_per_acre: float, optional
    :param curr_per_foot: curr_per_foot, defaults to None
    :type curr_per_foot: float, optional
    :param curr_per_foot_land: curr_per_foot_land, defaults to None
    :type curr_per_foot_land: float, optional
    :param curr_per_unit: curr_per_unit, defaults to None
    :type curr_per_unit: float, optional
    :param floor_type: floor_type, defaults to None
    :type floor_type: str, optional
    :param surface_type: surface_type, defaults to None
    :type surface_type: str, optional
    :param tax_amount: tax_amount, defaults to None
    :type tax_amount: float, optional
    :param tax_year: tax_year, defaults to None
    :type tax_year: int, optional
    :param tax_deliquent_year: tax_deliquent_year, defaults to None
    :type tax_deliquent_year: int, optional
    :param tax_account_number: tax_account_number, defaults to None
    :type tax_account_number: str, optional
    :param market_year: market_year, defaults to None
    :type market_year: int, optional
    :param loan_trans_type: loan_trans_type, defaults to None
    :type loan_trans_type: str, optional
    :param trans_type: trans_type, defaults to None
    :type trans_type: str, optional
    :param cranes_clearance: cranes_clearance, defaults to None
    :type cranes_clearance: int, optional
    :param property_subtype: property_subtype, defaults to None
    :type property_subtype: str, optional
    :param tenancy: tenancy, defaults to None
    :type tenancy: str, optional
    :param property_description: property_description, defaults to None
    :type property_description: str, optional
    """

    def __init__(
        self,
        bldg_status: str = None,
        usable_area: float = None,
        load_factor: float = None,
        net_acres: float = None,
        yr_renov: int = None,
        condition: str = None,
        vacant_area: float = None,
        year_built: int = None,
        parking: str = None,
        parking_ratio: str = None,
        parking_spc: int = None,
        lot_size: float = None,
        parkingfee: str = None,
        improved: float = None,
        exclusions: str = None,
        office_area: float = None,
        electric: str = None,
        general_use: str = None,
        majors: str = None,
        grade_doors: str = None,
        gas: str = None,
        legal_descr: str = None,
        anchors: str = None,
        dock_doors: str = None,
        sewers: str = None,
        topography: str = None,
        demographics: str = None,
        truck_doors: str = None,
        phones: str = None,
        population: int = None,
        dimensions: str = None,
        traffic_count: str = None,
        clear_height: str = None,
        power: str = None,
        signage: str = None,
        rail_service: str = None,
        med_income: int = None,
        yard: str = None,
        elevators: int = None,
        hvac: str = None,
        sprinklers: str = None,
        extras: str = None,
        security: str = None,
        highlights: str = None,
        land_status: str = None,
        views: str = None,
        overhead_cranes: int = None,
        airport_access: str = None,
        barge_access: str = None,
        block: str = None,
        building_quality: str = None,
        census_block: str = None,
        census_tract: str = None,
        clear_height_max: float = None,
        clear_height_min: float = None,
        complex: str = None,
        dock_levelers_capacity: int = None,
        drive_in: int = None,
        drive_in_size: str = None,
        electric_location: str = None,
        electric_provider: str = None,
        estimated_hold_period: int = None,
        estimated_sale_date: str = None,
        ext_walls: str = None,
        fa_doc_number: str = None,
        fa_trans_id: int = None,
        fips: str = None,
        floor_thickness: int = None,
        frontage: str = None,
        gas_provider: str = None,
        interstate: str = None,
        living_sqft: float = None,
        location_overview: str = None,
        lot_depth: float = None,
        overhead_crane_size: int = None,
        parking_spaces_reserved: int = None,
        parking_spaces_unreserved: int = None,
        parking_surface_type: str = None,
        prior_use: str = None,
        property_overview: str = None,
        rentable_sqft: float = None,
        roof_material: str = None,
        sewer_location: str = None,
        sewer_provider: str = None,
        style: str = None,
        subdivision: str = None,
        taxes: float = None,
        taxes_door: float = None,
        voltage_high: int = None,
        voltage_min: int = None,
        warehouse_sf: float = None,
        water_location: str = None,
        water_provider: str = None,
        year_assessed: int = None,
        curr_cap_rate: float = None,
        curr_cash_flow: float = None,
        curr_cash_on_cash: float = None,
        curr_debt_service: float = None,
        curr_grm: float = None,
        curr_irr: float = None,
        curr_lender: str = None,
        curr_loan_amount: float = None,
        curr_loan_maturity: str = None,
        curr_loan_orig: str = None,
        curr_loan_periods: int = None,
        curr_loan_rate: float = None,
        curr_loan_term: int = None,
        curr_loan_type: str = None,
        curr_per_acre: float = None,
        curr_per_foot: float = None,
        curr_per_foot_land: float = None,
        curr_per_unit: float = None,
        floor_type: str = None,
        surface_type: str = None,
        tax_amount: float = None,
        tax_year: int = None,
        tax_deliquent_year: int = None,
        tax_account_number: str = None,
        market_year: int = None,
        loan_trans_type: str = None,
        trans_type: str = None,
        cranes_clearance: int = None,
        property_subtype: str = None,
        tenancy: str = None,
        property_description: str = None,
        **kwargs
    ):
        """EditPropertyUsage

        :param bldg_status: bldg_status, defaults to None
        :type bldg_status: str, optional
        :param usable_area: usable_area, defaults to None
        :type usable_area: float, optional
        :param load_factor: load_factor, defaults to None
        :type load_factor: float, optional
        :param net_acres: net_acres, defaults to None
        :type net_acres: float, optional
        :param yr_renov: yr_renov, defaults to None
        :type yr_renov: int, optional
        :param condition: condition, defaults to None
        :type condition: str, optional
        :param vacant_area: vacant_area, defaults to None
        :type vacant_area: float, optional
        :param year_built: year_built, defaults to None
        :type year_built: int, optional
        :param parking: parking, defaults to None
        :type parking: str, optional
        :param parking_ratio: parking_ratio, defaults to None
        :type parking_ratio: str, optional
        :param parking_spc: parking_spc, defaults to None
        :type parking_spc: int, optional
        :param lot_size: lot_size, defaults to None
        :type lot_size: float, optional
        :param parkingfee: parkingfee, defaults to None
        :type parkingfee: str, optional
        :param improved: improved, defaults to None
        :type improved: float, optional
        :param exclusions: exclusions, defaults to None
        :type exclusions: str, optional
        :param office_area: office_area, defaults to None
        :type office_area: float, optional
        :param electric: electric, defaults to None
        :type electric: str, optional
        :param general_use: general_use, defaults to None
        :type general_use: str, optional
        :param majors: majors, defaults to None
        :type majors: str, optional
        :param grade_doors: grade_doors, defaults to None
        :type grade_doors: str, optional
        :param gas: gas, defaults to None
        :type gas: str, optional
        :param legal_descr: legal_descr, defaults to None
        :type legal_descr: str, optional
        :param anchors: anchors, defaults to None
        :type anchors: str, optional
        :param dock_doors: dock_doors, defaults to None
        :type dock_doors: str, optional
        :param sewers: sewers, defaults to None
        :type sewers: str, optional
        :param topography: topography, defaults to None
        :type topography: str, optional
        :param demographics: demographics, defaults to None
        :type demographics: str, optional
        :param truck_doors: truck_doors, defaults to None
        :type truck_doors: str, optional
        :param phones: phones, defaults to None
        :type phones: str, optional
        :param population: population, defaults to None
        :type population: int, optional
        :param dimensions: dimensions, defaults to None
        :type dimensions: str, optional
        :param traffic_count: traffic_count, defaults to None
        :type traffic_count: str, optional
        :param clear_height: clear_height, defaults to None
        :type clear_height: str, optional
        :param power: power, defaults to None
        :type power: str, optional
        :param signage: signage, defaults to None
        :type signage: str, optional
        :param rail_service: rail_service, defaults to None
        :type rail_service: str, optional
        :param med_income: med_income, defaults to None
        :type med_income: int, optional
        :param yard: yard, defaults to None
        :type yard: str, optional
        :param elevators: elevators, defaults to None
        :type elevators: int, optional
        :param hvac: hvac, defaults to None
        :type hvac: str, optional
        :param sprinklers: sprinklers, defaults to None
        :type sprinklers: str, optional
        :param extras: extras, defaults to None
        :type extras: str, optional
        :param security: security, defaults to None
        :type security: str, optional
        :param highlights: highlights, defaults to None
        :type highlights: str, optional
        :param land_status: land_status, defaults to None
        :type land_status: str, optional
        :param views: views, defaults to None
        :type views: str, optional
        :param overhead_cranes: overhead_cranes, defaults to None
        :type overhead_cranes: int, optional
        :param airport_access: airport_access, defaults to None
        :type airport_access: str, optional
        :param barge_access: barge_access, defaults to None
        :type barge_access: str, optional
        :param block: block, defaults to None
        :type block: str, optional
        :param building_quality: building_quality, defaults to None
        :type building_quality: str, optional
        :param census_block: census_block, defaults to None
        :type census_block: str, optional
        :param census_tract: census_tract, defaults to None
        :type census_tract: str, optional
        :param clear_height_max: clear_height_max, defaults to None
        :type clear_height_max: float, optional
        :param clear_height_min: clear_height_min, defaults to None
        :type clear_height_min: float, optional
        :param complex: complex, defaults to None
        :type complex: str, optional
        :param dock_levelers_capacity: dock_levelers_capacity, defaults to None
        :type dock_levelers_capacity: int, optional
        :param drive_in: drive_in, defaults to None
        :type drive_in: int, optional
        :param drive_in_size: drive_in_size, defaults to None
        :type drive_in_size: str, optional
        :param electric_location: electric_location, defaults to None
        :type electric_location: str, optional
        :param electric_provider: electric_provider, defaults to None
        :type electric_provider: str, optional
        :param estimated_hold_period: estimated_hold_period, defaults to None
        :type estimated_hold_period: int, optional
        :param estimated_sale_date: estimated_sale_date, defaults to None
        :type estimated_sale_date: str, optional
        :param ext_walls: ext_walls, defaults to None
        :type ext_walls: str, optional
        :param fa_doc_number: fa_doc_number, defaults to None
        :type fa_doc_number: str, optional
        :param fa_trans_id: fa_trans_id, defaults to None
        :type fa_trans_id: int, optional
        :param fips: fips, defaults to None
        :type fips: str, optional
        :param floor_thickness: floor_thickness, defaults to None
        :type floor_thickness: int, optional
        :param frontage: frontage, defaults to None
        :type frontage: str, optional
        :param gas_provider: gas_provider, defaults to None
        :type gas_provider: str, optional
        :param interstate: interstate, defaults to None
        :type interstate: str, optional
        :param living_sqft: living_sqft, defaults to None
        :type living_sqft: float, optional
        :param location_overview: location_overview, defaults to None
        :type location_overview: str, optional
        :param lot_depth: lot_depth, defaults to None
        :type lot_depth: float, optional
        :param overhead_crane_size: overhead_crane_size, defaults to None
        :type overhead_crane_size: int, optional
        :param parking_spaces_reserved: parking_spaces_reserved, defaults to None
        :type parking_spaces_reserved: int, optional
        :param parking_spaces_unreserved: parking_spaces_unreserved, defaults to None
        :type parking_spaces_unreserved: int, optional
        :param parking_surface_type: parking_surface_type, defaults to None
        :type parking_surface_type: str, optional
        :param prior_use: prior_use, defaults to None
        :type prior_use: str, optional
        :param property_overview: property_overview, defaults to None
        :type property_overview: str, optional
        :param rentable_sqft: rentable_sqft, defaults to None
        :type rentable_sqft: float, optional
        :param roof_material: roof_material, defaults to None
        :type roof_material: str, optional
        :param sewer_location: sewer_location, defaults to None
        :type sewer_location: str, optional
        :param sewer_provider: sewer_provider, defaults to None
        :type sewer_provider: str, optional
        :param style: style, defaults to None
        :type style: str, optional
        :param subdivision: subdivision, defaults to None
        :type subdivision: str, optional
        :param taxes: taxes, defaults to None
        :type taxes: float, optional
        :param taxes_door: taxes_door, defaults to None
        :type taxes_door: float, optional
        :param voltage_high: voltage_high, defaults to None
        :type voltage_high: int, optional
        :param voltage_min: voltage_min, defaults to None
        :type voltage_min: int, optional
        :param warehouse_sf: warehouse_sf, defaults to None
        :type warehouse_sf: float, optional
        :param water_location: water_location, defaults to None
        :type water_location: str, optional
        :param water_provider: water_provider, defaults to None
        :type water_provider: str, optional
        :param year_assessed: year_assessed, defaults to None
        :type year_assessed: int, optional
        :param curr_cap_rate: curr_cap_rate, defaults to None
        :type curr_cap_rate: float, optional
        :param curr_cash_flow: curr_cash_flow, defaults to None
        :type curr_cash_flow: float, optional
        :param curr_cash_on_cash: curr_cash_on_cash, defaults to None
        :type curr_cash_on_cash: float, optional
        :param curr_debt_service: curr_debt_service, defaults to None
        :type curr_debt_service: float, optional
        :param curr_grm: curr_grm, defaults to None
        :type curr_grm: float, optional
        :param curr_irr: curr_irr, defaults to None
        :type curr_irr: float, optional
        :param curr_lender: curr_lender, defaults to None
        :type curr_lender: str, optional
        :param curr_loan_amount: curr_loan_amount, defaults to None
        :type curr_loan_amount: float, optional
        :param curr_loan_maturity: curr_loan_maturity, defaults to None
        :type curr_loan_maturity: str, optional
        :param curr_loan_orig: curr_loan_orig, defaults to None
        :type curr_loan_orig: str, optional
        :param curr_loan_periods: curr_loan_periods, defaults to None
        :type curr_loan_periods: int, optional
        :param curr_loan_rate: curr_loan_rate, defaults to None
        :type curr_loan_rate: float, optional
        :param curr_loan_term: curr_loan_term, defaults to None
        :type curr_loan_term: int, optional
        :param curr_loan_type: curr_loan_type, defaults to None
        :type curr_loan_type: str, optional
        :param curr_per_acre: curr_per_acre, defaults to None
        :type curr_per_acre: float, optional
        :param curr_per_foot: curr_per_foot, defaults to None
        :type curr_per_foot: float, optional
        :param curr_per_foot_land: curr_per_foot_land, defaults to None
        :type curr_per_foot_land: float, optional
        :param curr_per_unit: curr_per_unit, defaults to None
        :type curr_per_unit: float, optional
        :param floor_type: floor_type, defaults to None
        :type floor_type: str, optional
        :param surface_type: surface_type, defaults to None
        :type surface_type: str, optional
        :param tax_amount: tax_amount, defaults to None
        :type tax_amount: float, optional
        :param tax_year: tax_year, defaults to None
        :type tax_year: int, optional
        :param tax_deliquent_year: tax_deliquent_year, defaults to None
        :type tax_deliquent_year: int, optional
        :param tax_account_number: tax_account_number, defaults to None
        :type tax_account_number: str, optional
        :param market_year: market_year, defaults to None
        :type market_year: int, optional
        :param loan_trans_type: loan_trans_type, defaults to None
        :type loan_trans_type: str, optional
        :param trans_type: trans_type, defaults to None
        :type trans_type: str, optional
        :param cranes_clearance: cranes_clearance, defaults to None
        :type cranes_clearance: int, optional
        :param property_subtype: property_subtype, defaults to None
        :type property_subtype: str, optional
        :param tenancy: tenancy, defaults to None
        :type tenancy: str, optional
        :param property_description: property_description, defaults to None
        :type property_description: str, optional
        """
        if bldg_status is not None:
            self.bldg_status = self._define_str(
                "bldg_status", bldg_status, nullable=True
            )
        if usable_area is not None:
            self.usable_area = self._define_number(
                "usable_area", usable_area, nullable=True
            )
        if load_factor is not None:
            self.load_factor = self._define_number(
                "load_factor", load_factor, nullable=True
            )
        if net_acres is not None:
            self.net_acres = self._define_number("net_acres", net_acres, nullable=True)
        if yr_renov is not None:
            self.yr_renov = self._define_number("yr_renov", yr_renov, nullable=True)
        if condition is not None:
            self.condition = self._define_str("condition", condition, nullable=True)
        if vacant_area is not None:
            self.vacant_area = self._define_number(
                "vacant_area", vacant_area, nullable=True
            )
        if year_built is not None:
            self.year_built = self._define_number(
                "year_built", year_built, nullable=True
            )
        if parking is not None:
            self.parking = self._define_str("parking", parking, nullable=True)
        if parking_ratio is not None:
            self.parking_ratio = self._define_str(
                "parking_ratio", parking_ratio, nullable=True
            )
        if parking_spc is not None:
            self.parking_spc = self._define_number(
                "parking_spc", parking_spc, nullable=True
            )
        if lot_size is not None:
            self.lot_size = self._define_number("lot_size", lot_size, nullable=True)
        if parkingfee is not None:
            self.parkingfee = self._define_str("parkingfee", parkingfee, nullable=True)
        if improved is not None:
            self.improved = self._define_number("improved", improved, nullable=True)
        if exclusions is not None:
            self.exclusions = self._define_str("exclusions", exclusions, nullable=True)
        if office_area is not None:
            self.office_area = self._define_number(
                "office_area", office_area, nullable=True
            )
        if electric is not None:
            self.electric = self._define_str("electric", electric, nullable=True)
        if general_use is not None:
            self.general_use = self._define_str(
                "general_use", general_use, nullable=True
            )
        if majors is not None:
            self.majors = self._define_str("majors", majors, nullable=True)
        if grade_doors is not None:
            self.grade_doors = self._define_str(
                "grade_doors", grade_doors, nullable=True
            )
        if gas is not None:
            self.gas = self._define_str("gas", gas, nullable=True)
        if legal_descr is not None:
            self.legal_descr = self._define_str(
                "legal_descr", legal_descr, nullable=True
            )
        if anchors is not None:
            self.anchors = self._define_str("anchors", anchors, nullable=True)
        if dock_doors is not None:
            self.dock_doors = self._define_str("dock_doors", dock_doors, nullable=True)
        if sewers is not None:
            self.sewers = self._define_str("sewers", sewers, nullable=True)
        if topography is not None:
            self.topography = self._define_str("topography", topography, nullable=True)
        if demographics is not None:
            self.demographics = self._define_str(
                "demographics", demographics, nullable=True
            )
        if truck_doors is not None:
            self.truck_doors = self._define_str(
                "truck_doors", truck_doors, nullable=True
            )
        if phones is not None:
            self.phones = self._define_str("phones", phones, nullable=True)
        if population is not None:
            self.population = self._define_number(
                "population", population, nullable=True
            )
        if dimensions is not None:
            self.dimensions = self._define_str("dimensions", dimensions, nullable=True)
        if traffic_count is not None:
            self.traffic_count = self._define_str(
                "traffic_count", traffic_count, nullable=True
            )
        if clear_height is not None:
            self.clear_height = self._define_str(
                "clear_height", clear_height, nullable=True
            )
        if power is not None:
            self.power = self._define_str("power", power, nullable=True)
        if signage is not None:
            self.signage = self._define_str("signage", signage, nullable=True)
        if rail_service is not None:
            self.rail_service = self._define_str(
                "rail_service", rail_service, nullable=True
            )
        if med_income is not None:
            self.med_income = self._define_number(
                "med_income", med_income, nullable=True
            )
        if yard is not None:
            self.yard = self._define_str("yard", yard, nullable=True)
        if elevators is not None:
            self.elevators = self._define_number("elevators", elevators, nullable=True)
        if hvac is not None:
            self.hvac = self._define_str("hvac", hvac, nullable=True)
        if sprinklers is not None:
            self.sprinklers = self._define_str("sprinklers", sprinklers, nullable=True)
        if extras is not None:
            self.extras = self._define_str("extras", extras, nullable=True)
        if security is not None:
            self.security = self._define_str("security", security, nullable=True)
        if highlights is not None:
            self.highlights = self._define_str("highlights", highlights, nullable=True)
        if land_status is not None:
            self.land_status = self._define_str(
                "land_status", land_status, nullable=True
            )
        if views is not None:
            self.views = self._define_str("views", views, nullable=True)
        if overhead_cranes is not None:
            self.overhead_cranes = self._define_number(
                "overhead_cranes", overhead_cranes, nullable=True
            )
        if airport_access is not None:
            self.airport_access = self._define_str(
                "airport_access", airport_access, nullable=True
            )
        if barge_access is not None:
            self.barge_access = self._define_str(
                "barge_access", barge_access, nullable=True
            )
        if block is not None:
            self.block = self._define_str("block", block, nullable=True)
        if building_quality is not None:
            self.building_quality = self._define_str(
                "building_quality", building_quality, nullable=True
            )
        if census_block is not None:
            self.census_block = self._define_str(
                "census_block", census_block, nullable=True
            )
        if census_tract is not None:
            self.census_tract = self._define_str(
                "census_tract", census_tract, nullable=True
            )
        if clear_height_max is not None:
            self.clear_height_max = self._define_number(
                "clear_height_max", clear_height_max, nullable=True
            )
        if clear_height_min is not None:
            self.clear_height_min = self._define_number(
                "clear_height_min", clear_height_min, nullable=True
            )
        if complex is not None:
            self.complex = self._define_str("complex", complex, nullable=True)
        if dock_levelers_capacity is not None:
            self.dock_levelers_capacity = self._define_number(
                "dock_levelers_capacity", dock_levelers_capacity, nullable=True
            )
        if drive_in is not None:
            self.drive_in = self._define_number("drive_in", drive_in, nullable=True)
        if drive_in_size is not None:
            self.drive_in_size = self._define_str(
                "drive_in_size", drive_in_size, nullable=True
            )
        if electric_location is not None:
            self.electric_location = self._define_str(
                "electric_location", electric_location, nullable=True
            )
        if electric_provider is not None:
            self.electric_provider = self._define_str(
                "electric_provider", electric_provider, nullable=True
            )
        if estimated_hold_period is not None:
            self.estimated_hold_period = self._define_number(
                "estimated_hold_period", estimated_hold_period, nullable=True
            )
        if estimated_sale_date is not None:
            self.estimated_sale_date = self._define_str(
                "estimated_sale_date", estimated_sale_date, nullable=True
            )
        if ext_walls is not None:
            self.ext_walls = self._define_str("ext_walls", ext_walls, nullable=True)
        if fa_doc_number is not None:
            self.fa_doc_number = self._define_str(
                "fa_doc_number", fa_doc_number, nullable=True
            )
        if fa_trans_id is not None:
            self.fa_trans_id = self._define_number(
                "fa_trans_id", fa_trans_id, nullable=True
            )
        if fips is not None:
            self.fips = self._define_str("fips", fips, nullable=True)
        if floor_thickness is not None:
            self.floor_thickness = self._define_number(
                "floor_thickness", floor_thickness, nullable=True
            )
        if frontage is not None:
            self.frontage = self._define_str("frontage", frontage, nullable=True)
        if gas_provider is not None:
            self.gas_provider = self._define_str(
                "gas_provider", gas_provider, nullable=True
            )
        if interstate is not None:
            self.interstate = self._define_str("interstate", interstate, nullable=True)
        if living_sqft is not None:
            self.living_sqft = self._define_number(
                "living_sqft", living_sqft, nullable=True
            )
        if location_overview is not None:
            self.location_overview = self._define_str(
                "location_overview", location_overview, nullable=True
            )
        if lot_depth is not None:
            self.lot_depth = self._define_number("lot_depth", lot_depth, nullable=True)
        if overhead_crane_size is not None:
            self.overhead_crane_size = self._define_number(
                "overhead_crane_size", overhead_crane_size, nullable=True
            )
        if parking_spaces_reserved is not None:
            self.parking_spaces_reserved = self._define_number(
                "parking_spaces_reserved", parking_spaces_reserved, nullable=True
            )
        if parking_spaces_unreserved is not None:
            self.parking_spaces_unreserved = self._define_number(
                "parking_spaces_unreserved", parking_spaces_unreserved, nullable=True
            )
        if parking_surface_type is not None:
            self.parking_surface_type = self._define_str(
                "parking_surface_type", parking_surface_type, nullable=True
            )
        if prior_use is not None:
            self.prior_use = self._define_str("prior_use", prior_use, nullable=True)
        if property_overview is not None:
            self.property_overview = self._define_str(
                "property_overview", property_overview, nullable=True
            )
        if rentable_sqft is not None:
            self.rentable_sqft = self._define_number(
                "rentable_sqft", rentable_sqft, nullable=True
            )
        if roof_material is not None:
            self.roof_material = self._define_str(
                "roof_material", roof_material, nullable=True
            )
        if sewer_location is not None:
            self.sewer_location = self._define_str(
                "sewer_location", sewer_location, nullable=True
            )
        if sewer_provider is not None:
            self.sewer_provider = self._define_str(
                "sewer_provider", sewer_provider, nullable=True
            )
        if style is not None:
            self.style = self._define_str("style", style, nullable=True)
        if subdivision is not None:
            self.subdivision = self._define_str(
                "subdivision", subdivision, nullable=True
            )
        if taxes is not None:
            self.taxes = self._define_number("taxes", taxes, nullable=True)
        if taxes_door is not None:
            self.taxes_door = self._define_number(
                "taxes_door", taxes_door, nullable=True
            )
        if voltage_high is not None:
            self.voltage_high = self._define_number(
                "voltage_high", voltage_high, nullable=True
            )
        if voltage_min is not None:
            self.voltage_min = self._define_number(
                "voltage_min", voltage_min, nullable=True
            )
        if warehouse_sf is not None:
            self.warehouse_sf = self._define_number(
                "warehouse_sf", warehouse_sf, nullable=True
            )
        if water_location is not None:
            self.water_location = self._define_str(
                "water_location", water_location, nullable=True
            )
        if water_provider is not None:
            self.water_provider = self._define_str(
                "water_provider", water_provider, nullable=True
            )
        if year_assessed is not None:
            self.year_assessed = self._define_number(
                "year_assessed", year_assessed, nullable=True
            )
        if curr_cap_rate is not None:
            self.curr_cap_rate = self._define_number(
                "curr_cap_rate", curr_cap_rate, nullable=True
            )
        if curr_cash_flow is not None:
            self.curr_cash_flow = self._define_number(
                "curr_cash_flow", curr_cash_flow, nullable=True
            )
        if curr_cash_on_cash is not None:
            self.curr_cash_on_cash = self._define_number(
                "curr_cash_on_cash", curr_cash_on_cash, nullable=True
            )
        if curr_debt_service is not None:
            self.curr_debt_service = self._define_number(
                "curr_debt_service", curr_debt_service, nullable=True
            )
        if curr_grm is not None:
            self.curr_grm = self._define_number("curr_grm", curr_grm, nullable=True)
        if curr_irr is not None:
            self.curr_irr = self._define_number("curr_irr", curr_irr, nullable=True)
        if curr_lender is not None:
            self.curr_lender = self._define_str(
                "curr_lender", curr_lender, nullable=True
            )
        if curr_loan_amount is not None:
            self.curr_loan_amount = self._define_number(
                "curr_loan_amount", curr_loan_amount, nullable=True
            )
        if curr_loan_maturity is not None:
            self.curr_loan_maturity = self._define_str(
                "curr_loan_maturity", curr_loan_maturity, nullable=True
            )
        if curr_loan_orig is not None:
            self.curr_loan_orig = self._define_str(
                "curr_loan_orig", curr_loan_orig, nullable=True
            )
        if curr_loan_periods is not None:
            self.curr_loan_periods = self._define_number(
                "curr_loan_periods", curr_loan_periods, nullable=True
            )
        if curr_loan_rate is not None:
            self.curr_loan_rate = self._define_number(
                "curr_loan_rate", curr_loan_rate, nullable=True
            )
        if curr_loan_term is not None:
            self.curr_loan_term = self._define_number(
                "curr_loan_term", curr_loan_term, nullable=True
            )
        if curr_loan_type is not None:
            self.curr_loan_type = self._define_str(
                "curr_loan_type", curr_loan_type, nullable=True
            )
        if curr_per_acre is not None:
            self.curr_per_acre = self._define_number(
                "curr_per_acre", curr_per_acre, nullable=True
            )
        if curr_per_foot is not None:
            self.curr_per_foot = self._define_number(
                "curr_per_foot", curr_per_foot, nullable=True
            )
        if curr_per_foot_land is not None:
            self.curr_per_foot_land = self._define_number(
                "curr_per_foot_land", curr_per_foot_land, nullable=True
            )
        if curr_per_unit is not None:
            self.curr_per_unit = self._define_number(
                "curr_per_unit", curr_per_unit, nullable=True
            )
        if floor_type is not None:
            self.floor_type = self._define_str("floor_type", floor_type, nullable=True)
        if surface_type is not None:
            self.surface_type = self._define_str(
                "surface_type", surface_type, nullable=True
            )
        if tax_amount is not None:
            self.tax_amount = self._define_number(
                "tax_amount", tax_amount, nullable=True
            )
        if tax_year is not None:
            self.tax_year = self._define_number("tax_year", tax_year, nullable=True)
        if tax_deliquent_year is not None:
            self.tax_deliquent_year = self._define_number(
                "tax_deliquent_year", tax_deliquent_year, nullable=True
            )
        if tax_account_number is not None:
            self.tax_account_number = self._define_str(
                "tax_account_number", tax_account_number, nullable=True
            )
        if market_year is not None:
            self.market_year = self._define_number(
                "market_year", market_year, nullable=True
            )
        if loan_trans_type is not None:
            self.loan_trans_type = self._define_str(
                "loan_trans_type", loan_trans_type, nullable=True
            )
        if trans_type is not None:
            self.trans_type = self._define_str("trans_type", trans_type, nullable=True)
        if cranes_clearance is not None:
            self.cranes_clearance = self._define_number(
                "cranes_clearance", cranes_clearance, nullable=True
            )
        if property_subtype is not None:
            self.property_subtype = self._define_str(
                "property_subtype", property_subtype, nullable=True
            )
        if tenancy is not None:
            self.tenancy = self._define_str("tenancy", tenancy, nullable=True)
        if property_description is not None:
            self.property_description = self._define_str(
                "property_description", property_description, nullable=True
            )
        self._kwargs = kwargs
