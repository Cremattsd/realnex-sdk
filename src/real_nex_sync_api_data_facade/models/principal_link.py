# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .principal_type import PrincipalType
from .address import Address


@JsonMap({"type_": "type", "web_site": "webSite"})
class PrincipalLink(BaseModel):
    """PrincipalLink

    :param key: key, defaults to None
    :type key: str, optional
    :param type_: type_, defaults to None
    :type type_: PrincipalType, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param company: company, defaults to None
    :type company: str, optional
    :param organization: organization, defaults to None
    :type organization: str, optional
    :param email: email, defaults to None
    :type email: str, optional
    :param phone: phone, defaults to None
    :type phone: str, optional
    :param web_site: web_site, defaults to None
    :type web_site: str, optional
    :param address: address, defaults to None
    :type address: Address, optional
    """

    def __init__(
        self,
        key: str = None,
        type_: PrincipalType = None,
        name: str = None,
        company: str = None,
        organization: str = None,
        email: str = None,
        phone: str = None,
        web_site: str = None,
        address: Address = None,
        **kwargs,
    ):
        """PrincipalLink

        :param key: key, defaults to None
        :type key: str, optional
        :param type_: type_, defaults to None
        :type type_: PrincipalType, optional
        :param name: name, defaults to None
        :type name: str, optional
        :param company: company, defaults to None
        :type company: str, optional
        :param organization: organization, defaults to None
        :type organization: str, optional
        :param email: email, defaults to None
        :type email: str, optional
        :param phone: phone, defaults to None
        :type phone: str, optional
        :param web_site: web_site, defaults to None
        :type web_site: str, optional
        :param address: address, defaults to None
        :type address: Address, optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if type_ is not None:
            self.type_ = self._enum_matching(type_, PrincipalType.list(), "type_")
        if name is not None:
            self.name = self._define_str("name", name, nullable=True)
        if company is not None:
            self.company = self._define_str("company", company, nullable=True)
        if organization is not None:
            self.organization = self._define_str(
                "organization", organization, nullable=True
            )
        if email is not None:
            self.email = self._define_str("email", email, nullable=True)
        if phone is not None:
            self.phone = self._define_str("phone", phone, nullable=True)
        if web_site is not None:
            self.web_site = self._define_str("web_site", web_site, nullable=True)
        if address is not None:
            self.address = self._define_object(address, Address)
        self._kwargs = kwargs
