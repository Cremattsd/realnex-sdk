# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .user_fields import UserFields
from .user_data_fields import UserDataFields
from .logical_fields import LogicalFields


@JsonMap(
    {
        "investor_type": "investorType",
        "property_type": "propertyType",
        "investment_hold_period": "investmentHoldPeriod",
        "max_age": "maxAge",
        "owned_properties_number": "ownedPropertiesNumber",
        "owned_units_number": "ownedUnitsNumber",
        "last_purchase_date": "lastPurchaseDate",
        "next_sale_date": "nextSaleDate",
        "dev_stage": "devStage",
        "business_type": "businessType",
        "property_subtype": "propertySubtype",
        "target_cap_rate": "targetCapRate",
        "min_price": "minPrice",
        "sf_min": "sfMin",
        "units_min": "unitsMin",
        "purchase_amount": "purchaseAmount",
        "next_loan_maturity": "nextLoanMaturity",
        "go_status": "goStatus",
        "total_engagements": "totalEngagements",
        "target_irr": "targetIrr",
        "max_price": "maxPrice",
        "sf_max": "sfMax",
        "units_max": "unitsMax",
        "estimated_sales_volume": "estimatedSalesVolume",
        "next_lease_expiration": "nextLeaseExpiration",
        "spaces_number": "spacesNumber",
        "current_sf": "currentSf",
        "lease_types": "leaseTypes",
        "alt_company_name": "altCompanyName",
        "user_fields": "userFields",
        "user_data_fields": "userDataFields",
        "logical_fields": "logicalFields",
    }
)
class EditCompanyDetails(BaseModel):
    """EditCompanyDetails

    :param relationship: relationship, defaults to None
    :type relationship: str, optional
    :param investor_type: investor_type, defaults to None
    :type investor_type: str, optional
    :param property_type: property_type, defaults to None
    :type property_type: str, optional
    :param market: market, defaults to None
    :type market: str, optional
    :param investment_hold_period: investment_hold_period, defaults to None
    :type investment_hold_period: float, optional
    :param max_age: max_age, defaults to None
    :type max_age: float, optional
    :param owned_properties_number: owned_properties_number, defaults to None
    :type owned_properties_number: int, optional
    :param owned_units_number: owned_units_number, defaults to None
    :type owned_units_number: int, optional
    :param last_purchase_date: last_purchase_date, defaults to None
    :type last_purchase_date: str, optional
    :param next_sale_date: next_sale_date, defaults to None
    :type next_sale_date: str, optional
    :param dev_stage: dev_stage, defaults to None
    :type dev_stage: str, optional
    :param business_type: business_type, defaults to None
    :type business_type: str, optional
    :param property_subtype: property_subtype, defaults to None
    :type property_subtype: str, optional
    :param submarket: submarket, defaults to None
    :type submarket: str, optional
    :param target_cap_rate: target_cap_rate, defaults to None
    :type target_cap_rate: float, optional
    :param min_price: min_price, defaults to None
    :type min_price: float, optional
    :param sf_min: sf_min, defaults to None
    :type sf_min: float, optional
    :param units_min: units_min, defaults to None
    :type units_min: float, optional
    :param purchase_amount: purchase_amount, defaults to None
    :type purchase_amount: float, optional
    :param next_loan_maturity: next_loan_maturity, defaults to None
    :type next_loan_maturity: str, optional
    :param go_status: go_status, defaults to None
    :type go_status: str, optional
    :param branch: branch, defaults to None
    :type branch: str, optional
    :param total_engagements: total_engagements, defaults to None
    :type total_engagements: int, optional
    :param areas: areas, defaults to None
    :type areas: str, optional
    :param target_irr: target_irr, defaults to None
    :type target_irr: float, optional
    :param max_price: max_price, defaults to None
    :type max_price: float, optional
    :param sf_max: sf_max, defaults to None
    :type sf_max: float, optional
    :param units_max: units_max, defaults to None
    :type units_max: float, optional
    :param estimated_sales_volume: estimated_sales_volume, defaults to None
    :type estimated_sales_volume: float, optional
    :param next_lease_expiration: next_lease_expiration, defaults to None
    :type next_lease_expiration: str, optional
    :param spaces_number: spaces_number, defaults to None
    :type spaces_number: int, optional
    :param current_sf: current_sf, defaults to None
    :type current_sf: float, optional
    :param lease_types: lease_types, defaults to None
    :type lease_types: str, optional
    :param alt_company_name: alt_company_name, defaults to None
    :type alt_company_name: str, optional
    :param fips: fips, defaults to None
    :type fips: str, optional
    :param user_fields: user_fields, defaults to None
    :type user_fields: UserFields, optional
    :param user_data_fields: user_data_fields, defaults to None
    :type user_data_fields: UserDataFields, optional
    :param logical_fields: logical_fields, defaults to None
    :type logical_fields: LogicalFields, optional
    """

    def __init__(
        self,
        relationship: str = None,
        investor_type: str = None,
        property_type: str = None,
        market: str = None,
        investment_hold_period: float = None,
        max_age: float = None,
        owned_properties_number: int = None,
        owned_units_number: int = None,
        last_purchase_date: str = None,
        next_sale_date: str = None,
        dev_stage: str = None,
        business_type: str = None,
        property_subtype: str = None,
        submarket: str = None,
        target_cap_rate: float = None,
        min_price: float = None,
        sf_min: float = None,
        units_min: float = None,
        purchase_amount: float = None,
        next_loan_maturity: str = None,
        go_status: str = None,
        branch: str = None,
        total_engagements: int = None,
        areas: str = None,
        target_irr: float = None,
        max_price: float = None,
        sf_max: float = None,
        units_max: float = None,
        estimated_sales_volume: float = None,
        next_lease_expiration: str = None,
        spaces_number: int = None,
        current_sf: float = None,
        lease_types: str = None,
        alt_company_name: str = None,
        fips: str = None,
        user_fields: UserFields = None,
        user_data_fields: UserDataFields = None,
        logical_fields: LogicalFields = None,
        **kwargs,
    ):
        """EditCompanyDetails

        :param relationship: relationship, defaults to None
        :type relationship: str, optional
        :param investor_type: investor_type, defaults to None
        :type investor_type: str, optional
        :param property_type: property_type, defaults to None
        :type property_type: str, optional
        :param market: market, defaults to None
        :type market: str, optional
        :param investment_hold_period: investment_hold_period, defaults to None
        :type investment_hold_period: float, optional
        :param max_age: max_age, defaults to None
        :type max_age: float, optional
        :param owned_properties_number: owned_properties_number, defaults to None
        :type owned_properties_number: int, optional
        :param owned_units_number: owned_units_number, defaults to None
        :type owned_units_number: int, optional
        :param last_purchase_date: last_purchase_date, defaults to None
        :type last_purchase_date: str, optional
        :param next_sale_date: next_sale_date, defaults to None
        :type next_sale_date: str, optional
        :param dev_stage: dev_stage, defaults to None
        :type dev_stage: str, optional
        :param business_type: business_type, defaults to None
        :type business_type: str, optional
        :param property_subtype: property_subtype, defaults to None
        :type property_subtype: str, optional
        :param submarket: submarket, defaults to None
        :type submarket: str, optional
        :param target_cap_rate: target_cap_rate, defaults to None
        :type target_cap_rate: float, optional
        :param min_price: min_price, defaults to None
        :type min_price: float, optional
        :param sf_min: sf_min, defaults to None
        :type sf_min: float, optional
        :param units_min: units_min, defaults to None
        :type units_min: float, optional
        :param purchase_amount: purchase_amount, defaults to None
        :type purchase_amount: float, optional
        :param next_loan_maturity: next_loan_maturity, defaults to None
        :type next_loan_maturity: str, optional
        :param go_status: go_status, defaults to None
        :type go_status: str, optional
        :param branch: branch, defaults to None
        :type branch: str, optional
        :param total_engagements: total_engagements, defaults to None
        :type total_engagements: int, optional
        :param areas: areas, defaults to None
        :type areas: str, optional
        :param target_irr: target_irr, defaults to None
        :type target_irr: float, optional
        :param max_price: max_price, defaults to None
        :type max_price: float, optional
        :param sf_max: sf_max, defaults to None
        :type sf_max: float, optional
        :param units_max: units_max, defaults to None
        :type units_max: float, optional
        :param estimated_sales_volume: estimated_sales_volume, defaults to None
        :type estimated_sales_volume: float, optional
        :param next_lease_expiration: next_lease_expiration, defaults to None
        :type next_lease_expiration: str, optional
        :param spaces_number: spaces_number, defaults to None
        :type spaces_number: int, optional
        :param current_sf: current_sf, defaults to None
        :type current_sf: float, optional
        :param lease_types: lease_types, defaults to None
        :type lease_types: str, optional
        :param alt_company_name: alt_company_name, defaults to None
        :type alt_company_name: str, optional
        :param fips: fips, defaults to None
        :type fips: str, optional
        :param user_fields: user_fields, defaults to None
        :type user_fields: UserFields, optional
        :param user_data_fields: user_data_fields, defaults to None
        :type user_data_fields: UserDataFields, optional
        :param logical_fields: logical_fields, defaults to None
        :type logical_fields: LogicalFields, optional
        """
        if relationship is not None:
            self.relationship = self._define_str(
                "relationship", relationship, nullable=True
            )
        if investor_type is not None:
            self.investor_type = self._define_str(
                "investor_type", investor_type, nullable=True
            )
        if property_type is not None:
            self.property_type = self._define_str(
                "property_type", property_type, nullable=True
            )
        if market is not None:
            self.market = self._define_str("market", market, nullable=True)
        if investment_hold_period is not None:
            self.investment_hold_period = self._define_number(
                "investment_hold_period", investment_hold_period, nullable=True
            )
        if max_age is not None:
            self.max_age = self._define_number("max_age", max_age, nullable=True)
        if owned_properties_number is not None:
            self.owned_properties_number = self._define_number(
                "owned_properties_number", owned_properties_number, nullable=True
            )
        if owned_units_number is not None:
            self.owned_units_number = self._define_number(
                "owned_units_number", owned_units_number, nullable=True
            )
        if last_purchase_date is not None:
            self.last_purchase_date = self._define_str(
                "last_purchase_date", last_purchase_date, nullable=True
            )
        if next_sale_date is not None:
            self.next_sale_date = self._define_str(
                "next_sale_date", next_sale_date, nullable=True
            )
        if dev_stage is not None:
            self.dev_stage = self._define_str("dev_stage", dev_stage, nullable=True)
        if business_type is not None:
            self.business_type = self._define_str(
                "business_type", business_type, nullable=True
            )
        if property_subtype is not None:
            self.property_subtype = self._define_str(
                "property_subtype", property_subtype, nullable=True
            )
        if submarket is not None:
            self.submarket = self._define_str("submarket", submarket, nullable=True)
        if target_cap_rate is not None:
            self.target_cap_rate = self._define_number(
                "target_cap_rate", target_cap_rate, nullable=True
            )
        if min_price is not None:
            self.min_price = self._define_number("min_price", min_price, nullable=True)
        if sf_min is not None:
            self.sf_min = self._define_number("sf_min", sf_min, nullable=True)
        if units_min is not None:
            self.units_min = self._define_number("units_min", units_min, nullable=True)
        if purchase_amount is not None:
            self.purchase_amount = self._define_number(
                "purchase_amount", purchase_amount, nullable=True
            )
        if next_loan_maturity is not None:
            self.next_loan_maturity = self._define_str(
                "next_loan_maturity", next_loan_maturity, nullable=True
            )
        if go_status is not None:
            self.go_status = self._define_str("go_status", go_status, nullable=True)
        if branch is not None:
            self.branch = self._define_str("branch", branch, nullable=True)
        if total_engagements is not None:
            self.total_engagements = self._define_number(
                "total_engagements", total_engagements, nullable=True
            )
        if areas is not None:
            self.areas = self._define_str("areas", areas, nullable=True)
        if target_irr is not None:
            self.target_irr = self._define_number(
                "target_irr", target_irr, nullable=True
            )
        if max_price is not None:
            self.max_price = self._define_number("max_price", max_price, nullable=True)
        if sf_max is not None:
            self.sf_max = self._define_number("sf_max", sf_max, nullable=True)
        if units_max is not None:
            self.units_max = self._define_number("units_max", units_max, nullable=True)
        if estimated_sales_volume is not None:
            self.estimated_sales_volume = self._define_number(
                "estimated_sales_volume", estimated_sales_volume, nullable=True
            )
        if next_lease_expiration is not None:
            self.next_lease_expiration = self._define_str(
                "next_lease_expiration", next_lease_expiration, nullable=True
            )
        if spaces_number is not None:
            self.spaces_number = self._define_number(
                "spaces_number", spaces_number, nullable=True
            )
        if current_sf is not None:
            self.current_sf = self._define_number(
                "current_sf", current_sf, nullable=True
            )
        if lease_types is not None:
            self.lease_types = self._define_str(
                "lease_types", lease_types, nullable=True
            )
        if alt_company_name is not None:
            self.alt_company_name = self._define_str(
                "alt_company_name", alt_company_name, nullable=True
            )
        if fips is not None:
            self.fips = self._define_str("fips", fips, nullable=True)
        if user_fields is not None:
            self.user_fields = self._define_object(user_fields, UserFields)
        if user_data_fields is not None:
            self.user_data_fields = self._define_object(
                user_data_fields, UserDataFields
            )
        if logical_fields is not None:
            self.logical_fields = self._define_object(logical_fields, LogicalFields)
        self._kwargs = kwargs
