# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .int32_key_name_object import Int32KeyNameObject
from .object_link import ObjectLink
from .event_object import EventObject
from .event_participant import EventParticipant


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "start_date": "startDate",
        "end_date": "endDate",
        "time_zone": "timeZone",
        "start_offset": "startOffset",
        "all_day": "allDay",
        "alarm_minutes": "alarmMinutes",
        "event_type": "eventType",
        "event_objects": "eventObjects",
        "event_participants": "eventParticipants",
    }
)
class EventDetails(BaseModel):
    """EventDetails

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param start_date: start_date, defaults to None
    :type start_date: str, optional
    :param end_date: end_date, defaults to None
    :type end_date: str, optional
    :param time_zone: time_zone, defaults to None
    :type time_zone: str, optional
    :param start_offset: start_offset, defaults to None
    :type start_offset: int, optional
    :param timeless: timeless, defaults to None
    :type timeless: bool, optional
    :param all_day: all_day, defaults to None
    :type all_day: bool, optional
    :param finished: finished, defaults to None
    :type finished: bool, optional
    :param alarm_minutes: alarm_minutes, defaults to None
    :type alarm_minutes: int, optional
    :param event_type: event_type, defaults to None
    :type event_type: Int32KeyNameObject, optional
    :param priority: priority, defaults to None
    :type priority: Int32KeyNameObject, optional
    :param subject: subject, defaults to None
    :type subject: str, optional
    :param project: project, defaults to None
    :type project: ObjectLink, optional
    :param color: color, defaults to None
    :type color: str, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    :param event_objects: event_objects, defaults to None
    :type event_objects: List[EventObject], optional
    :param event_participants: event_participants, defaults to None
    :type event_participants: List[EventParticipant], optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        start_date: str = None,
        end_date: str = None,
        time_zone: str = None,
        start_offset: int = None,
        timeless: bool = None,
        all_day: bool = None,
        finished: bool = None,
        alarm_minutes: int = None,
        event_type: Int32KeyNameObject = None,
        priority: Int32KeyNameObject = None,
        subject: str = None,
        project: ObjectLink = None,
        color: str = None,
        notes: str = None,
        event_objects: List[EventObject] = None,
        event_participants: List[EventParticipant] = None,
        **kwargs,
    ):
        """EventDetails

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param start_date: start_date, defaults to None
        :type start_date: str, optional
        :param end_date: end_date, defaults to None
        :type end_date: str, optional
        :param time_zone: time_zone, defaults to None
        :type time_zone: str, optional
        :param start_offset: start_offset, defaults to None
        :type start_offset: int, optional
        :param timeless: timeless, defaults to None
        :type timeless: bool, optional
        :param all_day: all_day, defaults to None
        :type all_day: bool, optional
        :param finished: finished, defaults to None
        :type finished: bool, optional
        :param alarm_minutes: alarm_minutes, defaults to None
        :type alarm_minutes: int, optional
        :param event_type: event_type, defaults to None
        :type event_type: Int32KeyNameObject, optional
        :param priority: priority, defaults to None
        :type priority: Int32KeyNameObject, optional
        :param subject: subject, defaults to None
        :type subject: str, optional
        :param project: project, defaults to None
        :type project: ObjectLink, optional
        :param color: color, defaults to None
        :type color: str, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        :param event_objects: event_objects, defaults to None
        :type event_objects: List[EventObject], optional
        :param event_participants: event_participants, defaults to None
        :type event_participants: List[EventParticipant], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = self._define_str("user_key", user_key, nullable=True)
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if time_zone is not None:
            self.time_zone = self._define_str("time_zone", time_zone, nullable=True)
        if start_offset is not None:
            self.start_offset = self._define_number(
                "start_offset", start_offset, nullable=True
            )
        if timeless is not None:
            self.timeless = timeless
        if all_day is not None:
            self.all_day = all_day
        if finished is not None:
            self.finished = finished
        if alarm_minutes is not None:
            self.alarm_minutes = self._define_number(
                "alarm_minutes", alarm_minutes, nullable=True
            )
        if event_type is not None:
            self.event_type = self._define_object(event_type, Int32KeyNameObject)
        if priority is not None:
            self.priority = self._define_object(priority, Int32KeyNameObject)
        if subject is not None:
            self.subject = self._define_str("subject", subject, nullable=True)
        if project is not None:
            self.project = self._define_object(project, ObjectLink)
        if color is not None:
            self.color = self._define_str("color", color, nullable=True)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        if event_objects is not None:
            self.event_objects = self._define_list(event_objects, EventObject)
        if event_participants is not None:
            self.event_participants = self._define_list(
                event_participants, EventParticipant
            )
        self._kwargs = kwargs
