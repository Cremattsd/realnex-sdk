# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .guid_key_name_object import GuidKeyNameObject
from .object_link import ObjectLink
from .principal_link import PrincipalLink
from .comp_property import CompProperty
from .comp_contact import CompContact
from .sale_comp_details import SaleCompDetails
from .sale_comp_usage import SaleCompUsage
from .sale_comp_listing import SaleCompListing


@JsonMap(
    {
        "object_groups": "objectGroups",
        "property_link": "propertyLink",
        "buyer_principal": "buyerPrincipal",
        "seller_principal": "sellerPrincipal",
        "procuring_principal": "procuringPrincipal",
        "listing_principal": "listingPrincipal",
        "buyer_contact": "buyerContact",
        "seller_contact": "sellerContact",
        "procuring_contact": "procuringContact",
        "listing_contact": "listingContact",
    }
)
class SaleComp(BaseModel):
    """SaleComp

    :param user: user, defaults to None
    :type user: GuidKeyNameObject, optional
    :param team: team, defaults to None
    :type team: GuidKeyNameObject, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[GuidKeyNameObject], optional
    :param key: key, defaults to None
    :type key: str, optional
    :param property_link: property_link, defaults to None
    :type property_link: ObjectLink, optional
    :param buyer_principal: buyer_principal, defaults to None
    :type buyer_principal: PrincipalLink, optional
    :param seller_principal: seller_principal, defaults to None
    :type seller_principal: PrincipalLink, optional
    :param procuring_principal: procuring_principal, defaults to None
    :type procuring_principal: PrincipalLink, optional
    :param listing_principal: listing_principal, defaults to None
    :type listing_principal: PrincipalLink, optional
    :param property: property, defaults to None
    :type property: CompProperty, optional
    :param buyer_contact: buyer_contact, defaults to None
    :type buyer_contact: CompContact, optional
    :param seller_contact: seller_contact, defaults to None
    :type seller_contact: CompContact, optional
    :param procuring_contact: procuring_contact, defaults to None
    :type procuring_contact: CompContact, optional
    :param listing_contact: listing_contact, defaults to None
    :type listing_contact: CompContact, optional
    :param details: details, defaults to None
    :type details: SaleCompDetails, optional
    :param usage: usage, defaults to None
    :type usage: SaleCompUsage, optional
    :param listing: listing, defaults to None
    :type listing: SaleCompListing, optional
    """

    def __init__(
        self,
        user: GuidKeyNameObject = None,
        team: GuidKeyNameObject = None,
        notes: str = None,
        object_groups: List[GuidKeyNameObject] = None,
        key: str = None,
        property_link: ObjectLink = None,
        buyer_principal: PrincipalLink = None,
        seller_principal: PrincipalLink = None,
        procuring_principal: PrincipalLink = None,
        listing_principal: PrincipalLink = None,
        property: CompProperty = None,
        buyer_contact: CompContact = None,
        seller_contact: CompContact = None,
        procuring_contact: CompContact = None,
        listing_contact: CompContact = None,
        details: SaleCompDetails = None,
        usage: SaleCompUsage = None,
        listing: SaleCompListing = None,
        **kwargs,
    ):
        """SaleComp

        :param user: user, defaults to None
        :type user: GuidKeyNameObject, optional
        :param team: team, defaults to None
        :type team: GuidKeyNameObject, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[GuidKeyNameObject], optional
        :param key: key, defaults to None
        :type key: str, optional
        :param property_link: property_link, defaults to None
        :type property_link: ObjectLink, optional
        :param buyer_principal: buyer_principal, defaults to None
        :type buyer_principal: PrincipalLink, optional
        :param seller_principal: seller_principal, defaults to None
        :type seller_principal: PrincipalLink, optional
        :param procuring_principal: procuring_principal, defaults to None
        :type procuring_principal: PrincipalLink, optional
        :param listing_principal: listing_principal, defaults to None
        :type listing_principal: PrincipalLink, optional
        :param property: property, defaults to None
        :type property: CompProperty, optional
        :param buyer_contact: buyer_contact, defaults to None
        :type buyer_contact: CompContact, optional
        :param seller_contact: seller_contact, defaults to None
        :type seller_contact: CompContact, optional
        :param procuring_contact: procuring_contact, defaults to None
        :type procuring_contact: CompContact, optional
        :param listing_contact: listing_contact, defaults to None
        :type listing_contact: CompContact, optional
        :param details: details, defaults to None
        :type details: SaleCompDetails, optional
        :param usage: usage, defaults to None
        :type usage: SaleCompUsage, optional
        :param listing: listing, defaults to None
        :type listing: SaleCompListing, optional
        """
        if user is not None:
            self.user = self._define_object(user, GuidKeyNameObject)
        if team is not None:
            self.team = self._define_object(team, GuidKeyNameObject)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, GuidKeyNameObject)
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if property_link is not None:
            self.property_link = self._define_object(property_link, ObjectLink)
        if buyer_principal is not None:
            self.buyer_principal = self._define_object(buyer_principal, PrincipalLink)
        if seller_principal is not None:
            self.seller_principal = self._define_object(seller_principal, PrincipalLink)
        if procuring_principal is not None:
            self.procuring_principal = self._define_object(
                procuring_principal, PrincipalLink
            )
        if listing_principal is not None:
            self.listing_principal = self._define_object(
                listing_principal, PrincipalLink
            )
        if property is not None:
            self.property = self._define_object(property, CompProperty)
        if buyer_contact is not None:
            self.buyer_contact = self._define_object(buyer_contact, CompContact)
        if seller_contact is not None:
            self.seller_contact = self._define_object(seller_contact, CompContact)
        if procuring_contact is not None:
            self.procuring_contact = self._define_object(procuring_contact, CompContact)
        if listing_contact is not None:
            self.listing_contact = self._define_object(listing_contact, CompContact)
        if details is not None:
            self.details = self._define_object(details, SaleCompDetails)
        if usage is not None:
            self.usage = self._define_object(usage, SaleCompUsage)
        if listing is not None:
            self.listing = self._define_object(listing, SaleCompListing)
        self._kwargs = kwargs
