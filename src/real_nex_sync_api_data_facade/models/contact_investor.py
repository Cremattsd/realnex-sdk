# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .user_fields import UserFields
from .user_data_fields import UserDataFields
from .logical_fields import LogicalFields


@JsonMap(
    {
        "office_rating": "officeRating",
        "office_min": "officeMin",
        "office_max": "officeMax",
        "industrial_rating": "industrialRating",
        "industrial_min": "industrialMin",
        "industrial_max": "industrialMax",
        "retail_rating": "retailRating",
        "retail_min": "retailMin",
        "retail_max": "retailMax",
        "land_rating": "landRating",
        "land_min": "landMin",
        "land_max": "landMax",
        "apartment_rating": "apartmentRating",
        "apartment_min": "apartmentMin",
        "apartment_max": "apartmentMax",
        "hotel_rating": "hotelRating",
        "hotel_min": "hotelMin",
        "hotel_max": "hotelMax",
        "residential_rating": "residentialRating",
        "residential_min": "residentialMin",
        "residential_max": "residentialMax",
        "other_rating": "otherRating",
        "other_min": "otherMin",
        "other_max": "otherMax",
        "min_price": "minPrice",
        "max_price": "maxPrice",
        "max_age": "maxAge",
        "last_purchase": "lastPurchase",
        "last_purchase_date": "lastPurchaseDate",
        "last_purchase_price": "lastPurchasePrice",
        "geographic_description": "geographicDescription",
        "hold_period": "holdPeriod",
        "investor_type": "investorType",
        "joint_venture": "jointVenture",
        "triple_net": "tripleNet",
        "single_tenant": "singleTenant",
        "multiple_tenant": "multipleTenant",
        "single_family": "singleFamily",
        "credit_tenant": "creditTenant",
        "num_properties": "numProperties",
        "business_type": "businessType",
        "property_type": "propertyType",
        "user_fields": "userFields",
        "user_data_fields": "userDataFields",
        "logical_fields": "logicalFields",
    }
)
class ContactInvestor(BaseModel):
    """ContactInvestor

    :param office_rating: office_rating, defaults to None
    :type office_rating: str, optional
    :param office_min: office_min, defaults to None
    :type office_min: float, optional
    :param office_max: office_max, defaults to None
    :type office_max: float, optional
    :param industrial_rating: industrial_rating, defaults to None
    :type industrial_rating: str, optional
    :param industrial_min: industrial_min, defaults to None
    :type industrial_min: float, optional
    :param industrial_max: industrial_max, defaults to None
    :type industrial_max: float, optional
    :param retail_rating: retail_rating, defaults to None
    :type retail_rating: str, optional
    :param retail_min: retail_min, defaults to None
    :type retail_min: float, optional
    :param retail_max: retail_max, defaults to None
    :type retail_max: float, optional
    :param land_rating: land_rating, defaults to None
    :type land_rating: str, optional
    :param land_min: land_min, defaults to None
    :type land_min: float, optional
    :param land_max: land_max, defaults to None
    :type land_max: float, optional
    :param apartment_rating: apartment_rating, defaults to None
    :type apartment_rating: str, optional
    :param apartment_min: apartment_min, defaults to None
    :type apartment_min: float, optional
    :param apartment_max: apartment_max, defaults to None
    :type apartment_max: float, optional
    :param hotel_rating: hotel_rating, defaults to None
    :type hotel_rating: str, optional
    :param hotel_min: hotel_min, defaults to None
    :type hotel_min: float, optional
    :param hotel_max: hotel_max, defaults to None
    :type hotel_max: float, optional
    :param residential_rating: residential_rating, defaults to None
    :type residential_rating: str, optional
    :param residential_min: residential_min, defaults to None
    :type residential_min: float, optional
    :param residential_max: residential_max, defaults to None
    :type residential_max: float, optional
    :param other_rating: other_rating, defaults to None
    :type other_rating: str, optional
    :param other_min: other_min, defaults to None
    :type other_min: float, optional
    :param other_max: other_max, defaults to None
    :type other_max: float, optional
    :param min_price: min_price, defaults to None
    :type min_price: float, optional
    :param max_price: max_price, defaults to None
    :type max_price: float, optional
    :param max_age: max_age, defaults to None
    :type max_age: int, optional
    :param last_purchase: last_purchase, defaults to None
    :type last_purchase: str, optional
    :param last_purchase_date: last_purchase_date, defaults to None
    :type last_purchase_date: str, optional
    :param last_purchase_price: last_purchase_price, defaults to None
    :type last_purchase_price: float, optional
    :param areas: areas, defaults to None
    :type areas: str, optional
    :param geographic_description: geographic_description, defaults to None
    :type geographic_description: str, optional
    :param hold_period: hold_period, defaults to None
    :type hold_period: int, optional
    :param investor_type: investor_type, defaults to None
    :type investor_type: str, optional
    :param reference: reference, defaults to None
    :type reference: str, optional
    :param broker: broker, defaults to None
    :type broker: bool, optional
    :param rehabs: rehabs, defaults to None
    :type rehabs: bool, optional
    :param joint_venture: joint_venture, defaults to None
    :type joint_venture: bool, optional
    :param triple_net: triple_net, defaults to None
    :type triple_net: bool, optional
    :param single_tenant: single_tenant, defaults to None
    :type single_tenant: bool, optional
    :param multiple_tenant: multiple_tenant, defaults to None
    :type multiple_tenant: bool, optional
    :param single_family: single_family, defaults to None
    :type single_family: bool, optional
    :param credit_tenant: credit_tenant, defaults to None
    :type credit_tenant: bool, optional
    :param num_properties: num_properties, defaults to None
    :type num_properties: int, optional
    :param business_type: business_type, defaults to None
    :type business_type: str, optional
    :param submarket: submarket, defaults to None
    :type submarket: str, optional
    :param property_type: property_type, defaults to None
    :type property_type: str, optional
    :param market: market, defaults to None
    :type market: str, optional
    :param user_fields: user_fields, defaults to None
    :type user_fields: UserFields, optional
    :param user_data_fields: user_data_fields, defaults to None
    :type user_data_fields: UserDataFields, optional
    :param logical_fields: logical_fields, defaults to None
    :type logical_fields: LogicalFields, optional
    """

    def __init__(
        self,
        office_rating: str = None,
        office_min: float = None,
        office_max: float = None,
        industrial_rating: str = None,
        industrial_min: float = None,
        industrial_max: float = None,
        retail_rating: str = None,
        retail_min: float = None,
        retail_max: float = None,
        land_rating: str = None,
        land_min: float = None,
        land_max: float = None,
        apartment_rating: str = None,
        apartment_min: float = None,
        apartment_max: float = None,
        hotel_rating: str = None,
        hotel_min: float = None,
        hotel_max: float = None,
        residential_rating: str = None,
        residential_min: float = None,
        residential_max: float = None,
        other_rating: str = None,
        other_min: float = None,
        other_max: float = None,
        min_price: float = None,
        max_price: float = None,
        max_age: int = None,
        last_purchase: str = None,
        last_purchase_date: str = None,
        last_purchase_price: float = None,
        areas: str = None,
        geographic_description: str = None,
        hold_period: int = None,
        investor_type: str = None,
        reference: str = None,
        broker: bool = None,
        rehabs: bool = None,
        joint_venture: bool = None,
        triple_net: bool = None,
        single_tenant: bool = None,
        multiple_tenant: bool = None,
        single_family: bool = None,
        credit_tenant: bool = None,
        num_properties: int = None,
        business_type: str = None,
        submarket: str = None,
        property_type: str = None,
        market: str = None,
        user_fields: UserFields = None,
        user_data_fields: UserDataFields = None,
        logical_fields: LogicalFields = None,
        **kwargs,
    ):
        """ContactInvestor

        :param office_rating: office_rating, defaults to None
        :type office_rating: str, optional
        :param office_min: office_min, defaults to None
        :type office_min: float, optional
        :param office_max: office_max, defaults to None
        :type office_max: float, optional
        :param industrial_rating: industrial_rating, defaults to None
        :type industrial_rating: str, optional
        :param industrial_min: industrial_min, defaults to None
        :type industrial_min: float, optional
        :param industrial_max: industrial_max, defaults to None
        :type industrial_max: float, optional
        :param retail_rating: retail_rating, defaults to None
        :type retail_rating: str, optional
        :param retail_min: retail_min, defaults to None
        :type retail_min: float, optional
        :param retail_max: retail_max, defaults to None
        :type retail_max: float, optional
        :param land_rating: land_rating, defaults to None
        :type land_rating: str, optional
        :param land_min: land_min, defaults to None
        :type land_min: float, optional
        :param land_max: land_max, defaults to None
        :type land_max: float, optional
        :param apartment_rating: apartment_rating, defaults to None
        :type apartment_rating: str, optional
        :param apartment_min: apartment_min, defaults to None
        :type apartment_min: float, optional
        :param apartment_max: apartment_max, defaults to None
        :type apartment_max: float, optional
        :param hotel_rating: hotel_rating, defaults to None
        :type hotel_rating: str, optional
        :param hotel_min: hotel_min, defaults to None
        :type hotel_min: float, optional
        :param hotel_max: hotel_max, defaults to None
        :type hotel_max: float, optional
        :param residential_rating: residential_rating, defaults to None
        :type residential_rating: str, optional
        :param residential_min: residential_min, defaults to None
        :type residential_min: float, optional
        :param residential_max: residential_max, defaults to None
        :type residential_max: float, optional
        :param other_rating: other_rating, defaults to None
        :type other_rating: str, optional
        :param other_min: other_min, defaults to None
        :type other_min: float, optional
        :param other_max: other_max, defaults to None
        :type other_max: float, optional
        :param min_price: min_price, defaults to None
        :type min_price: float, optional
        :param max_price: max_price, defaults to None
        :type max_price: float, optional
        :param max_age: max_age, defaults to None
        :type max_age: int, optional
        :param last_purchase: last_purchase, defaults to None
        :type last_purchase: str, optional
        :param last_purchase_date: last_purchase_date, defaults to None
        :type last_purchase_date: str, optional
        :param last_purchase_price: last_purchase_price, defaults to None
        :type last_purchase_price: float, optional
        :param areas: areas, defaults to None
        :type areas: str, optional
        :param geographic_description: geographic_description, defaults to None
        :type geographic_description: str, optional
        :param hold_period: hold_period, defaults to None
        :type hold_period: int, optional
        :param investor_type: investor_type, defaults to None
        :type investor_type: str, optional
        :param reference: reference, defaults to None
        :type reference: str, optional
        :param broker: broker, defaults to None
        :type broker: bool, optional
        :param rehabs: rehabs, defaults to None
        :type rehabs: bool, optional
        :param joint_venture: joint_venture, defaults to None
        :type joint_venture: bool, optional
        :param triple_net: triple_net, defaults to None
        :type triple_net: bool, optional
        :param single_tenant: single_tenant, defaults to None
        :type single_tenant: bool, optional
        :param multiple_tenant: multiple_tenant, defaults to None
        :type multiple_tenant: bool, optional
        :param single_family: single_family, defaults to None
        :type single_family: bool, optional
        :param credit_tenant: credit_tenant, defaults to None
        :type credit_tenant: bool, optional
        :param num_properties: num_properties, defaults to None
        :type num_properties: int, optional
        :param business_type: business_type, defaults to None
        :type business_type: str, optional
        :param submarket: submarket, defaults to None
        :type submarket: str, optional
        :param property_type: property_type, defaults to None
        :type property_type: str, optional
        :param market: market, defaults to None
        :type market: str, optional
        :param user_fields: user_fields, defaults to None
        :type user_fields: UserFields, optional
        :param user_data_fields: user_data_fields, defaults to None
        :type user_data_fields: UserDataFields, optional
        :param logical_fields: logical_fields, defaults to None
        :type logical_fields: LogicalFields, optional
        """
        if office_rating is not None:
            self.office_rating = self._define_str(
                "office_rating", office_rating, nullable=True
            )
        if office_min is not None:
            self.office_min = self._define_number(
                "office_min", office_min, nullable=True
            )
        if office_max is not None:
            self.office_max = self._define_number(
                "office_max", office_max, nullable=True
            )
        if industrial_rating is not None:
            self.industrial_rating = self._define_str(
                "industrial_rating", industrial_rating, nullable=True
            )
        if industrial_min is not None:
            self.industrial_min = self._define_number(
                "industrial_min", industrial_min, nullable=True
            )
        if industrial_max is not None:
            self.industrial_max = self._define_number(
                "industrial_max", industrial_max, nullable=True
            )
        if retail_rating is not None:
            self.retail_rating = self._define_str(
                "retail_rating", retail_rating, nullable=True
            )
        if retail_min is not None:
            self.retail_min = self._define_number(
                "retail_min", retail_min, nullable=True
            )
        if retail_max is not None:
            self.retail_max = self._define_number(
                "retail_max", retail_max, nullable=True
            )
        if land_rating is not None:
            self.land_rating = self._define_str(
                "land_rating", land_rating, nullable=True
            )
        if land_min is not None:
            self.land_min = self._define_number("land_min", land_min, nullable=True)
        if land_max is not None:
            self.land_max = self._define_number("land_max", land_max, nullable=True)
        if apartment_rating is not None:
            self.apartment_rating = self._define_str(
                "apartment_rating", apartment_rating, nullable=True
            )
        if apartment_min is not None:
            self.apartment_min = self._define_number(
                "apartment_min", apartment_min, nullable=True
            )
        if apartment_max is not None:
            self.apartment_max = self._define_number(
                "apartment_max", apartment_max, nullable=True
            )
        if hotel_rating is not None:
            self.hotel_rating = self._define_str(
                "hotel_rating", hotel_rating, nullable=True
            )
        if hotel_min is not None:
            self.hotel_min = self._define_number("hotel_min", hotel_min, nullable=True)
        if hotel_max is not None:
            self.hotel_max = self._define_number("hotel_max", hotel_max, nullable=True)
        if residential_rating is not None:
            self.residential_rating = self._define_str(
                "residential_rating", residential_rating, nullable=True
            )
        if residential_min is not None:
            self.residential_min = self._define_number(
                "residential_min", residential_min, nullable=True
            )
        if residential_max is not None:
            self.residential_max = self._define_number(
                "residential_max", residential_max, nullable=True
            )
        if other_rating is not None:
            self.other_rating = self._define_str(
                "other_rating", other_rating, nullable=True
            )
        if other_min is not None:
            self.other_min = self._define_number("other_min", other_min, nullable=True)
        if other_max is not None:
            self.other_max = self._define_number("other_max", other_max, nullable=True)
        if min_price is not None:
            self.min_price = self._define_number("min_price", min_price, nullable=True)
        if max_price is not None:
            self.max_price = self._define_number("max_price", max_price, nullable=True)
        if max_age is not None:
            self.max_age = self._define_number("max_age", max_age, nullable=True)
        if last_purchase is not None:
            self.last_purchase = self._define_str(
                "last_purchase", last_purchase, nullable=True
            )
        if last_purchase_date is not None:
            self.last_purchase_date = self._define_str(
                "last_purchase_date", last_purchase_date, nullable=True
            )
        if last_purchase_price is not None:
            self.last_purchase_price = self._define_number(
                "last_purchase_price", last_purchase_price, nullable=True
            )
        if areas is not None:
            self.areas = self._define_str("areas", areas, nullable=True)
        if geographic_description is not None:
            self.geographic_description = self._define_str(
                "geographic_description", geographic_description, nullable=True
            )
        if hold_period is not None:
            self.hold_period = self._define_number(
                "hold_period", hold_period, nullable=True
            )
        if investor_type is not None:
            self.investor_type = self._define_str(
                "investor_type", investor_type, nullable=True
            )
        if reference is not None:
            self.reference = self._define_str("reference", reference, nullable=True)
        if broker is not None:
            self.broker = broker
        if rehabs is not None:
            self.rehabs = rehabs
        if joint_venture is not None:
            self.joint_venture = joint_venture
        if triple_net is not None:
            self.triple_net = triple_net
        if single_tenant is not None:
            self.single_tenant = single_tenant
        if multiple_tenant is not None:
            self.multiple_tenant = multiple_tenant
        if single_family is not None:
            self.single_family = single_family
        if credit_tenant is not None:
            self.credit_tenant = credit_tenant
        if num_properties is not None:
            self.num_properties = self._define_number(
                "num_properties", num_properties, nullable=True
            )
        if business_type is not None:
            self.business_type = self._define_str(
                "business_type", business_type, nullable=True
            )
        if submarket is not None:
            self.submarket = self._define_str("submarket", submarket, nullable=True)
        if property_type is not None:
            self.property_type = self._define_str(
                "property_type", property_type, nullable=True
            )
        if market is not None:
            self.market = self._define_str("market", market, nullable=True)
        if user_fields is not None:
            self.user_fields = self._define_object(user_fields, UserFields)
        if user_data_fields is not None:
            self.user_data_fields = self._define_object(
                user_data_fields, UserDataFields
            )
        if logical_fields is not None:
            self.logical_fields = self._define_object(logical_fields, LogicalFields)
        self._kwargs = kwargs
