# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .address import Address
from .history import History
from .object_group_list_item import ObjectGroupListItem


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "property_name": "propertyName",
        "property_type": "propertyType",
        "address_number1": "addressNumber1",
        "address_number2": "addressNumber2",
        "address_direction": "addressDirection",
        "address_street": "addressStreet",
        "address_suite": "addressSuite",
        "for_sale": "forSale",
        "for_lease": "forLease",
        "construction_type": "constructionType",
        "owner_occupied": "ownerOccupied",
        "cross_streets": "crossStreets",
        "building_class": "buildingClass",
        "building_id": "buildingId",
        "last_trans_price": "lastTransPrice",
        "last_trans_date": "lastTransDate",
        "map_coord": "mapCoord",
        "sale_price": "salePrice",
        "min_per_sqft": "minPerSqft",
        "cap_rate": "capRate",
        "cash_on_cash": "cashOnCash",
        "year_built": "yearBuilt",
        "parking_ratio": "parkingRatio",
        "web_site": "webSite",
        "last_activity": "lastActivity",
        "object_groups": "objectGroups",
    }
)
class PropertyListItem(BaseModel):
    """PropertyListItem

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param property_name: property_name, defaults to None
    :type property_name: str, optional
    :param address: address, defaults to None
    :type address: Address, optional
    :param property_type: property_type, defaults to None
    :type property_type: str, optional
    :param address_number1: address_number1, defaults to None
    :type address_number1: str, optional
    :param address_number2: address_number2, defaults to None
    :type address_number2: str, optional
    :param address_direction: address_direction, defaults to None
    :type address_direction: str, optional
    :param address_street: address_street, defaults to None
    :type address_street: str, optional
    :param address_suite: address_suite, defaults to None
    :type address_suite: str, optional
    :param for_sale: for_sale, defaults to None
    :type for_sale: bool, optional
    :param for_lease: for_lease, defaults to None
    :type for_lease: bool, optional
    :param assessed: assessed, defaults to None
    :type assessed: float, optional
    :param construction_type: construction_type, defaults to None
    :type construction_type: str, optional
    :param owner_occupied: owner_occupied, defaults to None
    :type owner_occupied: bool, optional
    :param cross_streets: cross_streets, defaults to None
    :type cross_streets: str, optional
    :param building_class: building_class, defaults to None
    :type building_class: str, optional
    :param location: location, defaults to None
    :type location: str, optional
    :param description: description, defaults to None
    :type description: str, optional
    :param building_id: building_id, defaults to None
    :type building_id: str, optional
    :param last_trans_price: last_trans_price, defaults to None
    :type last_trans_price: float, optional
    :param last_trans_date: last_trans_date, defaults to None
    :type last_trans_date: str, optional
    :param map_coord: map_coord, defaults to None
    :type map_coord: str, optional
    :param acres: acres, defaults to None
    :type acres: float, optional
    :param price: price, defaults to None
    :type price: float, optional
    :param units: units, defaults to None
    :type units: int, optional
    :param sqft: sqft, defaults to None
    :type sqft: float, optional
    :param sale_price: sale_price, defaults to None
    :type sale_price: float, optional
    :param min_per_sqft: min_per_sqft, defaults to None
    :type min_per_sqft: float, optional
    :param cap_rate: cap_rate, defaults to None
    :type cap_rate: float, optional
    :param cash_on_cash: cash_on_cash, defaults to None
    :type cash_on_cash: float, optional
    :param year_built: year_built, defaults to None
    :type year_built: int, optional
    :param parcel: parcel, defaults to None
    :type parcel: str, optional
    :param stories: stories, defaults to None
    :type stories: int, optional
    :param market: market, defaults to None
    :type market: str, optional
    :param submarket: submarket, defaults to None
    :type submarket: str, optional
    :param parking_ratio: parking_ratio, defaults to None
    :type parking_ratio: str, optional
    :param zoning: zoning, defaults to None
    :type zoning: str, optional
    :param web_site: web_site, defaults to None
    :type web_site: str, optional
    :param last_activity: last_activity, defaults to None
    :type last_activity: History, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[ObjectGroupListItem], optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        property_name: str = None,
        address: Address = None,
        property_type: str = None,
        address_number1: str = None,
        address_number2: str = None,
        address_direction: str = None,
        address_street: str = None,
        address_suite: str = None,
        for_sale: bool = None,
        for_lease: bool = None,
        assessed: float = None,
        construction_type: str = None,
        owner_occupied: bool = None,
        cross_streets: str = None,
        building_class: str = None,
        location: str = None,
        description: str = None,
        building_id: str = None,
        last_trans_price: float = None,
        last_trans_date: str = None,
        map_coord: str = None,
        acres: float = None,
        price: float = None,
        units: int = None,
        sqft: float = None,
        sale_price: float = None,
        min_per_sqft: float = None,
        cap_rate: float = None,
        cash_on_cash: float = None,
        year_built: int = None,
        parcel: str = None,
        stories: int = None,
        market: str = None,
        submarket: str = None,
        parking_ratio: str = None,
        zoning: str = None,
        web_site: str = None,
        last_activity: History = None,
        object_groups: List[ObjectGroupListItem] = None,
        **kwargs,
    ):
        """PropertyListItem

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param property_name: property_name, defaults to None
        :type property_name: str, optional
        :param address: address, defaults to None
        :type address: Address, optional
        :param property_type: property_type, defaults to None
        :type property_type: str, optional
        :param address_number1: address_number1, defaults to None
        :type address_number1: str, optional
        :param address_number2: address_number2, defaults to None
        :type address_number2: str, optional
        :param address_direction: address_direction, defaults to None
        :type address_direction: str, optional
        :param address_street: address_street, defaults to None
        :type address_street: str, optional
        :param address_suite: address_suite, defaults to None
        :type address_suite: str, optional
        :param for_sale: for_sale, defaults to None
        :type for_sale: bool, optional
        :param for_lease: for_lease, defaults to None
        :type for_lease: bool, optional
        :param assessed: assessed, defaults to None
        :type assessed: float, optional
        :param construction_type: construction_type, defaults to None
        :type construction_type: str, optional
        :param owner_occupied: owner_occupied, defaults to None
        :type owner_occupied: bool, optional
        :param cross_streets: cross_streets, defaults to None
        :type cross_streets: str, optional
        :param building_class: building_class, defaults to None
        :type building_class: str, optional
        :param location: location, defaults to None
        :type location: str, optional
        :param description: description, defaults to None
        :type description: str, optional
        :param building_id: building_id, defaults to None
        :type building_id: str, optional
        :param last_trans_price: last_trans_price, defaults to None
        :type last_trans_price: float, optional
        :param last_trans_date: last_trans_date, defaults to None
        :type last_trans_date: str, optional
        :param map_coord: map_coord, defaults to None
        :type map_coord: str, optional
        :param acres: acres, defaults to None
        :type acres: float, optional
        :param price: price, defaults to None
        :type price: float, optional
        :param units: units, defaults to None
        :type units: int, optional
        :param sqft: sqft, defaults to None
        :type sqft: float, optional
        :param sale_price: sale_price, defaults to None
        :type sale_price: float, optional
        :param min_per_sqft: min_per_sqft, defaults to None
        :type min_per_sqft: float, optional
        :param cap_rate: cap_rate, defaults to None
        :type cap_rate: float, optional
        :param cash_on_cash: cash_on_cash, defaults to None
        :type cash_on_cash: float, optional
        :param year_built: year_built, defaults to None
        :type year_built: int, optional
        :param parcel: parcel, defaults to None
        :type parcel: str, optional
        :param stories: stories, defaults to None
        :type stories: int, optional
        :param market: market, defaults to None
        :type market: str, optional
        :param submarket: submarket, defaults to None
        :type submarket: str, optional
        :param parking_ratio: parking_ratio, defaults to None
        :type parking_ratio: str, optional
        :param zoning: zoning, defaults to None
        :type zoning: str, optional
        :param web_site: web_site, defaults to None
        :type web_site: str, optional
        :param last_activity: last_activity, defaults to None
        :type last_activity: History, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[ObjectGroupListItem], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = user_key
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if property_name is not None:
            self.property_name = self._define_str(
                "property_name", property_name, nullable=True
            )
        if address is not None:
            self.address = self._define_object(address, Address)
        if property_type is not None:
            self.property_type = self._define_str(
                "property_type", property_type, nullable=True
            )
        if address_number1 is not None:
            self.address_number1 = self._define_str(
                "address_number1", address_number1, nullable=True
            )
        if address_number2 is not None:
            self.address_number2 = self._define_str(
                "address_number2", address_number2, nullable=True
            )
        if address_direction is not None:
            self.address_direction = self._define_str(
                "address_direction", address_direction, nullable=True
            )
        if address_street is not None:
            self.address_street = self._define_str(
                "address_street", address_street, nullable=True
            )
        if address_suite is not None:
            self.address_suite = self._define_str(
                "address_suite", address_suite, nullable=True
            )
        if for_sale is not None:
            self.for_sale = for_sale
        if for_lease is not None:
            self.for_lease = for_lease
        if assessed is not None:
            self.assessed = self._define_number("assessed", assessed, nullable=True)
        if construction_type is not None:
            self.construction_type = self._define_str(
                "construction_type", construction_type, nullable=True
            )
        if owner_occupied is not None:
            self.owner_occupied = owner_occupied
        if cross_streets is not None:
            self.cross_streets = self._define_str(
                "cross_streets", cross_streets, nullable=True
            )
        if building_class is not None:
            self.building_class = self._define_str(
                "building_class", building_class, nullable=True
            )
        if location is not None:
            self.location = self._define_str("location", location, nullable=True)
        if description is not None:
            self.description = self._define_str(
                "description", description, nullable=True
            )
        if building_id is not None:
            self.building_id = self._define_str(
                "building_id", building_id, nullable=True
            )
        if last_trans_price is not None:
            self.last_trans_price = self._define_number(
                "last_trans_price", last_trans_price, nullable=True
            )
        if last_trans_date is not None:
            self.last_trans_date = self._define_str(
                "last_trans_date", last_trans_date, nullable=True
            )
        if map_coord is not None:
            self.map_coord = self._define_str("map_coord", map_coord, nullable=True)
        if acres is not None:
            self.acres = self._define_number("acres", acres, nullable=True)
        if price is not None:
            self.price = self._define_number("price", price, nullable=True)
        if units is not None:
            self.units = self._define_number("units", units, nullable=True)
        if sqft is not None:
            self.sqft = self._define_number("sqft", sqft, nullable=True)
        if sale_price is not None:
            self.sale_price = self._define_number(
                "sale_price", sale_price, nullable=True
            )
        if min_per_sqft is not None:
            self.min_per_sqft = self._define_number(
                "min_per_sqft", min_per_sqft, nullable=True
            )
        if cap_rate is not None:
            self.cap_rate = self._define_number("cap_rate", cap_rate, nullable=True)
        if cash_on_cash is not None:
            self.cash_on_cash = self._define_number(
                "cash_on_cash", cash_on_cash, nullable=True
            )
        if year_built is not None:
            self.year_built = self._define_number(
                "year_built", year_built, nullable=True
            )
        if parcel is not None:
            self.parcel = self._define_str("parcel", parcel, nullable=True)
        if stories is not None:
            self.stories = self._define_number("stories", stories, nullable=True)
        if market is not None:
            self.market = self._define_str("market", market, nullable=True)
        if submarket is not None:
            self.submarket = self._define_str("submarket", submarket, nullable=True)
        if parking_ratio is not None:
            self.parking_ratio = self._define_str(
                "parking_ratio", parking_ratio, nullable=True
            )
        if zoning is not None:
            self.zoning = self._define_str("zoning", zoning, nullable=True)
        if web_site is not None:
            self.web_site = self._define_str("web_site", web_site, nullable=True)
        if last_activity is not None:
            self.last_activity = self._define_object(last_activity, History)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, ObjectGroupListItem)
        self._kwargs = kwargs
