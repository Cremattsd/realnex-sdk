# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {"table_name": "tableName", "field_name": "fieldName", "field_label": "fieldLabel"}
)
class FieldDefinition(BaseModel):
    """FieldDefinition

    :param table_name: table_name, defaults to None
    :type table_name: str, optional
    :param field_name: field_name, defaults to None
    :type field_name: str, optional
    :param field_label: field_label, defaults to None
    :type field_label: str, optional
    """

    def __init__(
        self,
        table_name: str = None,
        field_name: str = None,
        field_label: str = None,
        **kwargs
    ):
        """FieldDefinition

        :param table_name: table_name, defaults to None
        :type table_name: str, optional
        :param field_name: field_name, defaults to None
        :type field_name: str, optional
        :param field_label: field_label, defaults to None
        :type field_label: str, optional
        """
        if table_name is not None:
            self.table_name = self._define_str("table_name", table_name, nullable=True)
        if field_name is not None:
            self.field_name = self._define_str("field_name", field_name, nullable=True)
        if field_label is not None:
            self.field_label = self._define_str(
                "field_label", field_label, nullable=True
            )
        self._kwargs = kwargs
