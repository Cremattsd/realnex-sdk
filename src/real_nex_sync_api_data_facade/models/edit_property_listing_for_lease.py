# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {
        "min_contig_sf": "minContigSF",
        "percent_rent": "percentRent",
        "lease_list_no": "leaseListNo",
        "max_contig_sf": "maxContigSF",
        "lease_list_acq": "leaseListAcq",
        "min_rent_sf": "minRentSF",
        "lease_list_exp": "leaseListExp",
        "max_rent_sf": "maxRentSF",
        "min_rent_mo": "minRentMo",
        "max_rent_mo": "maxRentMo",
        "per_foot_land": "perFootLand",
        "lease_type": "leaseType",
        "nnn_expenses": "nnnExpenses",
    }
)
class EditPropertyListingForLease(BaseModel):
    """EditPropertyListingForLease

    :param available: available, defaults to None
    :type available: str, optional
    :param min_contig_sf: min_contig_sf, defaults to None
    :type min_contig_sf: float, optional
    :param percent_rent: percent_rent, defaults to None
    :type percent_rent: str, optional
    :param lease_list_no: lease_list_no, defaults to None
    :type lease_list_no: str, optional
    :param max_contig_sf: max_contig_sf, defaults to None
    :type max_contig_sf: float, optional
    :param cam: cam, defaults to None
    :type cam: float, optional
    :param lease_list_acq: lease_list_acq, defaults to None
    :type lease_list_acq: str, optional
    :param min_rent_sf: min_rent_sf, defaults to None
    :type min_rent_sf: float, optional
    :param tax: tax, defaults to None
    :type tax: float, optional
    :param lease_list_exp: lease_list_exp, defaults to None
    :type lease_list_exp: str, optional
    :param max_rent_sf: max_rent_sf, defaults to None
    :type max_rent_sf: float, optional
    :param insurance: insurance, defaults to None
    :type insurance: float, optional
    :param signup: signup, defaults to None
    :type signup: str, optional
    :param min_rent_mo: min_rent_mo, defaults to None
    :type min_rent_mo: float, optional
    :param tia: tia, defaults to None
    :type tia: str, optional
    :param signdown: signdown, defaults to None
    :type signdown: str, optional
    :param max_rent_mo: max_rent_mo, defaults to None
    :type max_rent_mo: float, optional
    :param lockbox: lockbox, defaults to None
    :type lockbox: str, optional
    :param per_foot_land: per_foot_land, defaults to None
    :type per_foot_land: float, optional
    :param lease_type: lease_type, defaults to None
    :type lease_type: str, optional
    :param nnn_expenses: nnn_expenses, defaults to None
    :type nnn_expenses: float, optional
    """

    def __init__(
        self,
        available: str = None,
        min_contig_sf: float = None,
        percent_rent: str = None,
        lease_list_no: str = None,
        max_contig_sf: float = None,
        cam: float = None,
        lease_list_acq: str = None,
        min_rent_sf: float = None,
        tax: float = None,
        lease_list_exp: str = None,
        max_rent_sf: float = None,
        insurance: float = None,
        signup: str = None,
        min_rent_mo: float = None,
        tia: str = None,
        signdown: str = None,
        max_rent_mo: float = None,
        lockbox: str = None,
        per_foot_land: float = None,
        lease_type: str = None,
        nnn_expenses: float = None,
        **kwargs
    ):
        """EditPropertyListingForLease

        :param available: available, defaults to None
        :type available: str, optional
        :param min_contig_sf: min_contig_sf, defaults to None
        :type min_contig_sf: float, optional
        :param percent_rent: percent_rent, defaults to None
        :type percent_rent: str, optional
        :param lease_list_no: lease_list_no, defaults to None
        :type lease_list_no: str, optional
        :param max_contig_sf: max_contig_sf, defaults to None
        :type max_contig_sf: float, optional
        :param cam: cam, defaults to None
        :type cam: float, optional
        :param lease_list_acq: lease_list_acq, defaults to None
        :type lease_list_acq: str, optional
        :param min_rent_sf: min_rent_sf, defaults to None
        :type min_rent_sf: float, optional
        :param tax: tax, defaults to None
        :type tax: float, optional
        :param lease_list_exp: lease_list_exp, defaults to None
        :type lease_list_exp: str, optional
        :param max_rent_sf: max_rent_sf, defaults to None
        :type max_rent_sf: float, optional
        :param insurance: insurance, defaults to None
        :type insurance: float, optional
        :param signup: signup, defaults to None
        :type signup: str, optional
        :param min_rent_mo: min_rent_mo, defaults to None
        :type min_rent_mo: float, optional
        :param tia: tia, defaults to None
        :type tia: str, optional
        :param signdown: signdown, defaults to None
        :type signdown: str, optional
        :param max_rent_mo: max_rent_mo, defaults to None
        :type max_rent_mo: float, optional
        :param lockbox: lockbox, defaults to None
        :type lockbox: str, optional
        :param per_foot_land: per_foot_land, defaults to None
        :type per_foot_land: float, optional
        :param lease_type: lease_type, defaults to None
        :type lease_type: str, optional
        :param nnn_expenses: nnn_expenses, defaults to None
        :type nnn_expenses: float, optional
        """
        if available is not None:
            self.available = self._define_str("available", available, nullable=True)
        if min_contig_sf is not None:
            self.min_contig_sf = self._define_number(
                "min_contig_sf", min_contig_sf, nullable=True
            )
        if percent_rent is not None:
            self.percent_rent = self._define_str(
                "percent_rent", percent_rent, nullable=True
            )
        if lease_list_no is not None:
            self.lease_list_no = self._define_str(
                "lease_list_no", lease_list_no, nullable=True
            )
        if max_contig_sf is not None:
            self.max_contig_sf = self._define_number(
                "max_contig_sf", max_contig_sf, nullable=True
            )
        if cam is not None:
            self.cam = self._define_number("cam", cam, nullable=True)
        if lease_list_acq is not None:
            self.lease_list_acq = self._define_str(
                "lease_list_acq", lease_list_acq, nullable=True
            )
        if min_rent_sf is not None:
            self.min_rent_sf = self._define_number(
                "min_rent_sf", min_rent_sf, nullable=True
            )
        if tax is not None:
            self.tax = self._define_number("tax", tax, nullable=True)
        if lease_list_exp is not None:
            self.lease_list_exp = self._define_str(
                "lease_list_exp", lease_list_exp, nullable=True
            )
        if max_rent_sf is not None:
            self.max_rent_sf = self._define_number(
                "max_rent_sf", max_rent_sf, nullable=True
            )
        if insurance is not None:
            self.insurance = self._define_number("insurance", insurance, nullable=True)
        if signup is not None:
            self.signup = self._define_str("signup", signup, nullable=True)
        if min_rent_mo is not None:
            self.min_rent_mo = self._define_number(
                "min_rent_mo", min_rent_mo, nullable=True
            )
        if tia is not None:
            self.tia = self._define_str("tia", tia, nullable=True)
        if signdown is not None:
            self.signdown = self._define_str("signdown", signdown, nullable=True)
        if max_rent_mo is not None:
            self.max_rent_mo = self._define_number(
                "max_rent_mo", max_rent_mo, nullable=True
            )
        if lockbox is not None:
            self.lockbox = self._define_str("lockbox", lockbox, nullable=True)
        if per_foot_land is not None:
            self.per_foot_land = self._define_number(
                "per_foot_land", per_foot_land, nullable=True
            )
        if lease_type is not None:
            self.lease_type = self._define_str("lease_type", lease_type, nullable=True)
        if nnn_expenses is not None:
            self.nnn_expenses = self._define_number(
                "nnn_expenses", nnn_expenses, nullable=True
            )
        self._kwargs = kwargs
