# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .contact_address_role import ContactAddressRole
from .int32_key_name_object import Int32KeyNameObject


@JsonMap(
    {"address_roles": "addressRoles", "zip_code": "zipCode", "time_zone": "timeZone"}
)
class ContactAddress(BaseModel):
    """ContactAddress

    :param key: key, defaults to None
    :type key: str, optional
    :param address_roles: address_roles, defaults to None
    :type address_roles: List[ContactAddressRole], optional
    :param company: company, defaults to None
    :type company: str, optional
    :param address1: address1, defaults to None
    :type address1: str, optional
    :param address2: address2, defaults to None
    :type address2: str, optional
    :param city: city, defaults to None
    :type city: str, optional
    :param state: state, defaults to None
    :type state: str, optional
    :param country: country, defaults to None
    :type country: str, optional
    :param zip_code: zip_code, defaults to None
    :type zip_code: str, optional
    :param time_zone: time_zone, defaults to None
    :type time_zone: Int32KeyNameObject, optional
    """

    def __init__(
        self,
        key: str = None,
        address_roles: List[ContactAddressRole] = None,
        company: str = None,
        address1: str = None,
        address2: str = None,
        city: str = None,
        state: str = None,
        country: str = None,
        zip_code: str = None,
        time_zone: Int32KeyNameObject = None,
        **kwargs,
    ):
        """ContactAddress

        :param key: key, defaults to None
        :type key: str, optional
        :param address_roles: address_roles, defaults to None
        :type address_roles: List[ContactAddressRole], optional
        :param company: company, defaults to None
        :type company: str, optional
        :param address1: address1, defaults to None
        :type address1: str, optional
        :param address2: address2, defaults to None
        :type address2: str, optional
        :param city: city, defaults to None
        :type city: str, optional
        :param state: state, defaults to None
        :type state: str, optional
        :param country: country, defaults to None
        :type country: str, optional
        :param zip_code: zip_code, defaults to None
        :type zip_code: str, optional
        :param time_zone: time_zone, defaults to None
        :type time_zone: Int32KeyNameObject, optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if address_roles is not None:
            self.address_roles = self._define_list(address_roles, ContactAddressRole)
        if company is not None:
            self.company = self._define_str("company", company, nullable=True)
        if address1 is not None:
            self.address1 = self._define_str("address1", address1, nullable=True)
        if address2 is not None:
            self.address2 = self._define_str("address2", address2, nullable=True)
        if city is not None:
            self.city = self._define_str("city", city, nullable=True)
        if state is not None:
            self.state = self._define_str("state", state, nullable=True)
        if country is not None:
            self.country = self._define_str("country", country, nullable=True)
        if zip_code is not None:
            self.zip_code = self._define_str("zip_code", zip_code, nullable=True)
        if time_zone is not None:
            self.time_zone = self._define_object(time_zone, Int32KeyNameObject)
        self._kwargs = kwargs
