# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .history import History
from .object_group_list_item import ObjectGroupListItem


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "project_type": "projectType",
        "project_status": "projectStatus",
        "project_result": "projectResult",
        "date_opened": "dateOpened",
        "date_expected": "dateExpected",
        "date_closed": "dateClosed",
        "admin_link": "adminLink",
        "registration_link": "registrationLink",
        "login_link": "loginLink",
        "last_activity": "lastActivity",
        "object_groups": "objectGroups",
    }
)
class ProjectListItem(BaseModel):
    """ProjectListItem

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param project: project, defaults to None
    :type project: str, optional
    :param project_type: project_type, defaults to None
    :type project_type: str, optional
    :param project_status: project_status, defaults to None
    :type project_status: str, optional
    :param project_result: project_result, defaults to None
    :type project_result: str, optional
    :param size: size, defaults to None
    :type size: float, optional
    :param amount: amount, defaults to None
    :type amount: float, optional
    :param date_opened: date_opened, defaults to None
    :type date_opened: str, optional
    :param date_expected: date_expected, defaults to None
    :type date_expected: str, optional
    :param date_closed: date_closed, defaults to None
    :type date_closed: str, optional
    :param probability: probability, defaults to None
    :type probability: int, optional
    :param commission: commission, defaults to None
    :type commission: float, optional
    :param reason: reason, defaults to None
    :type reason: str, optional
    :param admin_link: admin_link, defaults to None
    :type admin_link: str, optional
    :param registration_link: registration_link, defaults to None
    :type registration_link: str, optional
    :param login_link: login_link, defaults to None
    :type login_link: str, optional
    :param investment: investment, defaults to None
    :type investment: bool, optional
    :param inhouselisting: inhouselisting, defaults to None
    :type inhouselisting: bool, optional
    :param inhouserepresentation: inhouserepresentation, defaults to None
    :type inhouserepresentation: bool, optional
    :param commissionpercentage: commissionpercentage, defaults to None
    :type commissionpercentage: float, optional
    :param flatfee: flatfee, defaults to None
    :type flatfee: float, optional
    :param last_activity: last_activity, defaults to None
    :type last_activity: History, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[ObjectGroupListItem], optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        project: str = None,
        project_type: str = None,
        project_status: str = None,
        project_result: str = None,
        size: float = None,
        amount: float = None,
        date_opened: str = None,
        date_expected: str = None,
        date_closed: str = None,
        probability: int = None,
        commission: float = None,
        reason: str = None,
        admin_link: str = None,
        registration_link: str = None,
        login_link: str = None,
        investment: bool = None,
        inhouselisting: bool = None,
        inhouserepresentation: bool = None,
        commissionpercentage: float = None,
        flatfee: float = None,
        last_activity: History = None,
        object_groups: List[ObjectGroupListItem] = None,
        **kwargs,
    ):
        """ProjectListItem

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param project: project, defaults to None
        :type project: str, optional
        :param project_type: project_type, defaults to None
        :type project_type: str, optional
        :param project_status: project_status, defaults to None
        :type project_status: str, optional
        :param project_result: project_result, defaults to None
        :type project_result: str, optional
        :param size: size, defaults to None
        :type size: float, optional
        :param amount: amount, defaults to None
        :type amount: float, optional
        :param date_opened: date_opened, defaults to None
        :type date_opened: str, optional
        :param date_expected: date_expected, defaults to None
        :type date_expected: str, optional
        :param date_closed: date_closed, defaults to None
        :type date_closed: str, optional
        :param probability: probability, defaults to None
        :type probability: int, optional
        :param commission: commission, defaults to None
        :type commission: float, optional
        :param reason: reason, defaults to None
        :type reason: str, optional
        :param admin_link: admin_link, defaults to None
        :type admin_link: str, optional
        :param registration_link: registration_link, defaults to None
        :type registration_link: str, optional
        :param login_link: login_link, defaults to None
        :type login_link: str, optional
        :param investment: investment, defaults to None
        :type investment: bool, optional
        :param inhouselisting: inhouselisting, defaults to None
        :type inhouselisting: bool, optional
        :param inhouserepresentation: inhouserepresentation, defaults to None
        :type inhouserepresentation: bool, optional
        :param commissionpercentage: commissionpercentage, defaults to None
        :type commissionpercentage: float, optional
        :param flatfee: flatfee, defaults to None
        :type flatfee: float, optional
        :param last_activity: last_activity, defaults to None
        :type last_activity: History, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[ObjectGroupListItem], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = user_key
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if project is not None:
            self.project = self._define_str("project", project, nullable=True)
        if project_type is not None:
            self.project_type = self._define_str(
                "project_type", project_type, nullable=True
            )
        if project_status is not None:
            self.project_status = self._define_str(
                "project_status", project_status, nullable=True
            )
        if project_result is not None:
            self.project_result = self._define_str(
                "project_result", project_result, nullable=True
            )
        if size is not None:
            self.size = self._define_number("size", size, nullable=True)
        if amount is not None:
            self.amount = self._define_number("amount", amount, nullable=True)
        if date_opened is not None:
            self.date_opened = self._define_str(
                "date_opened", date_opened, nullable=True
            )
        if date_expected is not None:
            self.date_expected = self._define_str(
                "date_expected", date_expected, nullable=True
            )
        if date_closed is not None:
            self.date_closed = self._define_str(
                "date_closed", date_closed, nullable=True
            )
        if probability is not None:
            self.probability = self._define_number(
                "probability", probability, nullable=True
            )
        if commission is not None:
            self.commission = self._define_number(
                "commission", commission, nullable=True
            )
        if reason is not None:
            self.reason = self._define_str("reason", reason, nullable=True)
        if admin_link is not None:
            self.admin_link = self._define_str("admin_link", admin_link, nullable=True)
        if registration_link is not None:
            self.registration_link = self._define_str(
                "registration_link", registration_link, nullable=True
            )
        if login_link is not None:
            self.login_link = self._define_str("login_link", login_link, nullable=True)
        if investment is not None:
            self.investment = investment
        if inhouselisting is not None:
            self.inhouselisting = inhouselisting
        if inhouserepresentation is not None:
            self.inhouserepresentation = inhouserepresentation
        if commissionpercentage is not None:
            self.commissionpercentage = self._define_number(
                "commissionpercentage", commissionpercentage, nullable=True
            )
        if flatfee is not None:
            self.flatfee = self._define_number("flatfee", flatfee, nullable=True)
        if last_activity is not None:
            self.last_activity = self._define_object(last_activity, History)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, ObjectGroupListItem)
        self._kwargs = kwargs
