# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .int32_key_name_object import Int32KeyNameObject


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "file_name": "fileName",
        "original_file_name": "originalFileName",
        "attachment_type": "attachmentType",
        "attachment_date": "attachmentDate",
    }
)
class Attachment(BaseModel):
    """Attachment

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param description: description, defaults to None
    :type description: str, optional
    :param file_name: file_name, defaults to None
    :type file_name: str, optional
    :param original_file_name: original_file_name, defaults to None
    :type original_file_name: str, optional
    :param attachment_type: attachment_type, defaults to None
    :type attachment_type: Int32KeyNameObject, optional
    :param attachment_date: attachment_date, defaults to None
    :type attachment_date: str, optional
    :param picture: picture, defaults to None
    :type picture: bool, optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        description: str = None,
        file_name: str = None,
        original_file_name: str = None,
        attachment_type: Int32KeyNameObject = None,
        attachment_date: str = None,
        picture: bool = None,
        **kwargs,
    ):
        """Attachment

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param description: description, defaults to None
        :type description: str, optional
        :param file_name: file_name, defaults to None
        :type file_name: str, optional
        :param original_file_name: original_file_name, defaults to None
        :type original_file_name: str, optional
        :param attachment_type: attachment_type, defaults to None
        :type attachment_type: Int32KeyNameObject, optional
        :param attachment_date: attachment_date, defaults to None
        :type attachment_date: str, optional
        :param picture: picture, defaults to None
        :type picture: bool, optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = user_key
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if description is not None:
            self.description = self._define_str(
                "description", description, nullable=True
            )
        if file_name is not None:
            self.file_name = self._define_str("file_name", file_name, nullable=True)
        if original_file_name is not None:
            self.original_file_name = self._define_str(
                "original_file_name", original_file_name, nullable=True
            )
        if attachment_type is not None:
            self.attachment_type = self._define_object(
                attachment_type, Int32KeyNameObject
            )
        if attachment_date is not None:
            self.attachment_date = self._define_str(
                "attachment_date", attachment_date, nullable=True
            )
        if picture is not None:
            self.picture = picture
        self._kwargs = kwargs
