# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .int32_key_name_object import Int32KeyNameObject
from .object_link import ObjectLink
from .contact_link import ContactLink
from .company_link import CompanyLink
from .property_link import PropertyLink
from .space_link import SpaceLink


@JsonMap(
    {
        "project_status": "projectStatus",
        "object_info": "objectInfo",
        "date_opened": "dateOpened",
        "date_expected": "dateExpected",
        "date_closed": "dateClosed",
        "project_result": "projectResult",
    }
)
class ProjectLead(BaseModel):
    """ProjectLead

    :param key: key, defaults to None
    :type key: str, optional
    :param project_status: project_status, defaults to None
    :type project_status: Int32KeyNameObject, optional
    :param object_info: object_info, defaults to None
    :type object_info: ObjectLink, optional
    :param contact: contact, defaults to None
    :type contact: ContactLink, optional
    :param company: company, defaults to None
    :type company: CompanyLink, optional
    :param property: property, defaults to None
    :type property: PropertyLink, optional
    :param space: space, defaults to None
    :type space: SpaceLink, optional
    :param size: size, defaults to None
    :type size: float, optional
    :param amount: amount, defaults to None
    :type amount: float, optional
    :param date_opened: date_opened, defaults to None
    :type date_opened: str, optional
    :param date_expected: date_expected, defaults to None
    :type date_expected: str, optional
    :param date_closed: date_closed, defaults to None
    :type date_closed: str, optional
    :param probability: probability, defaults to None
    :type probability: int, optional
    :param commission: commission, defaults to None
    :type commission: float, optional
    :param project_result: project_result, defaults to None
    :type project_result: Int32KeyNameObject, optional
    :param reason: reason, defaults to None
    :type reason: str, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    """

    def __init__(
        self,
        key: str = None,
        project_status: Int32KeyNameObject = None,
        object_info: ObjectLink = None,
        contact: ContactLink = None,
        company: CompanyLink = None,
        property: PropertyLink = None,
        space: SpaceLink = None,
        size: float = None,
        amount: float = None,
        date_opened: str = None,
        date_expected: str = None,
        date_closed: str = None,
        probability: int = None,
        commission: float = None,
        project_result: Int32KeyNameObject = None,
        reason: str = None,
        notes: str = None,
        **kwargs,
    ):
        """ProjectLead

        :param key: key, defaults to None
        :type key: str, optional
        :param project_status: project_status, defaults to None
        :type project_status: Int32KeyNameObject, optional
        :param object_info: object_info, defaults to None
        :type object_info: ObjectLink, optional
        :param contact: contact, defaults to None
        :type contact: ContactLink, optional
        :param company: company, defaults to None
        :type company: CompanyLink, optional
        :param property: property, defaults to None
        :type property: PropertyLink, optional
        :param space: space, defaults to None
        :type space: SpaceLink, optional
        :param size: size, defaults to None
        :type size: float, optional
        :param amount: amount, defaults to None
        :type amount: float, optional
        :param date_opened: date_opened, defaults to None
        :type date_opened: str, optional
        :param date_expected: date_expected, defaults to None
        :type date_expected: str, optional
        :param date_closed: date_closed, defaults to None
        :type date_closed: str, optional
        :param probability: probability, defaults to None
        :type probability: int, optional
        :param commission: commission, defaults to None
        :type commission: float, optional
        :param project_result: project_result, defaults to None
        :type project_result: Int32KeyNameObject, optional
        :param reason: reason, defaults to None
        :type reason: str, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        """
        if key is not None:
            self.key = key
        if project_status is not None:
            self.project_status = self._define_object(
                project_status, Int32KeyNameObject
            )
        if object_info is not None:
            self.object_info = self._define_object(object_info, ObjectLink)
        if contact is not None:
            self.contact = self._define_object(contact, ContactLink)
        if company is not None:
            self.company = self._define_object(company, CompanyLink)
        if property is not None:
            self.property = self._define_object(property, PropertyLink)
        if space is not None:
            self.space = self._define_object(space, SpaceLink)
        if size is not None:
            self.size = self._define_number("size", size, nullable=True)
        if amount is not None:
            self.amount = self._define_number("amount", amount, nullable=True)
        if date_opened is not None:
            self.date_opened = self._define_str(
                "date_opened", date_opened, nullable=True
            )
        if date_expected is not None:
            self.date_expected = self._define_str(
                "date_expected", date_expected, nullable=True
            )
        if date_closed is not None:
            self.date_closed = self._define_str(
                "date_closed", date_closed, nullable=True
            )
        if probability is not None:
            self.probability = self._define_number(
                "probability", probability, nullable=True
            )
        if commission is not None:
            self.commission = self._define_number(
                "commission", commission, nullable=True
            )
        if project_result is not None:
            self.project_result = self._define_object(
                project_result, Int32KeyNameObject
            )
        if reason is not None:
            self.reason = self._define_str("reason", reason, nullable=True)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        self._kwargs = kwargs
