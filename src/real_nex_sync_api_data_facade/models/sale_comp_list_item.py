# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .address import Address
from .comp_contact import CompContact
from .sale_comp_details import SaleCompDetails
from .sale_comp_usage import SaleCompUsage
from .history import History
from .object_group_list_item import ObjectGroupListItem


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "property_name": "propertyName",
        "buyer_contact": "buyerContact",
        "seller_contact": "sellerContact",
        "procuring_contact": "procuringContact",
        "listing_contact": "listingContact",
        "property_type": "propertyType",
        "address_number1": "addressNumber1",
        "address_number2": "addressNumber2",
        "address_direction": "addressDirection",
        "address_street": "addressStreet",
        "address_suite": "addressSuite",
        "last_activity": "lastActivity",
        "object_groups": "objectGroups",
    }
)
class SaleCompListItem(BaseModel):
    """SaleCompListItem

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param property_name: property_name, defaults to None
    :type property_name: str, optional
    :param address: address, defaults to None
    :type address: Address, optional
    :param buyer_contact: buyer_contact, defaults to None
    :type buyer_contact: CompContact, optional
    :param seller_contact: seller_contact, defaults to None
    :type seller_contact: CompContact, optional
    :param procuring_contact: procuring_contact, defaults to None
    :type procuring_contact: CompContact, optional
    :param listing_contact: listing_contact, defaults to None
    :type listing_contact: CompContact, optional
    :param property_type: property_type, defaults to None
    :type property_type: str, optional
    :param address_number1: address_number1, defaults to None
    :type address_number1: str, optional
    :param address_number2: address_number2, defaults to None
    :type address_number2: str, optional
    :param address_direction: address_direction, defaults to None
    :type address_direction: str, optional
    :param address_street: address_street, defaults to None
    :type address_street: str, optional
    :param address_suite: address_suite, defaults to None
    :type address_suite: str, optional
    :param details: details, defaults to None
    :type details: SaleCompDetails, optional
    :param usage: usage, defaults to None
    :type usage: SaleCompUsage, optional
    :param last_activity: last_activity, defaults to None
    :type last_activity: History, optional
    :param object_groups: object_groups, defaults to None
    :type object_groups: List[ObjectGroupListItem], optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        property_name: str = None,
        address: Address = None,
        buyer_contact: CompContact = None,
        seller_contact: CompContact = None,
        procuring_contact: CompContact = None,
        listing_contact: CompContact = None,
        property_type: str = None,
        address_number1: str = None,
        address_number2: str = None,
        address_direction: str = None,
        address_street: str = None,
        address_suite: str = None,
        details: SaleCompDetails = None,
        usage: SaleCompUsage = None,
        last_activity: History = None,
        object_groups: List[ObjectGroupListItem] = None,
        **kwargs,
    ):
        """SaleCompListItem

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param property_name: property_name, defaults to None
        :type property_name: str, optional
        :param address: address, defaults to None
        :type address: Address, optional
        :param buyer_contact: buyer_contact, defaults to None
        :type buyer_contact: CompContact, optional
        :param seller_contact: seller_contact, defaults to None
        :type seller_contact: CompContact, optional
        :param procuring_contact: procuring_contact, defaults to None
        :type procuring_contact: CompContact, optional
        :param listing_contact: listing_contact, defaults to None
        :type listing_contact: CompContact, optional
        :param property_type: property_type, defaults to None
        :type property_type: str, optional
        :param address_number1: address_number1, defaults to None
        :type address_number1: str, optional
        :param address_number2: address_number2, defaults to None
        :type address_number2: str, optional
        :param address_direction: address_direction, defaults to None
        :type address_direction: str, optional
        :param address_street: address_street, defaults to None
        :type address_street: str, optional
        :param address_suite: address_suite, defaults to None
        :type address_suite: str, optional
        :param details: details, defaults to None
        :type details: SaleCompDetails, optional
        :param usage: usage, defaults to None
        :type usage: SaleCompUsage, optional
        :param last_activity: last_activity, defaults to None
        :type last_activity: History, optional
        :param object_groups: object_groups, defaults to None
        :type object_groups: List[ObjectGroupListItem], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = user_key
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if property_name is not None:
            self.property_name = self._define_str(
                "property_name", property_name, nullable=True
            )
        if address is not None:
            self.address = self._define_object(address, Address)
        if buyer_contact is not None:
            self.buyer_contact = self._define_object(buyer_contact, CompContact)
        if seller_contact is not None:
            self.seller_contact = self._define_object(seller_contact, CompContact)
        if procuring_contact is not None:
            self.procuring_contact = self._define_object(procuring_contact, CompContact)
        if listing_contact is not None:
            self.listing_contact = self._define_object(listing_contact, CompContact)
        if property_type is not None:
            self.property_type = self._define_str(
                "property_type", property_type, nullable=True
            )
        if address_number1 is not None:
            self.address_number1 = self._define_str(
                "address_number1", address_number1, nullable=True
            )
        if address_number2 is not None:
            self.address_number2 = self._define_str(
                "address_number2", address_number2, nullable=True
            )
        if address_direction is not None:
            self.address_direction = self._define_str(
                "address_direction", address_direction, nullable=True
            )
        if address_street is not None:
            self.address_street = self._define_str(
                "address_street", address_street, nullable=True
            )
        if address_suite is not None:
            self.address_suite = self._define_str(
                "address_suite", address_suite, nullable=True
            )
        if details is not None:
            self.details = self._define_object(details, SaleCompDetails)
        if usage is not None:
            self.usage = self._define_object(usage, SaleCompUsage)
        if last_activity is not None:
            self.last_activity = self._define_object(last_activity, History)
        if object_groups is not None:
            self.object_groups = self._define_list(object_groups, ObjectGroupListItem)
        self._kwargs = kwargs
