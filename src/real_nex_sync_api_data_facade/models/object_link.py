# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .object_type import ObjectType


@JsonMap({"type_": "type"})
class ObjectLink(BaseModel):
    """ObjectLink

    :param key: key, defaults to None
    :type key: str, optional
    :param type_: type_, defaults to None
    :type type_: ObjectType, optional
    :param description: description, defaults to None
    :type description: str, optional
    """

    def __init__(
        self,
        key: str = None,
        type_: ObjectType = None,
        description: str = None,
        **kwargs,
    ):
        """ObjectLink

        :param key: key, defaults to None
        :type key: str, optional
        :param type_: type_, defaults to None
        :type type_: ObjectType, optional
        :param description: description, defaults to None
        :type description: str, optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if type_ is not None:
            self.type_ = self._enum_matching(type_, ObjectType.list(), "type_")
        if description is not None:
            self.description = self._define_str(
                "description", description, nullable=True
            )
        self._kwargs = kwargs
