# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .contact_tenant_space import ContactTenantSpace
from .user_fields import UserFields
from .user_data_fields import UserDataFields
from .logical_fields import LogicalFields


@JsonMap(
    {
        "in_market": "inMarket",
        "business_type": "businessType",
        "num_employees": "numEmployees",
        "num_units": "numUnits",
        "sic_codes": "sicCodes",
        "org_type": "orgType",
        "min_sqft": "minSqft",
        "max_sqft": "maxSqft",
        "office_sqft": "officeSqft",
        "buy_lease": "buyLease",
        "dock_doors": "dockDoors",
        "grade_doors": "gradeDoors",
        "other_req": "otherReq",
        "user_fields": "userFields",
        "user_data_fields": "userDataFields",
        "logical_fields": "logicalFields",
    }
)
class ContactTenant(BaseModel):
    """ContactTenant

    :param space: space, defaults to None
    :type space: ContactTenantSpace, optional
    :param office: office, defaults to None
    :type office: bool, optional
    :param retail: retail, defaults to None
    :type retail: bool, optional
    :param industrial: industrial, defaults to None
    :type industrial: bool, optional
    :param other: other, defaults to None
    :type other: bool, optional
    :param owner: owner, defaults to None
    :type owner: bool, optional
    :param in_market: in_market, defaults to None
    :type in_market: bool, optional
    :param business_type: business_type, defaults to None
    :type business_type: str, optional
    :param num_employees: num_employees, defaults to None
    :type num_employees: int, optional
    :param num_units: num_units, defaults to None
    :type num_units: int, optional
    :param founded: founded, defaults to None
    :type founded: int, optional
    :param sales: sales, defaults to None
    :type sales: int, optional
    :param sic_codes: sic_codes, defaults to None
    :type sic_codes: str, optional
    :param rating: rating, defaults to None
    :type rating: str, optional
    :param org_type: org_type, defaults to None
    :type org_type: str, optional
    :param min_sqft: min_sqft, defaults to None
    :type min_sqft: float, optional
    :param max_sqft: max_sqft, defaults to None
    :type max_sqft: float, optional
    :param location: location, defaults to None
    :type location: str, optional
    :param office_sqft: office_sqft, defaults to None
    :type office_sqft: float, optional
    :param acres: acres, defaults to None
    :type acres: float, optional
    :param buy_lease: buy_lease, defaults to None
    :type buy_lease: str, optional
    :param clearance: clearance, defaults to None
    :type clearance: str, optional
    :param power: power, defaults to None
    :type power: str, optional
    :param timing: timing, defaults to None
    :type timing: str, optional
    :param dock_doors: dock_doors, defaults to None
    :type dock_doors: int, optional
    :param grade_doors: grade_doors, defaults to None
    :type grade_doors: int, optional
    :param other_req: other_req, defaults to None
    :type other_req: str, optional
    :param user_fields: user_fields, defaults to None
    :type user_fields: UserFields, optional
    :param user_data_fields: user_data_fields, defaults to None
    :type user_data_fields: UserDataFields, optional
    :param logical_fields: logical_fields, defaults to None
    :type logical_fields: LogicalFields, optional
    """

    def __init__(
        self,
        space: ContactTenantSpace = None,
        office: bool = None,
        retail: bool = None,
        industrial: bool = None,
        other: bool = None,
        owner: bool = None,
        in_market: bool = None,
        business_type: str = None,
        num_employees: int = None,
        num_units: int = None,
        founded: int = None,
        sales: int = None,
        sic_codes: str = None,
        rating: str = None,
        org_type: str = None,
        min_sqft: float = None,
        max_sqft: float = None,
        location: str = None,
        office_sqft: float = None,
        acres: float = None,
        buy_lease: str = None,
        clearance: str = None,
        power: str = None,
        timing: str = None,
        dock_doors: int = None,
        grade_doors: int = None,
        other_req: str = None,
        user_fields: UserFields = None,
        user_data_fields: UserDataFields = None,
        logical_fields: LogicalFields = None,
        **kwargs,
    ):
        """ContactTenant

        :param space: space, defaults to None
        :type space: ContactTenantSpace, optional
        :param office: office, defaults to None
        :type office: bool, optional
        :param retail: retail, defaults to None
        :type retail: bool, optional
        :param industrial: industrial, defaults to None
        :type industrial: bool, optional
        :param other: other, defaults to None
        :type other: bool, optional
        :param owner: owner, defaults to None
        :type owner: bool, optional
        :param in_market: in_market, defaults to None
        :type in_market: bool, optional
        :param business_type: business_type, defaults to None
        :type business_type: str, optional
        :param num_employees: num_employees, defaults to None
        :type num_employees: int, optional
        :param num_units: num_units, defaults to None
        :type num_units: int, optional
        :param founded: founded, defaults to None
        :type founded: int, optional
        :param sales: sales, defaults to None
        :type sales: int, optional
        :param sic_codes: sic_codes, defaults to None
        :type sic_codes: str, optional
        :param rating: rating, defaults to None
        :type rating: str, optional
        :param org_type: org_type, defaults to None
        :type org_type: str, optional
        :param min_sqft: min_sqft, defaults to None
        :type min_sqft: float, optional
        :param max_sqft: max_sqft, defaults to None
        :type max_sqft: float, optional
        :param location: location, defaults to None
        :type location: str, optional
        :param office_sqft: office_sqft, defaults to None
        :type office_sqft: float, optional
        :param acres: acres, defaults to None
        :type acres: float, optional
        :param buy_lease: buy_lease, defaults to None
        :type buy_lease: str, optional
        :param clearance: clearance, defaults to None
        :type clearance: str, optional
        :param power: power, defaults to None
        :type power: str, optional
        :param timing: timing, defaults to None
        :type timing: str, optional
        :param dock_doors: dock_doors, defaults to None
        :type dock_doors: int, optional
        :param grade_doors: grade_doors, defaults to None
        :type grade_doors: int, optional
        :param other_req: other_req, defaults to None
        :type other_req: str, optional
        :param user_fields: user_fields, defaults to None
        :type user_fields: UserFields, optional
        :param user_data_fields: user_data_fields, defaults to None
        :type user_data_fields: UserDataFields, optional
        :param logical_fields: logical_fields, defaults to None
        :type logical_fields: LogicalFields, optional
        """
        if space is not None:
            self.space = self._define_object(space, ContactTenantSpace)
        if office is not None:
            self.office = office
        if retail is not None:
            self.retail = retail
        if industrial is not None:
            self.industrial = industrial
        if other is not None:
            self.other = other
        if owner is not None:
            self.owner = owner
        if in_market is not None:
            self.in_market = in_market
        if business_type is not None:
            self.business_type = self._define_str(
                "business_type", business_type, nullable=True
            )
        if num_employees is not None:
            self.num_employees = self._define_number(
                "num_employees", num_employees, nullable=True
            )
        if num_units is not None:
            self.num_units = self._define_number("num_units", num_units, nullable=True)
        if founded is not None:
            self.founded = self._define_number("founded", founded, nullable=True)
        if sales is not None:
            self.sales = self._define_number("sales", sales, nullable=True)
        if sic_codes is not None:
            self.sic_codes = self._define_str("sic_codes", sic_codes, nullable=True)
        if rating is not None:
            self.rating = self._define_str("rating", rating, nullable=True)
        if org_type is not None:
            self.org_type = self._define_str("org_type", org_type, nullable=True)
        if min_sqft is not None:
            self.min_sqft = self._define_number("min_sqft", min_sqft, nullable=True)
        if max_sqft is not None:
            self.max_sqft = self._define_number("max_sqft", max_sqft, nullable=True)
        if location is not None:
            self.location = self._define_str("location", location, nullable=True)
        if office_sqft is not None:
            self.office_sqft = self._define_number(
                "office_sqft", office_sqft, nullable=True
            )
        if acres is not None:
            self.acres = self._define_number("acres", acres, nullable=True)
        if buy_lease is not None:
            self.buy_lease = self._define_str("buy_lease", buy_lease, nullable=True)
        if clearance is not None:
            self.clearance = self._define_str("clearance", clearance, nullable=True)
        if power is not None:
            self.power = self._define_str("power", power, nullable=True)
        if timing is not None:
            self.timing = self._define_str("timing", timing, nullable=True)
        if dock_doors is not None:
            self.dock_doors = self._define_number(
                "dock_doors", dock_doors, nullable=True
            )
        if grade_doors is not None:
            self.grade_doors = self._define_number(
                "grade_doors", grade_doors, nullable=True
            )
        if other_req is not None:
            self.other_req = self._define_str("other_req", other_req, nullable=True)
        if user_fields is not None:
            self.user_fields = self._define_object(user_fields, UserFields)
        if user_data_fields is not None:
            self.user_data_fields = self._define_object(
                user_data_fields, UserDataFields
            )
        if logical_fields is not None:
            self.logical_fields = self._define_object(logical_fields, LogicalFields)
        self._kwargs = kwargs
