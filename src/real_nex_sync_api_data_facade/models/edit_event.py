# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "start_date": "startDate",
        "end_date": "endDate",
        "time_zone_key": "timeZoneKey",
        "start_offset": "startOffset",
        "all_day": "allDay",
        "alarm_minutes": "alarmMinutes",
        "event_type_key": "eventTypeKey",
        "priority_key": "priorityKey",
        "project_key": "projectKey",
    }
)
class EditEvent(BaseModel):
    """EditEvent

    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param start_date: start_date, defaults to None
    :type start_date: str, optional
    :param end_date: end_date, defaults to None
    :type end_date: str, optional
    :param time_zone_key: time_zone_key, defaults to None
    :type time_zone_key: int, optional
    :param start_offset: start_offset, defaults to None
    :type start_offset: int, optional
    :param timeless: timeless, defaults to None
    :type timeless: bool, optional
    :param all_day: all_day, defaults to None
    :type all_day: bool, optional
    :param finished: finished, defaults to None
    :type finished: bool, optional
    :param alarm_minutes: alarm_minutes, defaults to None
    :type alarm_minutes: int, optional
    :param event_type_key: event_type_key, defaults to None
    :type event_type_key: int, optional
    :param priority_key: priority_key, defaults to None
    :type priority_key: int, optional
    :param subject: subject, defaults to None
    :type subject: str, optional
    :param project_key: project_key, defaults to None
    :type project_key: str, optional
    :param color: color, defaults to None
    :type color: str, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    """

    def __init__(
        self,
        user_key: str = None,
        team_key: str = None,
        start_date: str = None,
        end_date: str = None,
        time_zone_key: int = None,
        start_offset: int = None,
        timeless: bool = None,
        all_day: bool = None,
        finished: bool = None,
        alarm_minutes: int = None,
        event_type_key: int = None,
        priority_key: int = None,
        subject: str = None,
        project_key: str = None,
        color: str = None,
        notes: str = None,
        **kwargs
    ):
        """EditEvent

        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param start_date: start_date, defaults to None
        :type start_date: str, optional
        :param end_date: end_date, defaults to None
        :type end_date: str, optional
        :param time_zone_key: time_zone_key, defaults to None
        :type time_zone_key: int, optional
        :param start_offset: start_offset, defaults to None
        :type start_offset: int, optional
        :param timeless: timeless, defaults to None
        :type timeless: bool, optional
        :param all_day: all_day, defaults to None
        :type all_day: bool, optional
        :param finished: finished, defaults to None
        :type finished: bool, optional
        :param alarm_minutes: alarm_minutes, defaults to None
        :type alarm_minutes: int, optional
        :param event_type_key: event_type_key, defaults to None
        :type event_type_key: int, optional
        :param priority_key: priority_key, defaults to None
        :type priority_key: int, optional
        :param subject: subject, defaults to None
        :type subject: str, optional
        :param project_key: project_key, defaults to None
        :type project_key: str, optional
        :param color: color, defaults to None
        :type color: str, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        """
        if user_key is not None:
            self.user_key = self._define_str("user_key", user_key, nullable=True)
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if time_zone_key is not None:
            self.time_zone_key = self._define_number(
                "time_zone_key", time_zone_key, nullable=True
            )
        if start_offset is not None:
            self.start_offset = self._define_number(
                "start_offset", start_offset, nullable=True
            )
        if timeless is not None:
            self.timeless = timeless
        if all_day is not None:
            self.all_day = all_day
        if finished is not None:
            self.finished = finished
        if alarm_minutes is not None:
            self.alarm_minutes = self._define_number(
                "alarm_minutes", alarm_minutes, nullable=True
            )
        if event_type_key is not None:
            self.event_type_key = self._define_number(
                "event_type_key", event_type_key, nullable=True
            )
        if priority_key is not None:
            self.priority_key = self._define_number(
                "priority_key", priority_key, nullable=True
            )
        if subject is not None:
            self.subject = self._define_str("subject", subject, nullable=True)
        if project_key is not None:
            self.project_key = self._define_str(
                "project_key", project_key, nullable=True
            )
        if color is not None:
            self.color = self._define_str("color", color, nullable=True)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        self._kwargs = kwargs
