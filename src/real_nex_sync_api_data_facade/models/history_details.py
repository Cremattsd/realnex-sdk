# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .int32_key_name_object import Int32KeyNameObject
from .object_link import ObjectLink
from .history_object import HistoryObject


@JsonMap(
    {
        "user_key": "userKey",
        "team_key": "teamKey",
        "start_date": "startDate",
        "end_date": "endDate",
        "event_type": "eventType",
        "history_objects": "historyObjects",
    }
)
class HistoryDetails(BaseModel):
    """HistoryDetails

    :param key: key, defaults to None
    :type key: str, optional
    :param user_key: user_key, defaults to None
    :type user_key: str, optional
    :param team_key: team_key, defaults to None
    :type team_key: str, optional
    :param published: published, defaults to None
    :type published: bool, optional
    :param start_date: start_date, defaults to None
    :type start_date: str, optional
    :param end_date: end_date, defaults to None
    :type end_date: str, optional
    :param timeless: timeless, defaults to None
    :type timeless: bool, optional
    :param event_type: event_type, defaults to None
    :type event_type: Int32KeyNameObject, optional
    :param status: status, defaults to None
    :type status: Int32KeyNameObject, optional
    :param subject: subject, defaults to None
    :type subject: str, optional
    :param project: project, defaults to None
    :type project: ObjectLink, optional
    :param user1: user1, defaults to None
    :type user1: str, optional
    :param user2: user2, defaults to None
    :type user2: str, optional
    :param user3: user3, defaults to None
    :type user3: str, optional
    :param user4: user4, defaults to None
    :type user4: str, optional
    :param logical1: logical1, defaults to None
    :type logical1: bool, optional
    :param logical2: logical2, defaults to None
    :type logical2: bool, optional
    :param logical3: logical3, defaults to None
    :type logical3: bool, optional
    :param logical4: logical4, defaults to None
    :type logical4: bool, optional
    :param color: color, defaults to None
    :type color: str, optional
    :param notes: notes, defaults to None
    :type notes: str, optional
    :param history_objects: history_objects, defaults to None
    :type history_objects: List[HistoryObject], optional
    """

    def __init__(
        self,
        key: str = None,
        user_key: str = None,
        team_key: str = None,
        published: bool = None,
        start_date: str = None,
        end_date: str = None,
        timeless: bool = None,
        event_type: Int32KeyNameObject = None,
        status: Int32KeyNameObject = None,
        subject: str = None,
        project: ObjectLink = None,
        user1: str = None,
        user2: str = None,
        user3: str = None,
        user4: str = None,
        logical1: bool = None,
        logical2: bool = None,
        logical3: bool = None,
        logical4: bool = None,
        color: str = None,
        notes: str = None,
        history_objects: List[HistoryObject] = None,
        **kwargs,
    ):
        """HistoryDetails

        :param key: key, defaults to None
        :type key: str, optional
        :param user_key: user_key, defaults to None
        :type user_key: str, optional
        :param team_key: team_key, defaults to None
        :type team_key: str, optional
        :param published: published, defaults to None
        :type published: bool, optional
        :param start_date: start_date, defaults to None
        :type start_date: str, optional
        :param end_date: end_date, defaults to None
        :type end_date: str, optional
        :param timeless: timeless, defaults to None
        :type timeless: bool, optional
        :param event_type: event_type, defaults to None
        :type event_type: Int32KeyNameObject, optional
        :param status: status, defaults to None
        :type status: Int32KeyNameObject, optional
        :param subject: subject, defaults to None
        :type subject: str, optional
        :param project: project, defaults to None
        :type project: ObjectLink, optional
        :param user1: user1, defaults to None
        :type user1: str, optional
        :param user2: user2, defaults to None
        :type user2: str, optional
        :param user3: user3, defaults to None
        :type user3: str, optional
        :param user4: user4, defaults to None
        :type user4: str, optional
        :param logical1: logical1, defaults to None
        :type logical1: bool, optional
        :param logical2: logical2, defaults to None
        :type logical2: bool, optional
        :param logical3: logical3, defaults to None
        :type logical3: bool, optional
        :param logical4: logical4, defaults to None
        :type logical4: bool, optional
        :param color: color, defaults to None
        :type color: str, optional
        :param notes: notes, defaults to None
        :type notes: str, optional
        :param history_objects: history_objects, defaults to None
        :type history_objects: List[HistoryObject], optional
        """
        if key is not None:
            self.key = self._define_str("key", key, nullable=True)
        if user_key is not None:
            self.user_key = user_key
        if team_key is not None:
            self.team_key = self._define_str("team_key", team_key, nullable=True)
        if published is not None:
            self.published = published
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if timeless is not None:
            self.timeless = timeless
        if event_type is not None:
            self.event_type = self._define_object(event_type, Int32KeyNameObject)
        if status is not None:
            self.status = self._define_object(status, Int32KeyNameObject)
        if subject is not None:
            self.subject = self._define_str("subject", subject, nullable=True)
        if project is not None:
            self.project = self._define_object(project, ObjectLink)
        if user1 is not None:
            self.user1 = self._define_str("user1", user1, nullable=True)
        if user2 is not None:
            self.user2 = self._define_str("user2", user2, nullable=True)
        if user3 is not None:
            self.user3 = self._define_str("user3", user3, nullable=True)
        if user4 is not None:
            self.user4 = self._define_str("user4", user4, nullable=True)
        if logical1 is not None:
            self.logical1 = logical1
        if logical2 is not None:
            self.logical2 = logical2
        if logical3 is not None:
            self.logical3 = logical3
        if logical4 is not None:
            self.logical4 = logical4
        if color is not None:
            self.color = self._define_str("color", color, nullable=True)
        if notes is not None:
            self.notes = self._define_str("notes", notes, nullable=True)
        if history_objects is not None:
            self.history_objects = self._define_list(history_objects, HistoryObject)
        self._kwargs = kwargs
