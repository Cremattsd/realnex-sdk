# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import (
    EditObjectGroup,
    ObjectGroup,
    ObjectGroupDetails,
    ObjectGroupMember,
    ObjectGroupMemberPageResponse,
    ObjectGroupPageResponse,
    ObjectGroupSorting,
    ObjectType,
)


class CrmObjectGroupService(BaseService):

    @cast_models
    def get_object_group_list_async(
        self,
        object_types: List[ObjectType] = None,
        order: ObjectGroupSorting = None,
        search_name: str = None,
        page_size: int = None,
        page_number: int = None,
    ) -> Union[
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        ObjectGroupPageResponse,
        str,
        str,
        bytes,
        str,
    ]:
        """get_object_group_list_async

        :param object_types: object_types, defaults to None
        :type object_types: List[ObjectType], optional
        :param order: order, defaults to None
        :type order: ObjectGroupSorting, optional
        :param search_name: search_name, defaults to None
        :type search_name: str, optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        :param page_number: page_number, defaults to None
        :type page_number: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, ObjectGroupPageResponse, str, str, bytes, str]
        """

        Validator(ObjectType).is_array().is_optional().validate(object_types)
        Validator(ObjectGroupSorting).is_optional().validate(order)
        Validator(str).is_optional().validate(search_name)
        Validator(int).is_optional().validate(page_size)
        Validator(int).is_optional().validate(page_number)

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/Crm/group", self.get_default_headers())
            .add_query("ObjectTypes", object_types)
            .add_query("Order", order)
            .add_query("SearchName", search_name)
            .add_query("PageSize", page_size)
            .add_query("PageNumber", page_number)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.streaming=true":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json;odata.streaming=false":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/json":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/xml":
            return ObjectGroupPageResponse._unmap(response)
        if content == "text/plain":
            return ObjectGroupPageResponse._unmap(response)
        if content == "application/octet-stream":
            return ObjectGroupPageResponse._unmap(response)
        if content == "text/json":
            return ObjectGroupPageResponse._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_object_group_async(self, request_body: EditObjectGroup = None) -> Union[
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        ObjectGroup,
        str,
        str,
        bytes,
        str,
    ]:
        """post_object_group_async

        :param request_body: The request body., defaults to None
        :type request_body: EditObjectGroup, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, ObjectGroup, str, str, bytes, str]
        """

        Validator(EditObjectGroup).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/Crm/group", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=full":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=none":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.streaming=true":
            return ObjectGroup._unmap(response)
        if content == "application/json;odata.streaming=false":
            return ObjectGroup._unmap(response)
        if content == "application/json":
            return ObjectGroup._unmap(response)
        if content == "application/xml":
            return ObjectGroup._unmap(response)
        if content == "text/plain":
            return ObjectGroup._unmap(response)
        if content == "application/octet-stream":
            return ObjectGroup._unmap(response)
        if content == "text/json":
            return ObjectGroup._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_object_group_async(self, object_group_key: str) -> Union[
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        ObjectGroupDetails,
        str,
        str,
        bytes,
        str,
    ]:
        """get_object_group_async

        :param object_group_key: object_group_key
        :type object_group_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, ObjectGroupDetails, str, str, bytes, str]
        """

        Validator(str).validate(object_group_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/group/{{objectGroupKey}}",
                self.get_default_headers(),
            )
            .add_path("objectGroupKey", object_group_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=full":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.metadata=none":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.streaming=true":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json;odata.streaming=false":
            return ObjectGroupDetails._unmap(response)
        if content == "application/json":
            return ObjectGroupDetails._unmap(response)
        if content == "application/xml":
            return ObjectGroupDetails._unmap(response)
        if content == "text/plain":
            return ObjectGroupDetails._unmap(response)
        if content == "application/octet-stream":
            return ObjectGroupDetails._unmap(response)
        if content == "text/json":
            return ObjectGroupDetails._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_object_group_async(
        self, object_group_key: str, request_body: EditObjectGroup = None
    ) -> Union[
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        EditObjectGroup,
        str,
        str,
        bytes,
        str,
    ]:
        """put_object_group_async

        :param request_body: The request body., defaults to None
        :type request_body: EditObjectGroup, optional
        :param object_group_key: object_group_key
        :type object_group_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, EditObjectGroup, str, str, bytes, str]
        """

        Validator(EditObjectGroup).is_optional().validate(request_body)
        Validator(str).validate(object_group_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/group/{{objectGroupKey}}",
                self.get_default_headers(),
            )
            .add_path("objectGroupKey", object_group_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditObjectGroup._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditObjectGroup._unmap(response)
        if content == "application/json":
            return EditObjectGroup._unmap(response)
        if content == "application/xml":
            return EditObjectGroup._unmap(response)
        if content == "text/plain":
            return EditObjectGroup._unmap(response)
        if content == "application/octet-stream":
            return EditObjectGroup._unmap(response)
        if content == "text/json":
            return EditObjectGroup._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_object_group_async(
        self, object_group_key: str
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """delete_object_group_async

        :param object_group_key: object_group_key
        :type object_group_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(str).validate(object_group_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/group/{{objectGroupKey}}",
                self.get_default_headers(),
            )
            .add_path("objectGroupKey", object_group_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_object_group_members_async(
        self,
        object_group_key: str,
        object_types: List[ObjectType] = None,
        page_size: int = None,
        page_number: int = None,
    ) -> Union[
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        ObjectGroupMemberPageResponse,
        str,
        str,
        bytes,
        str,
    ]:
        """get_object_group_members_async

        :param object_group_key: object_group_key
        :type object_group_key: str
        :param object_types: object_types, defaults to None
        :type object_types: List[ObjectType], optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        :param page_number: page_number, defaults to None
        :type page_number: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, ObjectGroupMemberPageResponse, str, str, bytes, str]
        """

        Validator(str).validate(object_group_key)
        Validator(ObjectType).is_array().is_optional().validate(object_types)
        Validator(int).is_optional().validate(page_size)
        Validator(int).is_optional().validate(page_number)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/group/{{objectGroupKey}}/members",
                self.get_default_headers(),
            )
            .add_path("objectGroupKey", object_group_key)
            .add_query("ObjectTypes", object_types)
            .add_query("PageSize", page_size)
            .add_query("PageNumber", page_number)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.streaming=true":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json;odata.streaming=false":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/json":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/xml":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "text/plain":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "application/octet-stream":
            return ObjectGroupMemberPageResponse._unmap(response)
        if content == "text/json":
            return ObjectGroupMemberPageResponse._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_object_group_members_async(
        self, object_group_key: str, request_body: List[ObjectGroupMember] = None
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """post_object_group_members_async

        :param request_body: The request body., defaults to None
        :type request_body: List[ObjectGroupMember], optional
        :param object_group_key: object_group_key
        :type object_group_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(ObjectGroupMember).is_array().is_optional().validate(request_body)
        Validator(str).validate(object_group_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/group/{{objectGroupKey}}/members",
                self.get_default_headers(),
            )
            .add_path("objectGroupKey", object_group_key)
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_object_group_member_async(
        self, object_group_key: str, object_key: str
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """delete_object_group_member_async

        :param object_group_key: object_group_key
        :type object_group_key: str
        :param object_key: object_key
        :type object_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(str).validate(object_group_key)
        Validator(str).validate(object_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/group/{{objectGroupKey}}/members/{{objectKey}}",
                self.get_default_headers(),
            )
            .add_path("objectGroupKey", object_group_key)
            .add_path("objectKey", object_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_object_group_list_by_object_async(self, object_key: str) -> Union[
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        List[ObjectGroup],
        str,
        str,
        bytes,
        str,
    ]:
        """get_object_group_list_by_object_async

        :param object_key: object_key
        :type object_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], List[ObjectGroup], str, str, bytes, str]
        """

        Validator(str).validate(object_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/object/{{objectKey}}/memberof",
                self.get_default_headers(),
            )
            .add_path("objectKey", object_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/json":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/xml":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "text/plain":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [ObjectGroup._unmap(item) for item in response]
        if content == "text/json":
            return [ObjectGroup._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)
