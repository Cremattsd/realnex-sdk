# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import (
    CreateSaleComp,
    EditNotes,
    EditSaleComp,
    EditSaleCompDetails,
    EditSaleCompListing,
    EditSaleCompUsage,
    SaleComp,
)


class CrmSaleCompService(BaseService):

    @cast_models
    def get_sale_comp_async(self, sale_comp_key: str) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """get_sale_comp_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/full",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_sale_comp_async(self, request_body: CreateSaleComp = None) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """post_sale_comp_async

        :param request_body: The request body., defaults to None
        :type request_body: CreateSaleComp, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(CreateSaleComp).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/SaleComp", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_edit_sale_comp_async(self, sale_comp_key: str) -> Union[
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        EditSaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """get_edit_sale_comp_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, EditSaleComp, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditSaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditSaleComp._unmap(response)
        if content == "application/json":
            return EditSaleComp._unmap(response)
        if content == "application/xml":
            return EditSaleComp._unmap(response)
        if content == "text/plain":
            return EditSaleComp._unmap(response)
        if content == "application/octet-stream":
            return EditSaleComp._unmap(response)
        if content == "text/json":
            return EditSaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_edit_sale_comp_async(
        self, sale_comp_key: str, request_body: EditSaleComp = None
    ) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """put_edit_sale_comp_async

        :param request_body: The request body., defaults to None
        :type request_body: EditSaleComp, optional
        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(EditSaleComp).is_optional().validate(request_body)
        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_sale_comp_async(self, sale_comp_key: str) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """delete_sale_comp_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_sale_comp_notes_async(self, sale_comp_key: str) -> Union[
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        str,
        str,
        bytes,
        str,
    ]:
        """get_sale_comp_notes_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/notes",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditNotes._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json":
            return EditNotes._unmap(response)
        if content == "application/xml":
            return EditNotes._unmap(response)
        if content == "text/plain":
            return EditNotes._unmap(response)
        if content == "application/octet-stream":
            return EditNotes._unmap(response)
        if content == "text/json":
            return EditNotes._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_sale_comp_notes_async(
        self, sale_comp_key: str, request_body: EditNotes = None
    ) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """put_sale_comp_notes_async

        :param request_body: The request body., defaults to None
        :type request_body: EditNotes, optional
        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(EditNotes).is_optional().validate(request_body)
        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/notes",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("PUT")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_sale_comp_details_async(self, sale_comp_key: str) -> Union[
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        EditSaleCompDetails,
        str,
        str,
        bytes,
        str,
    ]:
        """get_sale_comp_details_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, EditSaleCompDetails, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/details",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditSaleCompDetails._unmap(response)
        if content == "application/json":
            return EditSaleCompDetails._unmap(response)
        if content == "application/xml":
            return EditSaleCompDetails._unmap(response)
        if content == "text/plain":
            return EditSaleCompDetails._unmap(response)
        if content == "application/octet-stream":
            return EditSaleCompDetails._unmap(response)
        if content == "text/json":
            return EditSaleCompDetails._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_sale_comp_details_async(
        self, sale_comp_key: str, request_body: EditSaleCompDetails = None
    ) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """put_sale_comp_details_async

        :param request_body: The request body., defaults to None
        :type request_body: EditSaleCompDetails, optional
        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(EditSaleCompDetails).is_optional().validate(request_body)
        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/details",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_sale_comp_listing_async(self, sale_comp_key: str) -> Union[
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        EditSaleCompListing,
        str,
        str,
        bytes,
        str,
    ]:
        """get_sale_comp_listing_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, EditSaleCompListing, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/listing",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditSaleCompListing._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditSaleCompListing._unmap(response)
        if content == "application/json":
            return EditSaleCompListing._unmap(response)
        if content == "application/xml":
            return EditSaleCompListing._unmap(response)
        if content == "text/plain":
            return EditSaleCompListing._unmap(response)
        if content == "application/octet-stream":
            return EditSaleCompListing._unmap(response)
        if content == "text/json":
            return EditSaleCompListing._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_sale_comp_listing_async(
        self, sale_comp_key: str, request_body: EditSaleCompListing = None
    ) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """put_sale_comp_listing_async

        :param request_body: The request body., defaults to None
        :type request_body: EditSaleCompListing, optional
        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(EditSaleCompListing).is_optional().validate(request_body)
        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/listing",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_sale_comp_usage_async(self, sale_comp_key: str) -> Union[
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        EditSaleCompUsage,
        str,
        str,
        bytes,
        str,
    ]:
        """get_sale_comp_usage_async

        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, EditSaleCompUsage, str, str, bytes, str]
        """

        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/usage",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditSaleCompUsage._unmap(response)
        if content == "application/json":
            return EditSaleCompUsage._unmap(response)
        if content == "application/xml":
            return EditSaleCompUsage._unmap(response)
        if content == "text/plain":
            return EditSaleCompUsage._unmap(response)
        if content == "application/octet-stream":
            return EditSaleCompUsage._unmap(response)
        if content == "text/json":
            return EditSaleCompUsage._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_sale_comp_usage_async(
        self, sale_comp_key: str, request_body: EditSaleCompUsage = None
    ) -> Union[
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        SaleComp,
        str,
        str,
        bytes,
        str,
    ]:
        """put_sale_comp_usage_async

        :param request_body: The request body., defaults to None
        :type request_body: EditSaleCompUsage, optional
        :param sale_comp_key: sale_comp_key
        :type sale_comp_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, SaleComp, str, str, bytes, str]
        """

        Validator(EditSaleCompUsage).is_optional().validate(request_body)
        Validator(str).validate(sale_comp_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/salecomp/{{saleCompKey}}/usage",
                self.get_default_headers(),
            )
            .add_path("saleCompKey", sale_comp_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=full":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json;odata.metadata=none":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=true":
            return SaleComp._unmap(response)
        if content == "application/json;odata.streaming=false":
            return SaleComp._unmap(response)
        if content == "application/json":
            return SaleComp._unmap(response)
        if content == "application/xml":
            return SaleComp._unmap(response)
        if content == "text/plain":
            return SaleComp._unmap(response)
        if content == "application/octet-stream":
            return SaleComp._unmap(response)
        if content == "text/json":
            return SaleComp._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)
