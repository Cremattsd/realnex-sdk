# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import (
    CreateSpace,
    EditNotes,
    EditSpace,
    EditSpaceDetails,
    PropertySpace,
    Space,
)


class CrmSpaceService(BaseService):

    @cast_models
    def get_space_async(self, space_key: str, include_property: bool = None) -> Union[
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        str,
        str,
        bytes,
        str,
    ]:
        """get_space_async

        :param space_key: space_key
        :type space_key: str
        :param include_property: include_property, defaults to None
        :type include_property: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, str, str, bytes, str]
        """

        Validator(str).validate(space_key)
        Validator(bool).is_optional().validate(include_property)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}/full",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .add_query("includeProperty", include_property)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json":
            return Space._unmap(response)
        if content == "application/xml":
            return Space._unmap(response)
        if content == "text/plain":
            return Space._unmap(response)
        if content == "application/octet-stream":
            return Space._unmap(response)
        if content == "text/json":
            return Space._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_property_spaces_async(self, property_key: str) -> Union[
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        List[PropertySpace],
        str,
        str,
        bytes,
        str,
    ]:
        """get_property_spaces_async

        :param property_key: property_key
        :type property_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], List[PropertySpace], str, str, bytes, str]
        """

        Validator(str).validate(property_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/property/{{propertyKey}}/space",
                self.get_default_headers(),
            )
            .add_path("propertyKey", property_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/json":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/xml":
            return [PropertySpace._unmap(item) for item in response]
        if content == "text/plain":
            return [PropertySpace._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [PropertySpace._unmap(item) for item in response]
        if content == "text/json":
            return [PropertySpace._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_property_space_async(
        self, property_key: str, request_body: CreateSpace = None
    ) -> Union[
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        PropertySpace,
        str,
        str,
        bytes,
        str,
    ]:
        """post_property_space_async

        :param request_body: The request body., defaults to None
        :type request_body: CreateSpace, optional
        :param property_key: property_key
        :type property_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, PropertySpace, str, str, bytes, str]
        """

        Validator(CreateSpace).is_optional().validate(request_body)
        Validator(str).validate(property_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/property/{{propertyKey}}/space",
                self.get_default_headers(),
            )
            .add_path("propertyKey", property_key)
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=full":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.metadata=none":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.streaming=true":
            return PropertySpace._unmap(response)
        if content == "application/json;odata.streaming=false":
            return PropertySpace._unmap(response)
        if content == "application/json":
            return PropertySpace._unmap(response)
        if content == "application/xml":
            return PropertySpace._unmap(response)
        if content == "text/plain":
            return PropertySpace._unmap(response)
        if content == "application/octet-stream":
            return PropertySpace._unmap(response)
        if content == "text/json":
            return PropertySpace._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_edit_space_async(self, space_key: str) -> Union[
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        EditSpace,
        str,
        str,
        bytes,
        str,
    ]:
        """get_edit_space_async

        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, EditSpace, str, str, bytes, str]
        """

        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditSpace._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditSpace._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditSpace._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditSpace._unmap(response)
        if content == "application/json":
            return EditSpace._unmap(response)
        if content == "application/xml":
            return EditSpace._unmap(response)
        if content == "text/plain":
            return EditSpace._unmap(response)
        if content == "application/octet-stream":
            return EditSpace._unmap(response)
        if content == "text/json":
            return EditSpace._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_edit_space_async(
        self, space_key: str, request_body: EditSpace = None
    ) -> Union[
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        str,
        str,
        bytes,
        str,
    ]:
        """put_edit_space_async

        :param request_body: The request body., defaults to None
        :type request_body: EditSpace, optional
        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, str, str, bytes, str]
        """

        Validator(EditSpace).is_optional().validate(request_body)
        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json":
            return Space._unmap(response)
        if content == "application/xml":
            return Space._unmap(response)
        if content == "text/plain":
            return Space._unmap(response)
        if content == "application/octet-stream":
            return Space._unmap(response)
        if content == "text/json":
            return Space._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_space_async(self, space_key: str) -> Union[
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        str,
        str,
        bytes,
        str,
    ]:
        """delete_space_async

        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, str, str, bytes, str]
        """

        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json":
            return Space._unmap(response)
        if content == "application/xml":
            return Space._unmap(response)
        if content == "text/plain":
            return Space._unmap(response)
        if content == "application/octet-stream":
            return Space._unmap(response)
        if content == "text/json":
            return Space._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_space_notes_async(self, space_key: str) -> Union[
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        str,
        str,
        bytes,
        str,
    ]:
        """get_space_notes_async

        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, str, str, bytes, str]
        """

        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}/notes",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditNotes._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json":
            return EditNotes._unmap(response)
        if content == "application/xml":
            return EditNotes._unmap(response)
        if content == "text/plain":
            return EditNotes._unmap(response)
        if content == "application/octet-stream":
            return EditNotes._unmap(response)
        if content == "text/json":
            return EditNotes._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_space_notes_async(
        self, space_key: str, request_body: EditNotes = None
    ) -> Union[
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        str,
        str,
        bytes,
        str,
    ]:
        """put_space_notes_async

        :param request_body: The request body., defaults to None
        :type request_body: EditNotes, optional
        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, str, str, bytes, str]
        """

        Validator(EditNotes).is_optional().validate(request_body)
        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}/notes",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("PUT")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json":
            return Space._unmap(response)
        if content == "application/xml":
            return Space._unmap(response)
        if content == "text/plain":
            return Space._unmap(response)
        if content == "application/octet-stream":
            return Space._unmap(response)
        if content == "text/json":
            return Space._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_space_details_async(self, space_key: str) -> Union[
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        EditSpaceDetails,
        str,
        str,
        bytes,
        str,
    ]:
        """get_space_details_async

        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, EditSpaceDetails, str, str, bytes, str]
        """

        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}/details",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditSpaceDetails._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditSpaceDetails._unmap(response)
        if content == "application/json":
            return EditSpaceDetails._unmap(response)
        if content == "application/xml":
            return EditSpaceDetails._unmap(response)
        if content == "text/plain":
            return EditSpaceDetails._unmap(response)
        if content == "application/octet-stream":
            return EditSpaceDetails._unmap(response)
        if content == "text/json":
            return EditSpaceDetails._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_space_details_async(
        self, space_key: str, request_body: EditSpaceDetails = None
    ) -> Union[
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        Space,
        str,
        str,
        bytes,
        str,
    ]:
        """put_space_details_async

        :param request_body: The request body., defaults to None
        :type request_body: EditSpaceDetails, optional
        :param space_key: space_key
        :type space_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, Space, str, str, bytes, str]
        """

        Validator(EditSpaceDetails).is_optional().validate(request_body)
        Validator(str).validate(space_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/space/{{spaceKey}}/details",
                self.get_default_headers(),
            )
            .add_path("spaceKey", space_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Space._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Space._unmap(response)
        if content == "application/json":
            return Space._unmap(response)
        if content == "application/xml":
            return Space._unmap(response)
        if content == "text/plain":
            return Space._unmap(response)
        if content == "application/octet-stream":
            return Space._unmap(response)
        if content == "text/json":
            return Space._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)
