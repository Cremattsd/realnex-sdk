# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import (
    CompanyListItem,
    ContactListItem,
    LeaseCompListItem,
    ProjectListItem,
    PropertyListItem,
    SaleCompListItem,
    SpaceListItem,
)


class CrmODataService(BaseService):

    @cast_models
    def get_api_v1_crm_o_data_contacts(self, api_version: str = None) -> Union[
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        List[ContactListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_contacts

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], List[ContactListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/Contacts", self.get_default_headers()
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/json":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [ContactListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [ContactListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [ContactListItem._unmap(item) for item in response]
        if content == "text/json":
            return [ContactListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_api_v1_crm_o_data_companies(self, api_version: str = None) -> Union[
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        List[CompanyListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_companies

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], List[CompanyListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/Companies", self.get_default_headers()
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/json":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [CompanyListItem._unmap(item) for item in response]
        if content == "text/json":
            return [CompanyListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_api_v1_crm_o_data_properties(self, api_version: str = None) -> Union[
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        List[PropertyListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_properties

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], List[PropertyListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/Properties",
                self.get_default_headers(),
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/json":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [PropertyListItem._unmap(item) for item in response]
        if content == "text/json":
            return [PropertyListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_api_v1_crm_o_data_spaces(self, api_version: str = None) -> Union[
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        List[SpaceListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_spaces

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], List[SpaceListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/Spaces", self.get_default_headers()
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/json":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [SpaceListItem._unmap(item) for item in response]
        if content == "text/json":
            return [SpaceListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_api_v1_crm_o_data_projects(self, api_version: str = None) -> Union[
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        List[ProjectListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_projects

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], List[ProjectListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/Projects", self.get_default_headers()
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/json":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [ProjectListItem._unmap(item) for item in response]
        if content == "text/json":
            return [ProjectListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_api_v1_crm_o_data_lease_comps(self, api_version: str = None) -> Union[
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        List[LeaseCompListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_lease_comps

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], List[LeaseCompListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/LeaseComps",
                self.get_default_headers(),
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/json":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [LeaseCompListItem._unmap(item) for item in response]
        if content == "text/json":
            return [LeaseCompListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_api_v1_crm_o_data_sale_comps(self, api_version: str = None) -> Union[
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        List[SaleCompListItem],
        str,
        str,
        bytes,
        str,
    ]:
        """get_api_v1_crm_o_data_sale_comps

        :param api_version: The requested API version, defaults to None
        :type api_version: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], List[SaleCompListItem], str, str, bytes, str]
        """

        Validator(str).is_optional().validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/CrmOData/SaleComps", self.get_default_headers()
            )
            .add_query("api-version", api_version)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/json":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/xml":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "text/plain":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [SaleCompListItem._unmap(item) for item in response]
        if content == "text/json":
            return [SaleCompListItem._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)
