# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import FieldDefinition, Team, User


class CrmService(BaseService):

    @cast_models
    def get_definition_tables_async(
        self,
    ) -> Union[
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        List[str],
        str,
        str,
        bytes,
        str,
    ]:
        """get_definition_tables_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[str], List[str], List[str], List[str], List[str], List[str], List[str], List[str], List[str], List[str], List[str], List[str], str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/definitions", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_definitions_by_table_async(self, table_name: str) -> Union[
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        List[FieldDefinition],
        str,
        str,
        bytes,
        str,
    ]:
        """get_definitions_by_table_async

        :param table_name: table_name
        :type table_name: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], List[FieldDefinition], str, str, bytes, str]
        """

        Validator(str).validate(table_name)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/definitions/{{tableName}}",
                self.get_default_headers(),
            )
            .add_path("tableName", table_name)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/json":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/xml":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "text/plain":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [FieldDefinition._unmap(item) for item in response]
        if content == "text/json":
            return [FieldDefinition._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_users_async(
        self,
    ) -> Union[
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        List[User],
        str,
        str,
        bytes,
        str,
    ]:
        """get_users_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[User], List[User], List[User], List[User], List[User], List[User], List[User], List[User], List[User], List[User], List[User], List[User], str, str, bytes, str]
        """

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/Crm/users", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [User._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [User._unmap(item) for item in response]
        if content == "application/json":
            return [User._unmap(item) for item in response]
        if content == "application/xml":
            return [User._unmap(item) for item in response]
        if content == "text/plain":
            return [User._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [User._unmap(item) for item in response]
        if content == "text/json":
            return [User._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_teams_async(
        self,
    ) -> Union[
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        List[Team],
        str,
        str,
        bytes,
        str,
    ]:
        """get_teams_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], List[Team], str, str, bytes, str]
        """

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/Crm/teams", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [Team._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [Team._unmap(item) for item in response]
        if content == "application/json":
            return [Team._unmap(item) for item in response]
        if content == "application/xml":
            return [Team._unmap(item) for item in response]
        if content == "text/plain":
            return [Team._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [Team._unmap(item) for item in response]
        if content == "text/json":
            return [Team._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_countries_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_countries_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/countries", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_time_zones_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_time_zones_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/timezones", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_attachment_types_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_attachment_types_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/attachmenttypes",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_property_types_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_property_types_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/propertytypes", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_event_types_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_event_types_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/eventtypes", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_priorities_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_priorities_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/priorities", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_history_statuses_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_history_statuses_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/historystatuses",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_project_types_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_project_types_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/projecttypes", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_project_statuses_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_project_statuses_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/projectstatuses",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_project_results_async(
        self,
    ) -> Union[
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        dict,
        str,
        str,
        bytes,
        str,
    ]:
        """get_project_results_async

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, dict, str, str, bytes, str]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/projectresults", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)
