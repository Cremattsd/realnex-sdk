# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import Company, CreateCompany, EditCompany, EditCompanyDetails, EditNotes


class CrmCompanyService(BaseService):

    @cast_models
    def get_company_async(self, company_key: str) -> Union[
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        str,
        str,
        bytes,
        str,
    ]:
        """get_company_async

        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, str, str, bytes, str]
        """

        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}/full",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json":
            return Company._unmap(response)
        if content == "application/xml":
            return Company._unmap(response)
        if content == "text/plain":
            return Company._unmap(response)
        if content == "application/octet-stream":
            return Company._unmap(response)
        if content == "text/json":
            return Company._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_edit_company_async(self, company_key: str) -> Union[
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        EditCompany,
        str,
        str,
        bytes,
        str,
    ]:
        """get_edit_company_async

        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, EditCompany, str, str, bytes, str]
        """

        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditCompany._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditCompany._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditCompany._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditCompany._unmap(response)
        if content == "application/json":
            return EditCompany._unmap(response)
        if content == "application/xml":
            return EditCompany._unmap(response)
        if content == "text/plain":
            return EditCompany._unmap(response)
        if content == "application/octet-stream":
            return EditCompany._unmap(response)
        if content == "text/json":
            return EditCompany._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_edit_company_async(
        self, company_key: str, request_body: EditCompany = None
    ) -> Union[
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        str,
        str,
        bytes,
        str,
    ]:
        """put_edit_company_async

        :param request_body: The request body., defaults to None
        :type request_body: EditCompany, optional
        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, str, str, bytes, str]
        """

        Validator(EditCompany).is_optional().validate(request_body)
        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json":
            return Company._unmap(response)
        if content == "application/xml":
            return Company._unmap(response)
        if content == "text/plain":
            return Company._unmap(response)
        if content == "application/octet-stream":
            return Company._unmap(response)
        if content == "text/json":
            return Company._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_company_async(self, company_key: str) -> Union[
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        str,
        str,
        bytes,
        str,
    ]:
        """delete_company_async

        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, str, str, bytes, str]
        """

        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json":
            return Company._unmap(response)
        if content == "application/xml":
            return Company._unmap(response)
        if content == "text/plain":
            return Company._unmap(response)
        if content == "application/octet-stream":
            return Company._unmap(response)
        if content == "text/json":
            return Company._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_company_async(self, request_body: CreateCompany = None) -> Union[
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        str,
        str,
        bytes,
        str,
    ]:
        """post_company_async

        :param request_body: The request body., defaults to None
        :type request_body: CreateCompany, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, str, str, bytes, str]
        """

        Validator(CreateCompany).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json":
            return Company._unmap(response)
        if content == "application/xml":
            return Company._unmap(response)
        if content == "text/plain":
            return Company._unmap(response)
        if content == "application/octet-stream":
            return Company._unmap(response)
        if content == "text/json":
            return Company._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_edit_company_notes_async(self, company_key: str) -> Union[
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        EditNotes,
        str,
        str,
        bytes,
        str,
    ]:
        """get_edit_company_notes_async

        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, EditNotes, str, str, bytes, str]
        """

        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}/notes",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditNotes._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditNotes._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditNotes._unmap(response)
        if content == "application/json":
            return EditNotes._unmap(response)
        if content == "application/xml":
            return EditNotes._unmap(response)
        if content == "text/plain":
            return EditNotes._unmap(response)
        if content == "application/octet-stream":
            return EditNotes._unmap(response)
        if content == "text/json":
            return EditNotes._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_company_notes_async(
        self, company_key: str, request_body: EditNotes = None
    ) -> Union[
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        str,
        str,
        bytes,
        str,
    ]:
        """put_company_notes_async

        :param request_body: The request body., defaults to None
        :type request_body: EditNotes, optional
        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, str, str, bytes, str]
        """

        Validator(EditNotes).is_optional().validate(request_body)
        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}/notes",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("PUT")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json":
            return Company._unmap(response)
        if content == "application/xml":
            return Company._unmap(response)
        if content == "text/plain":
            return Company._unmap(response)
        if content == "application/octet-stream":
            return Company._unmap(response)
        if content == "text/json":
            return Company._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_company_details_async(self, company_key: str) -> Union[
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        EditCompanyDetails,
        str,
        str,
        bytes,
        str,
        None,
    ]:
        """get_company_details_async

        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, EditCompanyDetails, str, str, bytes, str, None]
        """

        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}/details",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if (
            status == 200
            and content
            == "application/json;odata.metadata=minimal;odata.streaming=true"
        ):
            return EditCompanyDetails._unmap(response)
        if (
            status == 200
            and content
            == "application/json;odata.metadata=minimal;odata.streaming=false"
        ):
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/json;odata.metadata=minimal":
            return EditCompanyDetails._unmap(response)
        if (
            status == 200
            and content == "application/json;odata.metadata=full;odata.streaming=true"
        ):
            return EditCompanyDetails._unmap(response)
        if (
            status == 200
            and content == "application/json;odata.metadata=full;odata.streaming=false"
        ):
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/json;odata.metadata=full":
            return EditCompanyDetails._unmap(response)
        if (
            status == 200
            and content == "application/json;odata.metadata=none;odata.streaming=true"
        ):
            return EditCompanyDetails._unmap(response)
        if (
            status == 200
            and content == "application/json;odata.metadata=none;odata.streaming=false"
        ):
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/json;odata.metadata=none":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/json;odata.streaming=true":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/json;odata.streaming=false":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/json":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/xml":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "text/plain":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "application/octet-stream":
            return EditCompanyDetails._unmap(response)
        if status == 200 and content == "text/json":
            return EditCompanyDetails._unmap(response)
        if status == 204 and not response:
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_company_details_async(
        self, company_key: str, request_body: EditCompanyDetails = None
    ) -> Union[
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        Company,
        str,
        str,
        bytes,
        str,
    ]:
        """put_company_details_async

        :param request_body: The request body., defaults to None
        :type request_body: EditCompanyDetails, optional
        :param company_key: company_key
        :type company_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, Company, str, str, bytes, str]
        """

        Validator(EditCompanyDetails).is_optional().validate(request_body)
        Validator(str).validate(company_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/company/{{companyKey}}/details",
                self.get_default_headers(),
            )
            .add_path("companyKey", company_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Company._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Company._unmap(response)
        if content == "application/json":
            return Company._unmap(response)
        if content == "application/xml":
            return Company._unmap(response)
        if content == "text/plain":
            return Company._unmap(response)
        if content == "application/octet-stream":
            return Company._unmap(response)
        if content == "text/json":
            return Company._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)
