# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.request_error import RequestError
from ..models.utils.cast_models import cast_models
from ..models import (
    EditEvent,
    Event,
    EventDetails,
    EventObject,
    EventPageResponse,
    EventParticipant,
    EventSorting,
)


class CrmEventService(BaseService):

    @cast_models
    def get_event_details_async(self, event_key: str) -> Union[
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        EventDetails,
        str,
        str,
        bytes,
        str,
    ]:
        """get_event_details_async

        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, EventDetails, str, str, bytes, str]
        """

        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/details",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EventDetails._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EventDetails._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EventDetails._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EventDetails._unmap(response)
        if content == "application/json":
            return EventDetails._unmap(response)
        if content == "application/xml":
            return EventDetails._unmap(response)
        if content == "text/plain":
            return EventDetails._unmap(response)
        if content == "application/octet-stream":
            return EventDetails._unmap(response)
        if content == "text/json":
            return EventDetails._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_event_async(self, request_body: EditEvent = None) -> Union[
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        str,
        str,
        bytes,
        str,
    ]:
        """post_event_async

        :param request_body: The request body., defaults to None
        :type request_body: EditEvent, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Event, Event, Event, Event, Event, Event, Event, Event, Event, Event, Event, Event, str, str, bytes, str]
        """

        Validator(EditEvent).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/Crm/event", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Event._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json":
            return Event._unmap(response)
        if content == "application/xml":
            return Event._unmap(response)
        if content == "text/plain":
            return Event._unmap(response)
        if content == "application/octet-stream":
            return Event._unmap(response)
        if content == "text/json":
            return Event._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_event_async(self, event_key: str) -> Union[
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        EditEvent,
        str,
        str,
        bytes,
        str,
    ]:
        """get_event_async

        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, EditEvent, str, str, bytes, str]
        """

        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EditEvent._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EditEvent._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EditEvent._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EditEvent._unmap(response)
        if content == "application/json":
            return EditEvent._unmap(response)
        if content == "application/xml":
            return EditEvent._unmap(response)
        if content == "text/plain":
            return EditEvent._unmap(response)
        if content == "application/octet-stream":
            return EditEvent._unmap(response)
        if content == "text/json":
            return EditEvent._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def put_event_async(
        self, event_key: str, request_body: EditEvent = None
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """put_event_async

        :param request_body: The request body., defaults to None
        :type request_body: EditEvent, optional
        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(EditEvent).is_optional().validate(request_body)
        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("PUT")
            .set_body(request_body, "application/merge-patch+json")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_event_async(
        self, event_key: str
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """delete_event_async

        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_event_objects_async(self, event_key: str) -> Union[
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        List[EventObject],
        str,
        str,
        bytes,
        str,
    ]:
        """get_event_objects_async

        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], List[EventObject], str, str, bytes, str]
        """

        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/object",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [EventObject._unmap(item) for item in response]
        if content == "application/json":
            return [EventObject._unmap(item) for item in response]
        if content == "application/xml":
            return [EventObject._unmap(item) for item in response]
        if content == "text/plain":
            return [EventObject._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [EventObject._unmap(item) for item in response]
        if content == "text/json":
            return [EventObject._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_event_objects_async(
        self, event_key: str, request_body: List[EventObject] = None
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """post_event_objects_async

        :param request_body: The request body., defaults to None
        :type request_body: List[EventObject], optional
        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(EventObject).is_array().is_optional().validate(request_body)
        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/object",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_event_object_async(
        self, event_key: str, object_key: str
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """delete_event_object_async

        :param event_key: event_key
        :type event_key: str
        :param object_key: object_key
        :type object_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(str).validate(event_key)
        Validator(str).validate(object_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/object/{{objectKey}}",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .add_path("objectKey", object_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_event_participants_async(self, event_key: str) -> Union[
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        List[EventParticipant],
        str,
        str,
        bytes,
        str,
    ]:
        """get_event_participants_async

        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], List[EventParticipant], str, str, bytes, str]
        """

        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/participant",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=minimal":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=full":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.metadata=none":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.streaming=true":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json;odata.streaming=false":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/json":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/xml":
            return [EventParticipant._unmap(item) for item in response]
        if content == "text/plain":
            return [EventParticipant._unmap(item) for item in response]
        if content == "application/octet-stream":
            return [EventParticipant._unmap(item) for item in response]
        if content == "text/json":
            return [EventParticipant._unmap(item) for item in response]
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_event_participants_async(
        self, event_key: str, request_body: List[EventParticipant] = None
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """post_event_participants_async

        :param request_body: The request body., defaults to None
        :type request_body: List[EventParticipant], optional
        :param event_key: event_key
        :type event_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(EventParticipant).is_array().is_optional().validate(request_body)
        Validator(str).validate(event_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/participant",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def delete_event_participant_async(
        self, event_key: str, participant_key: str
    ) -> Union[
        str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str
    ]:
        """delete_event_participant_async

        :param event_key: event_key
        :type event_key: str
        :param participant_key: participant_key
        :type participant_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[str, str, str, str, str, str, str, str, str, str, str, str, str, str, bytes, str]
        """

        Validator(str).validate(event_key)
        Validator(str).validate(participant_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/event/{{eventKey}}/participant/{{participantKey}}",
                self.get_default_headers(),
            )
            .add_path("eventKey", event_key)
            .add_path("participantKey", participant_key)
            .serialize()
            .set_method("DELETE")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=minimal":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=full":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return response
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return response
        if content == "application/json;odata.metadata=none":
            return response
        if content == "application/json;odata.streaming=true":
            return response
        if content == "application/json;odata.streaming=false":
            return response
        if content == "application/json":
            return response
        if content == "application/xml":
            return response
        if content == "text/plain":
            return response
        if content == "application/octet-stream":
            return response
        if content == "text/json":
            return response
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def get_object_events_async(
        self,
        object_key: str,
        order: EventSorting = None,
        page_size: int = None,
        page_number: int = None,
    ) -> Union[
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        EventPageResponse,
        str,
        str,
        bytes,
        str,
    ]:
        """get_object_events_async

        :param object_key: object_key
        :type object_key: str
        :param order: order, defaults to None
        :type order: EventSorting, optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        :param page_number: page_number, defaults to None
        :type page_number: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, EventPageResponse, str, str, bytes, str]
        """

        Validator(str).validate(object_key)
        Validator(EventSorting).is_optional().validate(order)
        Validator(int).is_optional().validate(page_size)
        Validator(int).is_optional().validate(page_number)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/object/{{objectKey}}/event",
                self.get_default_headers(),
            )
            .add_path("objectKey", object_key)
            .add_query("Order", order)
            .add_query("PageSize", page_size)
            .add_query("PageNumber", page_number)
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=full":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.metadata=none":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.streaming=true":
            return EventPageResponse._unmap(response)
        if content == "application/json;odata.streaming=false":
            return EventPageResponse._unmap(response)
        if content == "application/json":
            return EventPageResponse._unmap(response)
        if content == "application/xml":
            return EventPageResponse._unmap(response)
        if content == "text/plain":
            return EventPageResponse._unmap(response)
        if content == "application/octet-stream":
            return EventPageResponse._unmap(response)
        if content == "text/json":
            return EventPageResponse._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)

    @cast_models
    def post_object_event_async(
        self, object_key: str, request_body: EditEvent = None
    ) -> Union[
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        Event,
        str,
        str,
        bytes,
        str,
    ]:
        """post_object_event_async

        :param request_body: The request body., defaults to None
        :type request_body: EditEvent, optional
        :param object_key: object_key
        :type object_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[Event, Event, Event, Event, Event, Event, Event, Event, Event, Event, Event, Event, str, str, bytes, str]
        """

        Validator(EditEvent).is_optional().validate(request_body)
        Validator(str).validate(object_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/Crm/object/{{objectKey}}/event",
                self.get_default_headers(),
            )
            .add_path("objectKey", object_key)
            .serialize()
            .set_method("POST")
            .set_body(
                request_body,
                "application/json;odata.metadata=minimal;odata.streaming=true",
            )
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json;odata.metadata=minimal;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=minimal;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=minimal":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=full;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=full":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=none;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json;odata.metadata=none":
            return Event._unmap(response)
        if content == "application/json;odata.streaming=true":
            return Event._unmap(response)
        if content == "application/json;odata.streaming=false":
            return Event._unmap(response)
        if content == "application/json":
            return Event._unmap(response)
        if content == "application/xml":
            return Event._unmap(response)
        if content == "text/plain":
            return Event._unmap(response)
        if content == "application/octet-stream":
            return Event._unmap(response)
        if content == "text/json":
            return Event._unmap(response)
        raise RequestError("Error on deserializing the response.", status, response)
